MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi bcopy2.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec bcopy_aux_1038 m_1039 src_1040 des_1041 i_1042 =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1134 = update_1033 i_1042 m_1039 des_1041 (src_1040 i_1042) 
     in
       bcopy_aux_1038 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 n_1044 m_1045 =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 && n_1044 > 0 then
       bcopy_aux_1038 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 i_1034 n_1035 des_1036 x_1037 =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec bcopy_aux_1038 m_1039 src_1040 des_1041 i_1042 =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1134 = update_1033 i_1042 m_1039 des_1041 (src_1040 i_1042) 
     in
       bcopy_aux_1038 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 n_1044 m_1045 =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 && n_1044 > 0 then
       bcopy_aux_1038 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
 let main_1169 = let arg1_1167 = rand_int () 
                 in
                 let arg2_1168 = rand_int () 
                 in
                   main_1043 arg1_1167 arg2_1168 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1171 (i_1034:int) (n_1035:int) (des_1036:(int -> int)) (x_1037:int) =
   (match des_1036 i_1034 with
      | _ -> ()
      | _ -> let u_1078 = {fail} 
             in
               _|_) 
 in
 let rec bcopy_aux_1170 (m_1039:int) (src_1040:(int -> int)) (des_1041:(
   int -> int)) (i_1042:int) =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1134 = update_1171 i_1042 m_1039 des_1041 (src_1040 i_1042) 
     in
       bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 (n_1044:int) (m_1045:int) =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 && n_1044 > 0 then
       bcopy_aux_1170 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
 let main_1169 = let arg1_1167 = rand_int () 
                 in
                 let arg2_1168 = rand_int () 
                 in
                   main_1043 arg1_1167 arg2_1168 
 in
   ()

abst_recdata::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1171 i_1034 n_1035 des_1036 x_1037 = let u_1172 = des_1036 i_1034 
                                                 in
                                                   () 
 in
 let rec bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1134 = update_1171 i_1042 m_1039 des_1041 (src_1040 i_1042) 
     in
       bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 n_1044 m_1045 =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 && n_1044 > 0 then
       bcopy_aux_1170 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
 let main_1169 = let arg1_1167 = rand_int () 
                 in
                 let arg2_1168 = rand_int () 
                 in
                   main_1043 arg1_1167 arg2_1168 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1200:(int -> X)) =
   let k_make_array_u_1217 (x_1203:unit) = k_make_array_1200 0 
   in
   let k_make_array_u_1206 (b_1218:bool) =
     if b_1218 then
       k_make_array_u_1217 ()
     else
       {|fail|} () k_make_array_u_1217 
   in
     if 0 <= i_1032 then
       k_make_array_u_1206 (i_1032 < n_1031)
     else
       k_make_array_u_1206 false 
 in
 let update_1171
   (i_1034:int) (n_1035:int) (des_1036:(int -> ((int -> X) -> X))) (x_1037:int) (k_update_1253:(
   unit -> X)) = des_1036 i_1034 (fun x_1256 -> k_update_1253 ()) 
 in
 let rec bcopy_aux_1170
   (m_1039:int) (src_1040:(int -> ((int -> X) -> X))) (des_1041:(int -> ((int -> X) -> X))) (i_1042:int) (k_bcopy_aux_1313:(
   unit -> X)) =
   if i_1042 >= m_1039 then
     k_bcopy_aux_1313 ()
   else
     src_1040 i_1042
       (fun x_1345 ->
          update_1171 i_1042 m_1039 des_1041 x_1345
            (fun x_1316 -> bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)) 
 in
 let main_1043 (n_1044:int) (m_1045:int) (k_main_1391:(unit -> X)) =
   let k_main_1426 (b_1456:bool) =
     if b_1456 then
       bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391
     else
       k_main_1391 () 
   in
     if n_1044 <= m_1045 then
       k_main_1426 (n_1044 > 0)
     else
       k_main_1426 false 
 in
   rand_int_cps () (fun x_1462 -> rand_int_cps () (fun x_1475 -> main_1043 x_1462 x_1475 (fun x_1459 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1504 ... --> 
  f_1508 ... --> 
  f_1509 ... --> 
  main_1043 [1/2] ... --> 
  k_main_1426 [1/2] ... --> 
  bcopy_aux_1170 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1206 [2/2] ... --> 
  fail_1511 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(211)[1]
  program:
    main_1504  | true = ((Random.int 0) f_1508)
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1313 ())
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1506 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1313
                                                          src_1040))
    f_1508 x_1462 | true = ((Random.int 0) (f_1509 x_1462))
    f_1509 x_1462 x_1475 | true = (main_1043 x_1462
                                             x_1475
                                             (f_1510 x_1462
                                                     x_1475))
    f_1510 x_1462 x_1475 x_1459 | true = end
    f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 | true = (
    update_1171
      i_1042
      m_1039
      des_1041
      x_1345
      (f_bcopy_aux_1507 i_1042
                        m_1039
                        x_1345
                        des_1041
                        k_bcopy_aux_1313
                        src_1040))
    f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 | true = (
    bcopy_aux_1170 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1313)
    f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 | true = (
    k_update_1253 ())
    fail_1511 b k | true = (fail ())
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | b_1456 = (bcopy_aux_1170
                                                               n_1044
                                                               (make_array_1030 n_1044)
                                                               (make_array_1030 m_1045)
                                                               0
                                                               k_main_1391)
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | (not b_1456) = (k_main_1391 ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | b_1218 = (
    k_make_array_u_1217 i_1032
                        n_1031
                        k_make_array_1200
                        ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | (not b_1218) = (
    fail_1511 true
              (k_make_array_u_1217 i_1032
                                   n_1031
                                   k_make_array_1200))
    k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 | true = (
    k_make_array_1200 0)
    main_1043 n_1044 m_1045 k_main_1391 | (n_1044 <= m_1045) = (k_main_1426 m_1045
                                                                    n_1044
                                                                    k_main_1391
                                                                    (n_1044 > 0))
    main_1043 n_1044 m_1045 k_main_1391 | (not (n_1044 <= m_1045)) = (
    k_main_1426 m_1045
                n_1044
                k_main_1391
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (0 <= i_1032) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (not (0 <= i_1032)) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        false)
    update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 | true = (
    des_1036 i_1034
             (f_update_1505 i_1034
                            n_1035
                            x_1037
                            k_update_1253))
    main_1504:X
    bcopy_aux_1170:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1508:int -> X
    f_1509:int -> int -> X
    f_1510:int -> int -> unit -> X
    f_bcopy_aux_1506:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1507:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1505:int -> int -> int -> (unit -> X) -> int -> X
    fail_1511:bool -> (unit -> X) -> X
    k_main_1426:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1206:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1217:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1171:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1508,f_1509,f_1510,f_bcopy_aux_1506,f_bcopy_aux_1507,f_update_1505,k_main_1426,k_make_array_u_1206,k_make_array_u_1217,main_1043,make_array_1030,update_1171
  counterexample: 0:0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1508@4:0> = var2)
     [true.nop((<f_1509@7:0> = <f_1508@4:0>) && (<f_1509@7:1> = var3))
      [true.((<main_1043@9:0> = <f_1509@7:0>) && (<main_1043@9:1> = <f_1509@7:1>))
       [(<main_1043@9:0> <= <main_1043@9:1>).
        ((<k_main_1426@12:0> = <main_1043@9:1>) &&
         ((<k_main_1426@12:1> = <main_1043@9:0>) && (<k_main_1426@12:3> = (<main_1043@9:0> > 0))))
        [<k_main_1426@12:3>.((<bcopy_aux_1170@15:0> = <k_main_1426@12:1>) && (<bcopy_aux_1170@15:3> = 0))
         [(not (<bcopy_aux_1170@15:3> >= <bcopy_aux_1170@15:0>)).(<<bcopy_aux_1170@15:1>@18:0> = <bcopy_aux_1170@15:3>)
          [true.
           ((<make_array_1030@20:0> = <k_main_1426@12:1>) && (<make_array_1030@20:1> = <<bcopy_aux_1170@15:1>@18:0>))
           [(not (0 <= <make_array_1030@20:1>)).
            ((<k_make_array_u_1206@23:0> = <make_array_1030@20:1>) &&
             ((<k_make_array_u_1206@23:1> = <make_array_1030@20:0>) && (<k_make_array_u_1206@23:3> = false)))
            [(not <k_make_array_u_1206@23:3>).(<fail_1511@26:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(212)[2]
    horn clauses:
      P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
      
      P[<k_make_array_u_1206@23:3>](<k_make_array_u_1206@23:0>:int,<k_make_array_u_1206@23:1>:int,false:bool),
      <fail_1511@26:0> |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
      
      P[<make_array_1030@20:1>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
      ((0 > <k_make_array_u_1206@23:0>) && (not <k_make_array_u_1206@23:3>))
      |- P[<k_make_array_u_1206@23:3>](<k_make_array_u_1206@23:0>:int,
                                       <k_make_array_u_1206@23:1>:int,
                                       <k_make_array_u_1206@23:3>:bool)
      
      P[<k_main_1426@12:3>](<k_main_1426@12:0>:int,<make_array_1030@20:0>:int,true:bool),
      P[<<bcopy_aux_1170@15:1>@18:0>](<make_array_1030@20:0>:int,<make_array_1030@20:1>:int)|- P[<make_array_1030@20:1>](
      <make_array_1030@20:0>:int,<make_array_1030@20:1>:int)
      
      P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
      (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
      |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int)
      
      P[<k_main_1426@12:3>](<k_main_1426@12:0>:int,<bcopy_aux_1170@15:0>:int,true:bool), (
      <bcopy_aux_1170@15:3> = 0) |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,
                                                             <bcopy_aux_1170@15:3>:int)
      
      P[<main_1043@9:1>](<k_main_1426@12:1>:int,<k_main_1426@12:0>:int),
      ((<k_main_1426@12:1> <= <k_main_1426@12:0>) && (<k_main_1426@12:3> = (<k_main_1426@12:1> > 0)))
      |- P[<k_main_1426@12:3>](<k_main_1426@12:0>:int,<k_main_1426@12:1>:int,
                               <k_main_1426@12:3>:bool)
      
      P[<f_1509@7:1>](<main_1043@9:0>:int,<main_1043@9:1>:int)|- P[<main_1043@9:1>](
      <main_1043@9:0>:int,<main_1043@9:1>:int)
      
      P[<f_1508@4:0>](<f_1509@7:0>:int)|- P[<f_1509@7:1>](<f_1509@7:0>:int,
                                                          <f_1509@7:1>:int)
      
      |- P[<f_1508@4:0>](<f_1508@4:0>:int)
    call trees:
      <main_1504@1>
        <f_1508@4>
          <f_1509@7>
            <main_1043@9>
              <k_main_1426@12>
                <bcopy_aux_1170@15>
                </<bcopy_aux_1170@15:1>@18>
                <make_array_1030@20>
                  <k_make_array_u_1206@23>
                    <fail_1511@26>
    inlined horn clauses:
      P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
      
      P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
      ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && <fail_1511@26:0>))
      |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
      
      P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
      (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
      |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int)
      
       ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
      |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
    begin ParamSubstInfer.infer(1636)[3]
      
    end ParamSubstInfer.infer(1636)[3] (0.039994 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1638)[3]
      
    end RefTypeInfer.elim_coeffs(1638)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1834)[3]
      Horn clauses:
        P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
        
        P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
        ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && <fail_1511@26:0>))
        |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
        
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
        (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
        |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                           <<bcopy_aux_1170@15:1>@18:0>:int)
        
         ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) =
        ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int) =
        ((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
         ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
        P[<fail_1511@26:0>](<fail_1511@26:0>:bool) = false
      upper bounds:
        P[<fail_1511@26:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(3015)[4]
        output:
          [<fail_1511@26:0>]
      end GenHcSolver.classify_pids(3015)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(3018)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(3019)[5]
          begin InterpProver.interpolate_fresh(3020)[6]
            begin InterpProver.interpolate_log(3021)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(3022)[8]
                begin InterpProver.interpolate_simplify(3023)[9]
                  begin InterpProver.interpolate_quick(3036)[10]
                    
                  end InterpProver.interpolate_quick(3036)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(3040)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(3040)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3023)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3022)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(3021)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(3020)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(3019)[5] (0.000000 sec.)
        output:
          P[<fail_1511@26:0>](<fail_1511@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(3018)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
        ((<k_make_array_u_1206@23:1> > 0) && (0 > <k_make_array_u_1206@23:0>)) |- bot
        
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
        (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
        |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                           <<bcopy_aux_1170@15:1>@18:0>:int)
        
         ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) =
        ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int) =
        ((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
         ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
      upper bounds:
        P[<<bcopy_aux_1170@15:1>@18:0>](var6:int,var7:int) = ((var6 <= 0) || (0 <= var7))
      begin GenHcSolver.classify_pids(4538)[4]
        output:
          [<<bcopy_aux_1170@15:1>@18:0>]
      end GenHcSolver.classify_pids(4538)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
          ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
      nub:(not ((<bcopy_aux_1170@15:0> <= 0) || (0 <= <<bcopy_aux_1170@15:1>@18:0>)))
      begin ApronInterface.convex_hull_interpolate(4541)[4]
        lb:((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
            ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
        nub:(not ((<bcopy_aux_1170@15:0> <= 0) || (0 <= <<bcopy_aux_1170@15:1>@18:0>)))
        lb':((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
             ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
        nub':(not ((<bcopy_aux_1170@15:0> <= 0) || (0 <= <<bcopy_aux_1170@15:1>@18:0>)))
        begin InterpProver.interpolate(4542)[5]
          begin InterpProver.interpolate_fresh(4543)[6]
            begin InterpProver.interpolate_log(4544)[7]
              input1: ((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
                       ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
              input2: (not ((<bcopy_aux_1170@15:0> <= 0) || (0 <= <<bcopy_aux_1170@15:1>@18:0>)))
              begin InterpProver.interpolate_check(4545)[8]
                begin InterpProver.interpolate_simplify(4546)[9]
                  begin InterpProver.interpolate_quick(4621)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4630)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4631)[12]
                        begin CsisatInterface.interpolate_csisat_log(4632)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_15_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0) <= v_sep_bcopy_aux_1170_sep_15_sep_0)
                          input2: (1 <= v_sep_bcopy_aux_1170_sep_15_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(4633)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4633)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4632)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4631)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4630)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4621)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(4546)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4545)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_aux_1170@15:1>@18:0>)
            end InterpProver.interpolate_log(4544)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(4543)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(4542)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int) =
          (0 <= <<bcopy_aux_1170@15:1>@18:0>)
      end ApronInterface.convex_hull_interpolate(4541)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
        ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (0 > <<bcopy_aux_1170@15:1>@18:0>)) |- bot
        
         ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) =
        ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
      upper bounds:
        P[<bcopy_aux_1170@15:3>](var8:int,var9:int) = ((var9 >= var8) || (0 <= var9))
      begin GenHcSolver.classify_pids(5560)[4]
        output:
          [<bcopy_aux_1170@15:3>]
      end GenHcSolver.classify_pids(5560)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
      nub:(not ((<bcopy_aux_1170@15:3> >= <bcopy_aux_1170@15:0>) || (0 <= <bcopy_aux_1170@15:3>)))
      begin ApronInterface.convex_hull_interpolate(5563)[4]
        lb:((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        nub:(not ((<bcopy_aux_1170@15:3> >= <bcopy_aux_1170@15:0>) || (0 <= <bcopy_aux_1170@15:3>)))
        lb':((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        nub':(not ((<bcopy_aux_1170@15:3> >= <bcopy_aux_1170@15:0>) || (0 <= <bcopy_aux_1170@15:3>)))
        begin InterpProver.interpolate(5564)[5]
          begin InterpProver.interpolate_fresh(5565)[6]
            begin InterpProver.interpolate_log(5566)[7]
              input1: ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
              input2: (not ((<bcopy_aux_1170@15:3> >= <bcopy_aux_1170@15:0>) || (0 <= <bcopy_aux_1170@15:3>)))
              begin InterpProver.interpolate_check(5567)[8]
                begin InterpProver.interpolate_simplify(5568)[9]
                  begin InterpProver.interpolate_quick(5619)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5628)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5629)[12]
                        begin CsisatInterface.interpolate_csisat_log(5630)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_15_sep_3 & 1 <= v_sep_bcopy_aux_1170_sep_15_sep_0)
                          input2: ((1 + v_sep_bcopy_aux_1170_sep_15_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1170_sep_15_sep_3) <= v_sep_bcopy_aux_1170_sep_15_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(5631)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5631)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1170_sep_15_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5630)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1170_sep_15_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1170_sep_15_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5629)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5628)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5619)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5568)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(5567)[8] (0.000999 sec.)
              output: (0 <= <bcopy_aux_1170@15:3>)
            end InterpProver.interpolate_log(5566)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(5565)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(5564)[5] (0.000999 sec.)
        output:
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) = (0 <= <bcopy_aux_1170@15:3>)
      end ApronInterface.convex_hull_interpolate(5563)[4] (0.001999 sec.)
      begin HcSolver.check_validity(5784)[4]
        input:
          P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
          ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && <fail_1511@26:0>))
          |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
          
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
          (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
          |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                             <<bcopy_aux_1170@15:1>@18:0>:int)
          
           ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
          |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(5784)[4] (0.002000 sec.)
      solution:
        P[<fail_1511@26:0>](<fail_1511@26:0>:bool) = false
        P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int) =
        (0 <= <<bcopy_aux_1170@15:1>@18:0>)
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) = (0 <= <bcopy_aux_1170@15:3>)
    end GenHcSolver.solve(1834)[3] (0.030995 sec.)
    begin GenHcSolver.solve(6064)[3]
      Horn clauses:
        P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
        
        P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
        ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && <fail_1511@26:0>))
        |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
        
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
        (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
        |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                           <<bcopy_aux_1170@15:1>@18:0>:int)
        
         ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) =
        ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int) =
        ((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
         ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
        P[<fail_1511@26:0>](<fail_1511@26:0>:bool) = false
      upper bounds:
        P[<fail_1511@26:0>](var11:bool) = true
      begin GenHcSolver.classify_pids(7245)[4]
        output:
          [<fail_1511@26:0>]
      end GenHcSolver.classify_pids(7245)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(7248)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(7251)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7251)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(7256)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(7256)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(7259)[5]
          begin InterpProver.interpolate_fresh(7260)[6]
            begin InterpProver.interpolate_log(7261)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(7262)[8]
                begin InterpProver.interpolate_simplify(7263)[9]
                  begin InterpProver.interpolate_quick(7278)[10]
                    
                  end InterpProver.interpolate_quick(7278)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(7282)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(7282)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(7263)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(7262)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(7261)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(7260)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(7259)[5] (0.000000 sec.)
        output:
          P[<fail_1511@26:0>](<fail_1511@26:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(7248)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
        ((<k_make_array_u_1206@23:1> > 0) && (0 > <k_make_array_u_1206@23:0>)) |- bot
        
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
        (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
        |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                           <<bcopy_aux_1170@15:1>@18:0>:int)
        
         ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) =
        ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int) =
        ((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
         ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
      upper bounds:
        P[<<bcopy_aux_1170@15:1>@18:0>](var12:int,var13:int) = ((var12 <= 0) || (0 <= var13))
      begin GenHcSolver.classify_pids(8787)[4]
        output:
          [<<bcopy_aux_1170@15:1>@18:0>]
      end GenHcSolver.classify_pids(8787)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
          ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
      nub:(not ((<bcopy_aux_1170@15:0> <= 0) || (0 <= <<bcopy_aux_1170@15:1>@18:0>)))
      begin ApronInterface.convex_hull_interpolate(8790)[4]
        lb:((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
            ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
        nub:(not ((<bcopy_aux_1170@15:0> <= 0) || (0 <= <<bcopy_aux_1170@15:1>@18:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(8815)[5]
          ts: ((<<bcopy_aux_1170@15:1>@18:0> = 0) &&
               ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (<bcopy_aux_1170@15:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(8815)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8833)[5]
          ts: ((<bcopy_aux_1170@15:0> > 0) && (0 > <<bcopy_aux_1170@15:1>@18:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(8833)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1170@15:1>@18:0> = 0) && ((-1 + <bcopy_aux_1170@15:0>) >= 0))
        nub':(((-1 + (-1 * <<bcopy_aux_1170@15:1>@18:0>)) >= 0) && ((-1 + <bcopy_aux_1170@15:0>) >= 0))
        begin InterpProver.interpolate(8838)[5]
          begin InterpProver.interpolate_fresh(8839)[6]
            begin InterpProver.interpolate_log(8840)[7]
              input1: ((<<bcopy_aux_1170@15:1>@18:0> = 0) && ((-1 + <bcopy_aux_1170@15:0>) >= 0))
              input2: (((-1 + (-1 * <<bcopy_aux_1170@15:1>@18:0>)) >= 0) && ((-1 + <bcopy_aux_1170@15:0>) >= 0))
              begin InterpProver.interpolate_check(8841)[8]
                begin InterpProver.interpolate_simplify(8842)[9]
                  begin InterpProver.interpolate_quick(8905)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(8914)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(8915)[12]
                        begin CsisatInterface.interpolate_csisat_log(8916)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_15_sep_0)
                          input2: (1 <= v_sep_bcopy_aux_1170_sep_15_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(8917)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(8917)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(8916)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(8915)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(8914)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(8905)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(8842)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(8841)[8] (0.001000 sec.)
              output: (0 <= <<bcopy_aux_1170@15:1>@18:0>)
            end InterpProver.interpolate_log(8840)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(8839)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(8838)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int) =
          (0 <= <<bcopy_aux_1170@15:1>@18:0>)
      end ApronInterface.convex_hull_interpolate(8790)[4] (0.001999 sec.)
      Horn clauses:
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
        ((<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>) && (0 > <<bcopy_aux_1170@15:1>@18:0>)) |- bot
        
         ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) =
        ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
      upper bounds:
        P[<bcopy_aux_1170@15:3>](var14:int,var15:int) = ((var15 >= var14) || (0 <= var15))
      begin GenHcSolver.classify_pids(9848)[4]
        output:
          [<bcopy_aux_1170@15:3>]
      end GenHcSolver.classify_pids(9848)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
      nub:(not ((<bcopy_aux_1170@15:3> >= <bcopy_aux_1170@15:0>) || (0 <= <bcopy_aux_1170@15:3>)))
      begin ApronInterface.convex_hull_interpolate(9851)[4]
        lb:((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
        nub:(not ((<bcopy_aux_1170@15:3> >= <bcopy_aux_1170@15:0>) || (0 <= <bcopy_aux_1170@15:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(9861)[5]
          ts: ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(9861)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(9880)[5]
          ts: ((<bcopy_aux_1170@15:3> < <bcopy_aux_1170@15:0>) && (0 > <bcopy_aux_1170@15:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(9880)[5] (0.000000 sec.)
        lb':((<bcopy_aux_1170@15:3> = 0) && ((-1 + <bcopy_aux_1170@15:0>) >= 0))
        nub':(((-1 + (-1 * <bcopy_aux_1170@15:3>)) >= 0) &&
              (((-1 + (-1 * <bcopy_aux_1170@15:3>)) + <bcopy_aux_1170@15:0>) >= 0))
        begin InterpProver.interpolate(9886)[5]
          begin InterpProver.interpolate_fresh(9887)[6]
            begin InterpProver.interpolate_log(9888)[7]
              input1: ((<bcopy_aux_1170@15:3> = 0) && ((-1 + <bcopy_aux_1170@15:0>) >= 0))
              input2: (((-1 + (-1 * <bcopy_aux_1170@15:3>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_aux_1170@15:3>)) + <bcopy_aux_1170@15:0>) >= 0))
              begin InterpProver.interpolate_check(9889)[8]
                begin InterpProver.interpolate_simplify(9890)[9]
                  begin InterpProver.interpolate_quick(9959)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(9968)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(9969)[12]
                        begin CsisatInterface.interpolate_csisat_log(9970)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_15_sep_3 & 1 <= v_sep_bcopy_aux_1170_sep_15_sep_0)
                          input2: ((1 + v_sep_bcopy_aux_1170_sep_15_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1170_sep_15_sep_3) <= v_sep_bcopy_aux_1170_sep_15_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(9971)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(9971)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1170_sep_15_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(9970)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1170_sep_15_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1170_sep_15_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(9969)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(9968)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(9959)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(9890)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(9889)[8] (0.002000 sec.)
              output: (0 <= <bcopy_aux_1170@15:3>)
            end InterpProver.interpolate_log(9888)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(9887)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(9886)[5] (0.002999 sec.)
        output:
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) = (0 <= <bcopy_aux_1170@15:3>)
      end ApronInterface.convex_hull_interpolate(9851)[4] (0.002999 sec.)
      begin HcSolver.check_validity(10128)[4]
        input:
          P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
          ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && <fail_1511@26:0>))
          |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
          
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
          (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
          |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                             <<bcopy_aux_1170@15:1>@18:0>:int)
          
           ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
          |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(10128)[4] (0.001000 sec.)
      solution:
        P[<fail_1511@26:0>](<fail_1511@26:0>:bool) = false
        P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int) =
        (0 <= <<bcopy_aux_1170@15:1>@18:0>)
        P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int) = (0 <= <bcopy_aux_1170@15:3>)
    end GenHcSolver.solve(6064)[3] (0.025996 sec.)
    begin YhornInterface.solve(10408)[3]
      begin HcSolver.solve_ub(10409)[4]
        encoded:
          P[<fail_1511@26:0>](<fail_1511@26:0>:int)|- bot
          
          P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
          ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && (<fail_1511@26:0> = 1)))
          |- P[<fail_1511@26:0>](<fail_1511@26:0>:int)
          
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
          (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
          |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                             <<bcopy_aux_1170@15:1>@18:0>:int)
          
           ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
          |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
        input to Yhorn:
          P[<fail_1511@26:0>](<fail_1511@26:0>:int)|- bot
          
          P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
          ((<k_make_array_u_1206@23:1> > 0) && ((0 > <k_make_array_u_1206@23:0>) && (<fail_1511@26:0> = 1)))
          |- P[<fail_1511@26:0>](<fail_1511@26:0>:int)
          
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
          (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
          |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                             <<bcopy_aux_1170@15:1>@18:0>:int)
          
           ((<bcopy_aux_1170@15:0> > 0) && (<bcopy_aux_1170@15:3> = 0))
          |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1511_sep_26_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0($9,$8)) -> v_sep_fail_1511_sep_26_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1170_sep_15_sep_3($11,$10)) -> v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_bcopy_aux_1170_sep_15_sep_3($11,$12).


v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0: X
v_sep_bcopy_aux_1170_sep_15_sep_3: X
v_sep_fail_1511_sep_26_sep_0: X
....
v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0: X
v_sep_bcopy_aux_1170_sep_15_sep_3: X
v_sep_fail_1511_sep_26_sep_0: X
...
v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0: X
v_sep_bcopy_aux_1170_sep_15_sep_3: X
v_sep_fail_1511_sep_26_sep_0: X
....
v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0: X
v_sep_bcopy_aux_1170_sep_15_sep_3: X
v_sep_fail_1511_sep_26_sep_0: X
....(0=0) & (v_sep_fail_1511_sep_26_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0) & ($9>0)) & (v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0($9,$8)) -> v_sep_fail_1511_sep_26_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1170_sep_15_sep_3($11,$10)) -> v_sep_bcopy_aux_1170_sep_15_sep_1_sep_18_sep_0($11,$10).
($12=0) & ($11>0) -> v_sep_bcopy_aux_1170_sep_15_sep_3($11,$12).

        solution:
          P[<<bcopy_aux_1170@15:1>@18:0>]($16:int,$18:int) = (0 <= $18)
          P[<bcopy_aux_1170@15:3>]($21:int,$23:int) = (0 <= $23)
          P[<fail_1511@26:0>]($13:bool) = false
        
      end HcSolver.solve_ub(10409)[4] (0.014998 sec.)
      begin HcSolver.check_validity(10543)[4]
        input:
          P[<fail_1511@26:0>](<fail_1511@26:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@15:1>@18:0>](<k_make_array_u_1206@23:1>:int,<k_make_array_u_1206@23:0>:int),
          ((0 > <k_make_array_u_1206@23:0>) && ((<k_make_array_u_1206@23:1> > 0) && <fail_1511@26:0>))
          |- P[<fail_1511@26:0>](<fail_1511@26:0>:bool)
          
          P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<<bcopy_aux_1170@15:1>@18:0>:int),
          (<<bcopy_aux_1170@15:1>@18:0> < <bcopy_aux_1170@15:0>)
          |- P[<<bcopy_aux_1170@15:1>@18:0>](<bcopy_aux_1170@15:0>:int,
                                             <<bcopy_aux_1170@15:1>@18:0>:int)
          
           ((<bcopy_aux_1170@15:3> = 0) && (<bcopy_aux_1170@15:0> > 0))
          |- P[<bcopy_aux_1170@15:3>](<bcopy_aux_1170@15:0>:int,<bcopy_aux_1170@15:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(10543)[4] (0.006999 sec.)
      solution:
        P[<<bcopy_aux_1170@15:1>@18:0>]($16:int,$18:int) = (0 <= $18)
        P[<bcopy_aux_1170@15:3>]($21:int,$23:int) = (0 <= $23)
        P[<fail_1511@26:0>]($13:bool) = false
    end YhornInterface.solve(10408)[3] (0.021997 sec.)
    
  end RefTypeInfer.infer_etrs(212)[2] (0.127981 sec.)
  refinement types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1510: var37:int -> var36:int -> var35:unit -> X
    f_bcopy_aux_1506: var51:int ->
                      var50:int ->
                      (var49:int -> (var48:int -> X) -> X) ->
                      (var45:unit -> X) -> (var43:int -> (var42:int -> X) -> X) -> var39:int -> X
    f_bcopy_aux_1507: var66:int ->
                      var65:int ->
                      var64:int ->
                      (var63:int -> (var62:int -> X) -> X) ->
                      (var59:unit -> X) -> (var57:int -> (var56:int -> X) -> X) -> var53:unit -> X
    f_update_1505: var73:int -> var72:int -> var71:int -> (var70:unit -> X) -> var68:int -> X
    k_make_array_u_1217: var79:int -> var78:int -> (var77:int -> X) -> var75:unit -> X
    update_1171: var89:int -> var88:int -> (var87:int -> (var86:int -> X) -> X) -> var83:int -> (var82:unit -> X) -> X
  abstraction types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int[v10 -> (
                                                              0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:bool -> (v2:unit -> X) -> X
    f_1510: var37:int -> var36:int -> var35:unit -> X
    f_bcopy_aux_1506: var51:int ->
                      var50:int ->
                      (var49:int -> (var48:int -> X) -> X) ->
                      (var45:unit -> X) -> (var43:int -> (var42:int -> X) -> X) -> var39:int -> X
    f_bcopy_aux_1507: var66:int ->
                      var65:int ->
                      var64:int ->
                      (var63:int -> (var62:int -> X) -> X) ->
                      (var59:unit -> X) -> (var57:int -> (var56:int -> X) -> X) -> var53:unit -> X
    f_update_1505: var73:int -> var72:int -> var71:int -> (var70:unit -> X) -> var68:int -> X
    k_make_array_u_1217: var79:int -> var78:int -> (var77:int -> X) -> var75:unit -> X
    update_1171: var89:int -> var88:int -> (var87:int -> (var86:int -> X) -> X) -> var83:int -> (var82:unit -> X) -> X
  
end AbsTypeInfer.refine(211)[1] (0.134979 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (int ->
                    (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1504 ... --> 
  f_1508 ... --> 
  f_1509 ... --> 
  main_1043 [1/2] ... --> 
  k_main_1426 [1/2] ... --> 
  bcopy_aux_1170 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1206 [2/2] ... --> 
  fail_1511 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(11242)[1]
  program:
    main_1504  | true = ((Random.int 0) f_1508)
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1313 ())
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1506 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1313
                                                          src_1040))
    f_1508 x_1462 | true = ((Random.int 0) (f_1509 x_1462))
    f_1509 x_1462 x_1475 | true = (main_1043 x_1462
                                             x_1475
                                             (f_1510 x_1462
                                                     x_1475))
    f_1510 x_1462 x_1475 x_1459 | true = end
    f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 | true = (
    update_1171
      i_1042
      m_1039
      des_1041
      x_1345
      (f_bcopy_aux_1507 i_1042
                        m_1039
                        x_1345
                        des_1041
                        k_bcopy_aux_1313
                        src_1040))
    f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 | true = (
    bcopy_aux_1170 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1313)
    f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 | true = (
    k_update_1253 ())
    fail_1511 b k | true = (fail ())
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | b_1456 = (bcopy_aux_1170
                                                               n_1044
                                                               (make_array_1030 n_1044)
                                                               (make_array_1030 m_1045)
                                                               0
                                                               k_main_1391)
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | (not b_1456) = (k_main_1391 ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | b_1218 = (
    k_make_array_u_1217 i_1032
                        n_1031
                        k_make_array_1200
                        ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | (not b_1218) = (
    fail_1511 true
              (k_make_array_u_1217 i_1032
                                   n_1031
                                   k_make_array_1200))
    k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 | true = (
    k_make_array_1200 0)
    main_1043 n_1044 m_1045 k_main_1391 | (n_1044 <= m_1045) = (k_main_1426 m_1045
                                                                    n_1044
                                                                    k_main_1391
                                                                    (n_1044 > 0))
    main_1043 n_1044 m_1045 k_main_1391 | (not (n_1044 <= m_1045)) = (
    k_main_1426 m_1045
                n_1044
                k_main_1391
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (0 <= i_1032) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (not (0 <= i_1032)) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        false)
    update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 | true = (
    des_1036 i_1034
             (f_update_1505 i_1034
                            n_1035
                            x_1037
                            k_update_1253))
    main_1504:X
    bcopy_aux_1170:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1508:int -> X
    f_1509:int -> int -> X
    f_1510:int -> int -> unit -> X
    f_bcopy_aux_1506:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1507:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1505:int -> int -> int -> (unit -> X) -> int -> X
    fail_1511:bool -> (unit -> X) -> X
    k_main_1426:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1206:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1217:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1171:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1508,f_1509,f_1510,f_bcopy_aux_1506,f_bcopy_aux_1507,f_update_1505,k_main_1426,k_make_array_u_1206,k_make_array_u_1217,main_1043,make_array_1030,update_1171
  counterexample: 0:0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1508@32:0> = var90)
     [true.nop((<f_1509@35:0> = <f_1508@32:0>) && (<f_1509@35:1> = var91))
      [true.((<main_1043@37:0> = <f_1509@35:0>) && (<main_1043@37:1> = <f_1509@35:1>))
       [(<main_1043@37:0> <= <main_1043@37:1>).
        ((<k_main_1426@40:0> = <main_1043@37:1>) &&
         ((<k_main_1426@40:1> = <main_1043@37:0>) && (<k_main_1426@40:3> = (<main_1043@37:0> > 0))))
        [<k_main_1426@40:3>.((<bcopy_aux_1170@43:0> = <k_main_1426@40:1>) && (<bcopy_aux_1170@43:3> = 0))
         [(not (<bcopy_aux_1170@43:3> >= <bcopy_aux_1170@43:0>)).(<<bcopy_aux_1170@43:1>@46:0> = <bcopy_aux_1170@43:3>)
          [true.
           ((<make_array_1030@48:0> = <k_main_1426@40:1>) && (<make_array_1030@48:1> = <<bcopy_aux_1170@43:1>@46:0>))
           [(0 <= <make_array_1030@48:1>).
            ((<k_make_array_u_1206@51:0> = <make_array_1030@48:1>) &&
             ((<k_make_array_u_1206@51:1> = <make_array_1030@48:0>) &&
              (<k_make_array_u_1206@51:3> = (<make_array_1030@48:1> < <make_array_1030@48:0>))))
            [(not <k_make_array_u_1206@51:3>).(<fail_1511@54:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(11243)[2]
    horn clauses:
      P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
      
      P[<k_make_array_u_1206@51:3>](<k_make_array_u_1206@51:0>:int,<k_make_array_u_1206@51:1>:int,false:bool),
      <fail_1511@54:0> |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
      
      P[<make_array_1030@48:1>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
      ((0 <= <k_make_array_u_1206@51:0>) &&
       (<k_make_array_u_1206@51:3> = (<k_make_array_u_1206@51:0> < <k_make_array_u_1206@51:1>)))
      |- P[<k_make_array_u_1206@51:3>](<k_make_array_u_1206@51:0>:int,
                                       <k_make_array_u_1206@51:1>:int,
                                       <k_make_array_u_1206@51:3>:bool)
      
      P[<k_main_1426@40:3>](<k_main_1426@40:0>:int,<make_array_1030@48:0>:int,true:bool),
      P[<<bcopy_aux_1170@43:1>@46:0>](<make_array_1030@48:0>:int,<make_array_1030@48:1>:int)|- P[<make_array_1030@48:1>](
      <make_array_1030@48:0>:int,<make_array_1030@48:1>:int)
      
      P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
      (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
      |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int)
      
      P[<k_main_1426@40:3>](<k_main_1426@40:0>:int,<bcopy_aux_1170@43:0>:int,true:bool), (
      <bcopy_aux_1170@43:3> = 0) |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,
                                                             <bcopy_aux_1170@43:3>:int)
      
      P[<main_1043@37:1>](<k_main_1426@40:1>:int,<k_main_1426@40:0>:int),
      ((<k_main_1426@40:1> <= <k_main_1426@40:0>) && (<k_main_1426@40:3> = (<k_main_1426@40:1> > 0)))
      |- P[<k_main_1426@40:3>](<k_main_1426@40:0>:int,<k_main_1426@40:1>:int,
                               <k_main_1426@40:3>:bool)
      
      P[<f_1509@35:1>](<main_1043@37:0>:int,<main_1043@37:1>:int)|- P[<main_1043@37:1>](
      <main_1043@37:0>:int,<main_1043@37:1>:int)
      
      P[<f_1508@32:0>](<f_1509@35:0>:int)|- P[<f_1509@35:1>](<f_1509@35:0>:int,
                                                             <f_1509@35:1>:int)
      
      |- P[<f_1508@32:0>](<f_1508@32:0>:int)
    call trees:
      <main_1504@29>
        <f_1508@32>
          <f_1509@35>
            <main_1043@37>
              <k_main_1426@40>
                <bcopy_aux_1170@43>
                </<bcopy_aux_1170@43:1>@46>
                <make_array_1030@48>
                  <k_make_array_u_1206@51>
                    <fail_1511@54>
    inlined horn clauses:
      P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
      
      P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
      ((0 <= <k_make_array_u_1206@51:0>) &&
       ((<k_make_array_u_1206@51:1> > 0) &&
        ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && <fail_1511@54:0>)))
      |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
      
      P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
      (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
      |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int)
      
       ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
      |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
    begin ParamSubstInfer.infer(12926)[3]
      
    end ParamSubstInfer.infer(12926)[3] (0.084987 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(12928)[3]
      
    end RefTypeInfer.elim_coeffs(12928)[3] (0.001000 sec.)
    begin GenHcSolver.solve(13209)[3]
      Horn clauses:
        P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
        
        P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
        ((0 <= <k_make_array_u_1206@51:0>) &&
         ((<k_make_array_u_1206@51:1> > 0) &&
          ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && <fail_1511@54:0>)))
        |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
        
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
        (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
        |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                           <<bcopy_aux_1170@43:1>@46:0>:int)
        
         ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) =
        ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int) =
        ((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
         ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
        P[<fail_1511@54:0>](<fail_1511@54:0>:bool) = false
      upper bounds:
        P[<fail_1511@54:0>](var93:bool) = true
      begin GenHcSolver.classify_pids(14483)[4]
        output:
          [<fail_1511@54:0>]
      end GenHcSolver.classify_pids(14483)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(14486)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(14487)[5]
          begin InterpProver.interpolate_fresh(14488)[6]
            begin InterpProver.interpolate_log(14489)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(14490)[8]
                begin InterpProver.interpolate_simplify(14491)[9]
                  begin InterpProver.interpolate_quick(14504)[10]
                    
                  end InterpProver.interpolate_quick(14504)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(14508)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(14508)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14491)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(14490)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(14489)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(14488)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(14487)[5] (0.000000 sec.)
        output:
          P[<fail_1511@54:0>](<fail_1511@54:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(14486)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
        ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) &&
         ((<k_make_array_u_1206@51:1> > 0) && (0 <= <k_make_array_u_1206@51:0>))) |- bot
        
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
        (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
        |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                           <<bcopy_aux_1170@43:1>@46:0>:int)
        
         ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) =
        ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int) =
        ((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
         ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
      upper bounds:
        P[<<bcopy_aux_1170@43:1>@46:0>](var94:int,var95:int) = ((var95 < var94) || ((var94 <= 0) || (0 > var95)))
      begin GenHcSolver.classify_pids(16454)[4]
        output:
          [<<bcopy_aux_1170@43:1>@46:0>]
      end GenHcSolver.classify_pids(16454)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
          ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
      nub:(not
             ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) ||
              ((<bcopy_aux_1170@43:0> <= 0) || (0 > <<bcopy_aux_1170@43:1>@46:0>))))
      begin ApronInterface.convex_hull_interpolate(16457)[4]
        lb:((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
            ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
        nub:(not
               ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) ||
                ((<bcopy_aux_1170@43:0> <= 0) || (0 > <<bcopy_aux_1170@43:1>@46:0>))))
        lb':((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
             ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
        nub':(not
                ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) ||
                 ((<bcopy_aux_1170@43:0> <= 0) || (0 > <<bcopy_aux_1170@43:1>@46:0>))))
        begin InterpProver.interpolate(16458)[5]
          begin InterpProver.interpolate_fresh(16459)[6]
            begin InterpProver.interpolate_log(16460)[7]
              input1: ((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
                       ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
              input2: (not
                         ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) ||
                          ((<bcopy_aux_1170@43:0> <= 0) || (0 > <<bcopy_aux_1170@43:1>@46:0>))))
              begin InterpProver.interpolate_check(16461)[8]
                begin InterpProver.interpolate_simplify(16462)[9]
                  begin InterpProver.interpolate_quick(16565)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(16574)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(16575)[12]
                        begin CsisatInterface.interpolate_csisat_log(16576)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_43_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0) <= v_sep_bcopy_aux_1170_sep_43_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_43_sep_0 & v_sep_bcopy_aux_1170_sep_43_sep_0 <= v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(16577)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(16577)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1170_sep_43_sep_0 + 2*v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(16576)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1170_sep_43_sep_0 + 2*v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1170_sep_43_sep_0 + 2*v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(16575)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(16574)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(16565)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(16462)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(16461)[8] (0.002000 sec.)
              output: ((1 + <<bcopy_aux_1170@43:1>@46:0>) <= <bcopy_aux_1170@43:0>)
            end InterpProver.interpolate_log(16460)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(16459)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(16458)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int) =
          ((1 + <<bcopy_aux_1170@43:1>@46:0>) <= <bcopy_aux_1170@43:0>)
      end ApronInterface.convex_hull_interpolate(16457)[4] (0.002999 sec.)
      Horn clauses:
         ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) =
        ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
      upper bounds:
        P[<bcopy_aux_1170@43:3>](var96:int,var97:int) = true
      begin GenHcSolver.classify_pids(17128)[4]
        output:
          [<bcopy_aux_1170@43:3>]
      end GenHcSolver.classify_pids(17128)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(17131)[4]
        lb:((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        nub:false
        lb':((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        nub':false
        begin InterpProver.interpolate(17132)[5]
          begin InterpProver.interpolate_fresh(17133)[6]
            begin InterpProver.interpolate_log(17134)[7]
              input1: ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
              input2: false
              begin InterpProver.interpolate_check(17135)[8]
                begin InterpProver.interpolate_simplify(17136)[9]
                  begin InterpProver.interpolate_quick(17168)[10]
                    
                  end InterpProver.interpolate_quick(17168)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17136)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(17135)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(17134)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(17133)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(17132)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) = true
      end ApronInterface.convex_hull_interpolate(17131)[4] (0.000000 sec.)
      begin HcSolver.check_validity(17264)[4]
        input:
          P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
          ((0 <= <k_make_array_u_1206@51:0>) &&
           ((<k_make_array_u_1206@51:1> > 0) &&
            ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && <fail_1511@54:0>)))
          |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
          
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
          (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
          |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                             <<bcopy_aux_1170@43:1>@46:0>:int)
          
           ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
          |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17264)[4] (0.001000 sec.)
      solution:
        P[<fail_1511@54:0>](<fail_1511@54:0>:bool) = false
        P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int) =
        ((1 + <<bcopy_aux_1170@43:1>@46:0>) <= <bcopy_aux_1170@43:0>)
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) = true
    end GenHcSolver.solve(13209)[3] (0.025996 sec.)
    begin GenHcSolver.solve(17497)[3]
      Horn clauses:
        P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
        
        P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
        ((0 <= <k_make_array_u_1206@51:0>) &&
         ((<k_make_array_u_1206@51:1> > 0) &&
          ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && <fail_1511@54:0>)))
        |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
        
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
        (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
        |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                           <<bcopy_aux_1170@43:1>@46:0>:int)
        
         ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) =
        ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int) =
        ((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
         ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
        P[<fail_1511@54:0>](<fail_1511@54:0>:bool) = false
      upper bounds:
        P[<fail_1511@54:0>](var99:bool) = true
      begin GenHcSolver.classify_pids(18771)[4]
        output:
          [<fail_1511@54:0>]
      end GenHcSolver.classify_pids(18771)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(18774)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(18777)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(18777)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(18782)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(18782)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(18785)[5]
          begin InterpProver.interpolate_fresh(18786)[6]
            begin InterpProver.interpolate_log(18787)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(18788)[8]
                begin InterpProver.interpolate_simplify(18789)[9]
                  begin InterpProver.interpolate_quick(18804)[10]
                    
                  end InterpProver.interpolate_quick(18804)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(18808)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(18808)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(18789)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(18788)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(18787)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(18786)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(18785)[5] (0.001000 sec.)
        output:
          P[<fail_1511@54:0>](<fail_1511@54:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(18774)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
        ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) &&
         ((<k_make_array_u_1206@51:1> > 0) && (0 <= <k_make_array_u_1206@51:0>))) |- bot
        
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
        (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
        |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                           <<bcopy_aux_1170@43:1>@46:0>:int)
        
         ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) =
        ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int) =
        ((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
         ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
      upper bounds:
        P[<<bcopy_aux_1170@43:1>@46:0>](var100:int,var101:int) = ((var101 < var100) || ((var100 <= 0) || (0 > var101)))
      begin GenHcSolver.classify_pids(20761)[4]
        output:
          [<<bcopy_aux_1170@43:1>@46:0>]
      end GenHcSolver.classify_pids(20761)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
          ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
      nub:(not
             ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) ||
              ((<bcopy_aux_1170@43:0> <= 0) || (0 > <<bcopy_aux_1170@43:1>@46:0>))))
      begin ApronInterface.convex_hull_interpolate(20764)[4]
        lb:((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
            ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
        nub:(not
               ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) ||
                ((<bcopy_aux_1170@43:0> <= 0) || (0 > <<bcopy_aux_1170@43:1>@46:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(20789)[5]
          ts: ((<<bcopy_aux_1170@43:1>@46:0> = 0) &&
               ((<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>) && (<bcopy_aux_1170@43:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(20789)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(20821)[5]
          ts: ((<<bcopy_aux_1170@43:1>@46:0> >= <bcopy_aux_1170@43:0>) &&
               ((<bcopy_aux_1170@43:0> > 0) && (0 <= <<bcopy_aux_1170@43:1>@46:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(20821)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1170@43:1>@46:0> = 0) && ((-1 + <bcopy_aux_1170@43:0>) >= 0))
        nub':(((<<bcopy_aux_1170@43:1>@46:0> + (-1 * <bcopy_aux_1170@43:0>)) >= 0) &&
              ((-1 + <bcopy_aux_1170@43:0>) >= 0))
        begin InterpProver.interpolate(20828)[5]
          begin InterpProver.interpolate_fresh(20829)[6]
            begin InterpProver.interpolate_log(20830)[7]
              input1: ((<<bcopy_aux_1170@43:1>@46:0> = 0) && ((-1 + <bcopy_aux_1170@43:0>) >= 0))
              input2: (((<<bcopy_aux_1170@43:1>@46:0> + (-1 * <bcopy_aux_1170@43:0>)) >= 0) &&
                       ((-1 + <bcopy_aux_1170@43:0>) >= 0))
              begin InterpProver.interpolate_check(20831)[8]
                begin InterpProver.interpolate_simplify(20832)[9]
                  begin InterpProver.interpolate_quick(20895)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(20904)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(20905)[12]
                        begin CsisatInterface.interpolate_csisat_log(20906)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_43_sep_0)
                          input2: (1 <= v_sep_bcopy_aux_1170_sep_43_sep_0 & v_sep_bcopy_aux_1170_sep_43_sep_0 <= v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(20907)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(20907)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1170_sep_43_sep_0 + 2*v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(20906)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1170_sep_43_sep_0 + 2*v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1170_sep_43_sep_0 + 2*v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(20905)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(20904)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(20895)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(20832)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(20831)[8] (0.001000 sec.)
              output: ((1 + <<bcopy_aux_1170@43:1>@46:0>) <= <bcopy_aux_1170@43:0>)
            end InterpProver.interpolate_log(20830)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(20829)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(20828)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int) =
          ((1 + <<bcopy_aux_1170@43:1>@46:0>) <= <bcopy_aux_1170@43:0>)
      end ApronInterface.convex_hull_interpolate(20764)[4] (0.002000 sec.)
      Horn clauses:
         ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) =
        ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
      upper bounds:
        P[<bcopy_aux_1170@43:3>](var102:int,var103:int) = true
      begin GenHcSolver.classify_pids(21455)[4]
        output:
          [<bcopy_aux_1170@43:3>]
      end GenHcSolver.classify_pids(21455)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(21458)[4]
        lb:((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(21468)[5]
          ts: ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(21468)[5] (0.000999 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(21475)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(21475)[5] (0.000000 sec.)
        lb':((<bcopy_aux_1170@43:3> = 0) && ((-1 + <bcopy_aux_1170@43:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(21478)[5]
          begin InterpProver.interpolate_fresh(21479)[6]
            begin InterpProver.interpolate_log(21480)[7]
              input1: ((<bcopy_aux_1170@43:3> = 0) && ((-1 + <bcopy_aux_1170@43:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(21481)[8]
                begin InterpProver.interpolate_simplify(21482)[9]
                  begin InterpProver.interpolate_quick(21522)[10]
                    
                  end InterpProver.interpolate_quick(21522)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(21482)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(21481)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(21480)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(21479)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(21478)[5] (0.001000 sec.)
        output:
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) = true
      end ApronInterface.convex_hull_interpolate(21458)[4] (0.001999 sec.)
      begin HcSolver.check_validity(21620)[4]
        input:
          P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
          ((0 <= <k_make_array_u_1206@51:0>) &&
           ((<k_make_array_u_1206@51:1> > 0) &&
            ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && <fail_1511@54:0>)))
          |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
          
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
          (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
          |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                             <<bcopy_aux_1170@43:1>@46:0>:int)
          
           ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
          |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(21620)[4] (0.000000 sec.)
      solution:
        P[<fail_1511@54:0>](<fail_1511@54:0>:bool) = false
        P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int) =
        ((1 + <<bcopy_aux_1170@43:1>@46:0>) <= <bcopy_aux_1170@43:0>)
        P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int) = true
    end GenHcSolver.solve(17497)[3] (0.026996 sec.)
    begin YhornInterface.solve(21853)[3]
      begin HcSolver.solve_ub(21854)[4]
        encoded:
          P[<fail_1511@54:0>](<fail_1511@54:0>:int)|- bot
          
          P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
          ((0 <= <k_make_array_u_1206@51:0>) &&
           ((<k_make_array_u_1206@51:1> > 0) &&
            ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && (<fail_1511@54:0> = 1))))
          |- P[<fail_1511@54:0>](<fail_1511@54:0>:int)
          
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
          (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
          |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                             <<bcopy_aux_1170@43:1>@46:0>:int)
          
           ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
          |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
        input to Yhorn:
          P[<fail_1511@54:0>](<fail_1511@54:0>:int)|- bot
          
          P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
          ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) &&
           ((<k_make_array_u_1206@51:1> > 0) && ((0 <= <k_make_array_u_1206@51:0>) && (<fail_1511@54:0> = 1))))
          |- P[<fail_1511@54:0>](<fail_1511@54:0>:int)
          
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
          (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
          |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                             <<bcopy_aux_1170@43:1>@46:0>:int)
          
           ((<bcopy_aux_1170@43:0> > 0) && (<bcopy_aux_1170@43:3> = 0))
          |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1511_sep_54_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0($69,$68)) -> v_sep_fail_1511_sep_54_sep_0($67).
($70-$71<0) & (v_sep_bcopy_aux_1170_sep_43_sep_3($71,$70)) -> v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_bcopy_aux_1170_sep_43_sep_3($71,$72).


v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0: X
v_sep_bcopy_aux_1170_sep_43_sep_3: X
v_sep_fail_1511_sep_54_sep_0: X
....
v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0: X
v_sep_bcopy_aux_1170_sep_43_sep_3: X
v_sep_fail_1511_sep_54_sep_0: X
...
v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0: X
v_sep_bcopy_aux_1170_sep_43_sep_3: X
v_sep_fail_1511_sep_54_sep_0: X
....
v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0: X
v_sep_bcopy_aux_1170_sep_43_sep_3: X
v_sep_fail_1511_sep_54_sep_0: X
....(0=0) & (v_sep_fail_1511_sep_54_sep_0($67)) -> 1=0.
(($67-1=0) & (-$68<=0) & ($69>0) & ($68-$69>=0)) & (v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0($69,$68)) -> v_sep_fail_1511_sep_54_sep_0($67).
($70-$71<0) & (v_sep_bcopy_aux_1170_sep_43_sep_3($71,$70)) -> v_sep_bcopy_aux_1170_sep_43_sep_1_sep_46_sep_0($71,$70).
($72=0) & ($71>0) -> v_sep_bcopy_aux_1170_sep_43_sep_3($71,$72).

        solution:
          P[<<bcopy_aux_1170@43:1>@46:0>]($76:int,$78:int) = ((1 + $78) <= $76)
          P[<bcopy_aux_1170@43:3>]($81:int,$83:int) = ((1 + $83) <= $81)
          P[<fail_1511@54:0>]($73:bool) = false
        
      end HcSolver.solve_ub(21854)[4] (0.018997 sec.)
      begin HcSolver.check_validity(22054)[4]
        input:
          P[<fail_1511@54:0>](<fail_1511@54:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@43:1>@46:0>](<k_make_array_u_1206@51:1>:int,<k_make_array_u_1206@51:0>:int),
          ((0 <= <k_make_array_u_1206@51:0>) &&
           ((<k_make_array_u_1206@51:1> > 0) &&
            ((<k_make_array_u_1206@51:0> >= <k_make_array_u_1206@51:1>) && <fail_1511@54:0>)))
          |- P[<fail_1511@54:0>](<fail_1511@54:0>:bool)
          
          P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<<bcopy_aux_1170@43:1>@46:0>:int),
          (<<bcopy_aux_1170@43:1>@46:0> < <bcopy_aux_1170@43:0>)
          |- P[<<bcopy_aux_1170@43:1>@46:0>](<bcopy_aux_1170@43:0>:int,
                                             <<bcopy_aux_1170@43:1>@46:0>:int)
          
           ((<bcopy_aux_1170@43:3> = 0) && (<bcopy_aux_1170@43:0> > 0))
          |- P[<bcopy_aux_1170@43:3>](<bcopy_aux_1170@43:0>:int,<bcopy_aux_1170@43:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(22054)[4] (0.002000 sec.)
      solution:
        P[<<bcopy_aux_1170@43:1>@46:0>]($76:int,$78:int) = ((1 + $78) <= $76)
        P[<bcopy_aux_1170@43:3>]($81:int,$83:int) = ((1 + $83) <= $81)
        P[<fail_1511@54:0>]($73:bool) = false
    end YhornInterface.solve(21853)[3] (0.020997 sec.)
    
  end RefTypeInfer.infer_etrs(11243)[2] (0.168974 sec.)
  refinement types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1510: var125:int -> var124:int -> var123:unit -> X
    f_bcopy_aux_1506: var139:int ->
                      var138:int ->
                      (var137:int -> (var136:int -> X) -> X) ->
                      (var133:unit -> X) -> (var131:int -> (var130:int -> X) -> X) -> var127:int -> X
    f_bcopy_aux_1507: var154:int ->
                      var153:int ->
                      var152:int ->
                      (var151:int -> (var150:int -> X) -> X) ->
                      (var147:unit -> X) -> (var145:int -> (var144:int -> X) -> X) -> var141:unit -> X
    f_update_1505: var161:int -> var160:int -> var159:int -> (var158:unit -> X) -> var156:int -> X
    k_make_array_u_1217: var167:int -> var166:int -> (var165:int -> X) -> var163:unit -> X
    update_1171: var177:int ->
                 var176:int -> (var175:int -> (var174:int -> X) -> X) -> var171:int -> (var170:unit -> X) -> X
  abstraction types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:bool -> (v2:unit -> X) -> X
    f_1510: var125:int -> var124:int -> var123:unit -> X
    f_bcopy_aux_1506: var139:int ->
                      var138:int ->
                      (var137:int -> (var136:int -> X) -> X) ->
                      (var133:unit -> X) -> (var131:int -> (var130:int -> X) -> X) -> var127:int -> X
    f_bcopy_aux_1507: var154:int ->
                      var153:int ->
                      var152:int ->
                      (var151:int -> (var150:int -> X) -> X) ->
                      (var147:unit -> X) -> (var145:int -> (var144:int -> X) -> X) -> var141:unit -> X
    f_update_1505: var161:int -> var160:int -> var159:int -> (var158:unit -> X) -> var156:int -> X
    k_make_array_u_1217: var167:int -> var166:int -> (var165:int -> X) -> var163:unit -> X
    update_1171: var177:int ->
                 var176:int -> (var175:int -> (var174:int -> X) -> X) -> var171:int -> (var170:unit -> X) -> X
  
end AbsTypeInfer.refine(11242)[1] (0.176973 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1504 ... --> 
  f_1508 ... --> 
  f_1509 ... --> 
  main_1043 [1/2] ... --> 
  k_main_1426 [1/2] ... --> 
  bcopy_aux_1170 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1206 [1/2] ... --> 
  k_make_array_u_1217 ... --> 
  f_bcopy_aux_1506 ... --> 
  update_1171 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1206 [2/2] ... --> 
  fail_1511 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(23046)[1]
  program:
    main_1504  | true = ((Random.int 0) f_1508)
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1313 ())
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1506 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1313
                                                          src_1040))
    f_1508 x_1462 | true = ((Random.int 0) (f_1509 x_1462))
    f_1509 x_1462 x_1475 | true = (main_1043 x_1462
                                             x_1475
                                             (f_1510 x_1462
                                                     x_1475))
    f_1510 x_1462 x_1475 x_1459 | true = end
    f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 | true = (
    update_1171
      i_1042
      m_1039
      des_1041
      x_1345
      (f_bcopy_aux_1507 i_1042
                        m_1039
                        x_1345
                        des_1041
                        k_bcopy_aux_1313
                        src_1040))
    f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 | true = (
    bcopy_aux_1170 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1313)
    f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 | true = (
    k_update_1253 ())
    fail_1511 b k | true = (fail ())
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | b_1456 = (bcopy_aux_1170
                                                               n_1044
                                                               (make_array_1030 n_1044)
                                                               (make_array_1030 m_1045)
                                                               0
                                                               k_main_1391)
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | (not b_1456) = (k_main_1391 ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | b_1218 = (
    k_make_array_u_1217 i_1032
                        n_1031
                        k_make_array_1200
                        ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | (not b_1218) = (
    fail_1511 true
              (k_make_array_u_1217 i_1032
                                   n_1031
                                   k_make_array_1200))
    k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 | true = (
    k_make_array_1200 0)
    main_1043 n_1044 m_1045 k_main_1391 | (n_1044 <= m_1045) = (k_main_1426 m_1045
                                                                    n_1044
                                                                    k_main_1391
                                                                    (n_1044 > 0))
    main_1043 n_1044 m_1045 k_main_1391 | (not (n_1044 <= m_1045)) = (
    k_main_1426 m_1045
                n_1044
                k_main_1391
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (0 <= i_1032) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (not (0 <= i_1032)) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        false)
    update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 | true = (
    des_1036 i_1034
             (f_update_1505 i_1034
                            n_1035
                            x_1037
                            k_update_1253))
    main_1504:X
    bcopy_aux_1170:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1508:int -> X
    f_1509:int -> int -> X
    f_1510:int -> int -> unit -> X
    f_bcopy_aux_1506:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1507:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1505:int -> int -> int -> (unit -> X) -> int -> X
    fail_1511:bool -> (unit -> X) -> X
    k_main_1426:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1206:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1217:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1171:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1508,f_1509,f_1510,f_bcopy_aux_1506,f_bcopy_aux_1507,f_update_1505,k_main_1426,k_make_array_u_1206,k_make_array_u_1217,main_1043,make_array_1030,update_1171
  counterexample: 0:0:0:0:0:1:0:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1508@60:0> = var178)
     [true.nop((<f_1509@63:0> = <f_1508@60:0>) && (<f_1509@63:1> = var179))
      [true.((<main_1043@65:0> = <f_1509@63:0>) && (<main_1043@65:1> = <f_1509@63:1>))
       [(<main_1043@65:0> <= <main_1043@65:1>).
        ((<k_main_1426@68:0> = <main_1043@65:1>) &&
         ((<k_main_1426@68:1> = <main_1043@65:0>) && (<k_main_1426@68:3> = (<main_1043@65:0> > 0))))
        [<k_main_1426@68:3>.((<bcopy_aux_1170@71:0> = <k_main_1426@68:1>) && (<bcopy_aux_1170@71:3> = 0))
         [(not (<bcopy_aux_1170@71:3> >= <bcopy_aux_1170@71:0>)).(<<bcopy_aux_1170@71:1>@74:0> = <bcopy_aux_1170@71:3>)
          [true.
           ((<make_array_1030@76:0> = <k_main_1426@68:1>) && (<make_array_1030@76:1> = <<bcopy_aux_1170@71:1>@74:0>))
           [(0 <= <make_array_1030@76:1>).
            ((<k_make_array_u_1206@79:0> = <make_array_1030@76:1>) &&
             ((<k_make_array_u_1206@79:1> = <make_array_1030@76:0>) &&
              (<k_make_array_u_1206@79:3> = (<make_array_1030@76:1> < <make_array_1030@76:0>))))
            [<k_make_array_u_1206@79:3>.
             ((<k_make_array_u_1217@82:0> = <k_make_array_u_1206@79:0>) &&
              ((<k_make_array_u_1217@82:1> = <k_make_array_u_1206@79:1>) && (<k_make_array_u_1217@82:3> = ())))
             [true.(<<k_make_array_u_1217@82:2>@84:0> = 0)
              [true.(<<k_make_array_u_1206@79:2>@86:0> = <<k_make_array_u_1217@82:2>@84:0>)
               [true.(<<make_array_1030@76:2>@88:0> = <<k_make_array_u_1206@79:2>@86:0>)
                [true.(<<<bcopy_aux_1170@71:1>@74:1>@90:0> = <<make_array_1030@76:2>@88:0>)
                 [true.
                  ((<f_bcopy_aux_1506@92:0> = <bcopy_aux_1170@71:3>) &&
                   ((<f_bcopy_aux_1506@92:1> = <bcopy_aux_1170@71:0>) &&
                    (<f_bcopy_aux_1506@92:5> = <<<bcopy_aux_1170@71:1>@74:1>@90:0>)))
                  [true.
                   ((<update_1171@94:0> = <f_bcopy_aux_1506@92:0>) &&
                    ((<update_1171@94:1> = <f_bcopy_aux_1506@92:1>) && (<update_1171@94:3> = <f_bcopy_aux_1506@92:5>)))
                   [true.(<<update_1171@94:2>@96:0> = <update_1171@94:0>)
                    [true.(<<f_bcopy_aux_1506@92:2>@98:0> = <<update_1171@94:2>@96:0>)
                     [true.(<<bcopy_aux_1170@71:2>@100:0> = <<f_bcopy_aux_1506@92:2>@98:0>)
                      [true.
                       ((<make_array_1030@102:0> = <k_main_1426@68:0>) &&
                        (<make_array_1030@102:1> = <<bcopy_aux_1170@71:2>@100:0>))
                       [(not (0 <= <make_array_1030@102:1>)).
                        ((<k_make_array_u_1206@105:0> = <make_array_1030@102:1>) &&
                         ((<k_make_array_u_1206@105:1> = <make_array_1030@102:0>) &&
                          (<k_make_array_u_1206@105:3> = false)))
                        [(not <k_make_array_u_1206@105:3>).(<fail_1511@108:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(23047)[2]
    horn clauses:
      P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
      
      P[<k_make_array_u_1206@105:3>](<k_make_array_u_1206@105:0>:int,<k_make_array_u_1206@105:1>:int,false:bool),
      <fail_1511@108:0> |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
      
      P[<make_array_1030@102:1>](<k_make_array_u_1206@105:1>:int,<k_make_array_u_1206@105:0>:int),
      ((0 > <k_make_array_u_1206@105:0>) && (not <k_make_array_u_1206@105:3>))
      |- P[<k_make_array_u_1206@105:3>](<k_make_array_u_1206@105:0>:int,
                                        <k_make_array_u_1206@105:1>:int,
                                        <k_make_array_u_1206@105:3>:bool)
      
      P[<k_main_1426@68:3>](<make_array_1030@102:0>:int,<bcopy_aux_1170@71:0>:int,true:bool),
      P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<make_array_1030@102:1>:int)|- P[<make_array_1030@102:1>](
      <make_array_1030@102:0>:int,<make_array_1030@102:1>:int)
      
      P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
      P[<<f_bcopy_aux_1506@92:2>@98:0>](<<bcopy_aux_1170@71:1>@74:0>:int,<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
      (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
      |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int)
      
      P[<f_bcopy_aux_1506@92:5>](<f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:1>:int,<update_1171@94:3>:int),
      P[<<update_1171@94:2>@96:0>](<f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:1>:int,<<f_bcopy_aux_1506@92:2>@98:0>:int)|- P[<<f_bcopy_aux_1506@92:2>@98:0>](
      <f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:1>:int,<<f_bcopy_aux_1506@92:2>@98:0>:int)
      
      P[<update_1171@94:3>](<update_1171@94:0>:int,<update_1171@94:1>:int,<update_1171@94:3>:int),
      (<<update_1171@94:2>@96:0> = <update_1171@94:0>)
      |- P[<<update_1171@94:2>@96:0>](<update_1171@94:0>:int,<update_1171@94:1>:int,
                                      <<update_1171@94:2>@96:0>:int)
      
      P[<f_bcopy_aux_1506@92:5>](<update_1171@94:0>:int,<update_1171@94:1>:int,<update_1171@94:3>:int)|- P[<update_1171@94:3>](
      <update_1171@94:0>:int,<update_1171@94:1>:int,<update_1171@94:3>:int)
      
      P[<bcopy_aux_1170@71:3>](<f_bcopy_aux_1506@92:1>:int,<f_bcopy_aux_1506@92:0>:int),
      P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<f_bcopy_aux_1506@92:1>:int,<f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:5>:int),
      (<f_bcopy_aux_1506@92:0> < <f_bcopy_aux_1506@92:1>)
      |- P[<f_bcopy_aux_1506@92:5>](<f_bcopy_aux_1506@92:0>:int,<f_bcopy_aux_1506@92:1>:int,
                                    <f_bcopy_aux_1506@92:5>:int)
      
      P[<k_main_1426@68:3>](<k_main_1426@68:0>:int,<bcopy_aux_1170@71:0>:int,true:bool),
      P[<<make_array_1030@76:2>@88:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)|- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](
      <bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
      
      P[<make_array_1030@76:1>](<make_array_1030@76:0>:int,<make_array_1030@76:1>:int),
      P[<<k_make_array_u_1206@79:2>@86:0>](<make_array_1030@76:1>:int,<make_array_1030@76:0>:int,<<make_array_1030@76:2>@88:0>:int),
      (0 <= <make_array_1030@76:1>)
      |- P[<<make_array_1030@76:2>@88:0>](<make_array_1030@76:0>:int,
                                          <make_array_1030@76:1>:int,
                                          <<make_array_1030@76:2>@88:0>:int)
      
      P[<k_make_array_u_1206@79:3>](<k_make_array_u_1206@79:0>:int,<k_make_array_u_1206@79:1>:int,true:bool),
      P[<<k_make_array_u_1217@82:2>@84:0>](<k_make_array_u_1206@79:0>:int,<k_make_array_u_1206@79:1>:int,<<k_make_array_u_1206@79:2>@86:0>:int)|- P[<<k_make_array_u_1206@79:2>@86:0>](
      <k_make_array_u_1206@79:0>:int,<k_make_array_u_1206@79:1>:int,<<k_make_array_u_1206@79:2>@86:0>:int)
      
      P[<k_make_array_u_1217@82:3>](<k_make_array_u_1217@82:0>:int,<k_make_array_u_1217@82:1>:int,<k_make_array_u_1217@82:3>:unit),
      (<<k_make_array_u_1217@82:2>@84:0> = 0)
      |- P[<<k_make_array_u_1217@82:2>@84:0>](<k_make_array_u_1217@82:0>:int,
                                              <k_make_array_u_1217@82:1>:int,
                                              <<k_make_array_u_1217@82:2>@84:0>:int)
      
      P[<k_make_array_u_1206@79:3>](<k_make_array_u_1217@82:0>:int,<k_make_array_u_1217@82:1>:int,true:bool)|- P[<k_make_array_u_1217@82:3>](
      <k_make_array_u_1217@82:0>:int,<k_make_array_u_1217@82:1>:int,<k_make_array_u_1217@82:3>:unit)
      
      P[<make_array_1030@76:1>](<k_make_array_u_1206@79:1>:int,<k_make_array_u_1206@79:0>:int),
      ((0 <= <k_make_array_u_1206@79:0>) &&
       (<k_make_array_u_1206@79:3> = (<k_make_array_u_1206@79:0> < <k_make_array_u_1206@79:1>)))
      |- P[<k_make_array_u_1206@79:3>](<k_make_array_u_1206@79:0>:int,
                                       <k_make_array_u_1206@79:1>:int,
                                       <k_make_array_u_1206@79:3>:bool)
      
      P[<k_main_1426@68:3>](<k_main_1426@68:0>:int,<make_array_1030@76:0>:int,true:bool),
      P[<<bcopy_aux_1170@71:1>@74:0>](<make_array_1030@76:0>:int,<make_array_1030@76:1>:int)|- P[<make_array_1030@76:1>](
      <make_array_1030@76:0>:int,<make_array_1030@76:1>:int)
      
      P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
      (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
      |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int)
      
      P[<k_main_1426@68:3>](<k_main_1426@68:0>:int,<bcopy_aux_1170@71:0>:int,true:bool), (
      <bcopy_aux_1170@71:3> = 0) |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,
                                                             <bcopy_aux_1170@71:3>:int)
      
      P[<main_1043@65:1>](<k_main_1426@68:1>:int,<k_main_1426@68:0>:int),
      ((<k_main_1426@68:1> <= <k_main_1426@68:0>) && (<k_main_1426@68:3> = (<k_main_1426@68:1> > 0)))
      |- P[<k_main_1426@68:3>](<k_main_1426@68:0>:int,<k_main_1426@68:1>:int,
                               <k_main_1426@68:3>:bool)
      
      P[<f_1509@63:1>](<main_1043@65:0>:int,<main_1043@65:1>:int)|- P[<main_1043@65:1>](
      <main_1043@65:0>:int,<main_1043@65:1>:int)
      
      P[<f_1508@60:0>](<f_1509@63:0>:int)|- P[<f_1509@63:1>](<f_1509@63:0>:int,
                                                             <f_1509@63:1>:int)
      
      |- P[<f_1508@60:0>](<f_1508@60:0>:int)
    call trees:
      <main_1504@57>
        <f_1508@60>
          <f_1509@63>
            <main_1043@65>
              <k_main_1426@68>
                <bcopy_aux_1170@71>
                </<bcopy_aux_1170@71:1>@74>
                <make_array_1030@76>
                  <k_make_array_u_1206@79>
                    <k_make_array_u_1217@82>
                    </<k_make_array_u_1217@82:2>@84>
                  </<k_make_array_u_1206@79:2>@86>
                </<make_array_1030@76:2>@88>
                <<<bcopy_aux_1170@71:1>@74:1>@90>
                  <f_bcopy_aux_1506@92>
                    <update_1171@94>
                    </<update_1171@94:2>@96>
                  </<f_bcopy_aux_1506@92:2>@98>
                </<bcopy_aux_1170@71:2>@100>
                <make_array_1030@102>
                  <k_make_array_u_1206@105>
                    <fail_1511@108>
    inlined horn clauses:
      P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
      
      P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
      ((0 > <k_make_array_u_1206@105:0>) && ((var182 > 0) && <fail_1511@108:0>))
      |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
      
      P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
      P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
      (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
      |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int)
      
      P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
      ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
       ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
        ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
      |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                <<bcopy_aux_1170@71:1>@74:0>:int,
                                                <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
      
      P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
      (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
      |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int)
      
       ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
      |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
    begin ParamSubstInfer.infer(26962)[3]
      
    end ParamSubstInfer.infer(26962)[3] (0.129980 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(26964)[3]
      
    end RefTypeInfer.elim_coeffs(26964)[3] (0.002000 sec.)
    begin GenHcSolver.solve(27360)[3]
      Horn clauses:
        P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
        
        P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
        ((0 > <k_make_array_u_1206@105:0>) && ((var182 > 0) && <fail_1511@108:0>))
        |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
        
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                            <<bcopy_aux_1170@71:2>@100:0>:int)
        
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
          ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
        |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                  <<bcopy_aux_1170@71:1>@74:0>:int,
                                                  <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
        
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                           <<bcopy_aux_1170@71:1>@74:0>:int)
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) =
        ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
        P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int) =
        ((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
         ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
        P[<fail_1511@108:0>](<fail_1511@108:0>:bool) = false
      upper bounds:
        P[<fail_1511@108:0>](var185:bool) = true
      begin GenHcSolver.classify_pids(30049)[4]
        output:
          [<fail_1511@108:0>]
      end GenHcSolver.classify_pids(30049)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(30052)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(30053)[5]
          begin InterpProver.interpolate_fresh(30054)[6]
            begin InterpProver.interpolate_log(30055)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(30056)[8]
                begin InterpProver.interpolate_simplify(30057)[9]
                  begin InterpProver.interpolate_quick(30070)[10]
                    
                  end InterpProver.interpolate_quick(30070)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(30074)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(30074)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(30057)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(30056)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(30055)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(30054)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(30053)[5] (0.001000 sec.)
        output:
          P[<fail_1511@108:0>](<fail_1511@108:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(30052)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
        ((var182 > 0) && (0 > <k_make_array_u_1206@105:0>)) |- bot
        
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                            <<bcopy_aux_1170@71:2>@100:0>:int)
        
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
          ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
        |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                  <<bcopy_aux_1170@71:1>@74:0>:int,
                                                  <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
        
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                           <<bcopy_aux_1170@71:1>@74:0>:int)
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) =
        ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
        P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int) =
        ((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
         ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
      upper bounds:
        P[<<bcopy_aux_1170@71:2>@100:0>](var186:int,var187:int) = ((var186 <= 0) || (0 <= var187))
      begin GenHcSolver.classify_pids(33287)[4]
        output:
          [<<bcopy_aux_1170@71:2>@100:0>]
      end GenHcSolver.classify_pids(33287)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
          ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
      nub:(not ((<bcopy_aux_1170@71:0> <= 0) || (0 <= <<bcopy_aux_1170@71:2>@100:0>)))
      begin ApronInterface.convex_hull_interpolate(33290)[4]
        lb:((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
            ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
        nub:(not ((<bcopy_aux_1170@71:0> <= 0) || (0 <= <<bcopy_aux_1170@71:2>@100:0>)))
        lb':((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
             ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
        nub':(not ((<bcopy_aux_1170@71:0> <= 0) || (0 <= <<bcopy_aux_1170@71:2>@100:0>)))
        begin InterpProver.interpolate(33291)[5]
          begin InterpProver.interpolate_fresh(33292)[6]
            begin InterpProver.interpolate_log(33293)[7]
              input1: ((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
                       ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
              input2: (not ((<bcopy_aux_1170@71:0> <= 0) || (0 <= <<bcopy_aux_1170@71:2>@100:0>)))
              begin InterpProver.interpolate_check(33294)[8]
                begin InterpProver.interpolate_simplify(33295)[9]
                  begin InterpProver.interpolate_quick(33370)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(33379)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(33380)[12]
                        begin CsisatInterface.interpolate_csisat_log(33381)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_71_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0) <= v_sep_bcopy_aux_1170_sep_71_sep_0)
                          input2: (1 <= v_sep_bcopy_aux_1170_sep_71_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(33382)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(33382)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(33381)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(33380)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(33379)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(33370)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(33295)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(33294)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_aux_1170@71:2>@100:0>)
            end InterpProver.interpolate_log(33293)[7] (0.003000 sec.)
            
          end InterpProver.interpolate_fresh(33292)[6] (0.003000 sec.)
          
        end InterpProver.interpolate(33291)[5] (0.003000 sec.)
        output:
          P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int) =
          (0 <= <<bcopy_aux_1170@71:2>@100:0>)
      end ApronInterface.convex_hull_interpolate(33290)[4] (0.003000 sec.)
      Horn clauses:
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        ((<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>) && (0 > <<bcopy_aux_1170@71:2>@100:0>)) |- bot
        
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
          ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
        |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                  <<bcopy_aux_1170@71:1>@74:0>:int,
                                                  <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
        
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                           <<bcopy_aux_1170@71:1>@74:0>:int)
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) =
        ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
      upper bounds:
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](var188:int,var189:int,var190:int) = true
      begin GenHcSolver.classify_pids(35689)[4]
        output:
          [<<<bcopy_aux_1170@71:1>@74:1>@90:0>]
      end GenHcSolver.classify_pids(35689)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
           ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(35692)[4]
        lb:((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
            ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
             ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
        nub:false
        lb':((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
             ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
              ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
        nub':false
        begin InterpProver.interpolate(35693)[5]
          begin InterpProver.interpolate_fresh(35694)[6]
            begin InterpProver.interpolate_log(35695)[7]
              input1: ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
                       ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
                        ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
              input2: false
              begin InterpProver.interpolate_check(35696)[8]
                begin InterpProver.interpolate_simplify(35697)[9]
                  begin InterpProver.interpolate_quick(35790)[10]
                    
                  end InterpProver.interpolate_quick(35790)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(35697)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(35696)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(35695)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(35694)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(35693)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(35692)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        ((<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>) && (0 > <<bcopy_aux_1170@71:2>@100:0>)) |- bot
        
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                           <<bcopy_aux_1170@71:1>@74:0>:int)
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) =
        ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
      upper bounds:
        P[<<bcopy_aux_1170@71:1>@74:0>](var191:int,var192:int) = true
      begin GenHcSolver.classify_pids(37182)[4]
        output:
          [<<bcopy_aux_1170@71:1>@74:0>]
      end GenHcSolver.classify_pids(37182)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(37185)[4]
        lb:((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
            ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        nub:false
        lb':((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
             ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        nub':false
        begin InterpProver.interpolate(37186)[5]
          begin InterpProver.interpolate_fresh(37187)[6]
            begin InterpProver.interpolate_log(37188)[7]
              input1: ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
                       ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
              input2: false
              begin InterpProver.interpolate_check(37189)[8]
                begin InterpProver.interpolate_simplify(37190)[9]
                  begin InterpProver.interpolate_quick(37261)[10]
                    
                  end InterpProver.interpolate_quick(37261)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(37190)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(37189)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(37188)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(37187)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(37186)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) = true
      end ApronInterface.convex_hull_interpolate(37185)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        ((<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>) && (0 > <<bcopy_aux_1170@71:2>@100:0>)) |- bot
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
      upper bounds:
        P[<bcopy_aux_1170@71:3>](var193:int,var194:int) = ((var194 >= var193) || (0 <= var194))
      begin GenHcSolver.classify_pids(38170)[4]
        output:
          [<bcopy_aux_1170@71:3>]
      end GenHcSolver.classify_pids(38170)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
      nub:(not ((<bcopy_aux_1170@71:3> >= <bcopy_aux_1170@71:0>) || (0 <= <bcopy_aux_1170@71:3>)))
      begin ApronInterface.convex_hull_interpolate(38173)[4]
        lb:((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        nub:(not ((<bcopy_aux_1170@71:3> >= <bcopy_aux_1170@71:0>) || (0 <= <bcopy_aux_1170@71:3>)))
        lb':((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        nub':(not ((<bcopy_aux_1170@71:3> >= <bcopy_aux_1170@71:0>) || (0 <= <bcopy_aux_1170@71:3>)))
        begin InterpProver.interpolate(38174)[5]
          begin InterpProver.interpolate_fresh(38175)[6]
            begin InterpProver.interpolate_log(38176)[7]
              input1: ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
              input2: (not ((<bcopy_aux_1170@71:3> >= <bcopy_aux_1170@71:0>) || (0 <= <bcopy_aux_1170@71:3>)))
              begin InterpProver.interpolate_check(38177)[8]
                begin InterpProver.interpolate_simplify(38178)[9]
                  begin InterpProver.interpolate_quick(38229)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(38238)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(38239)[12]
                        begin CsisatInterface.interpolate_csisat_log(38240)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_71_sep_3 & 1 <= v_sep_bcopy_aux_1170_sep_71_sep_0)
                          input2: ((1 + v_sep_bcopy_aux_1170_sep_71_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1170_sep_71_sep_3) <= v_sep_bcopy_aux_1170_sep_71_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(38241)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(38241)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1170_sep_71_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(38240)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1170_sep_71_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1170_sep_71_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(38239)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(38238)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(38229)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(38178)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(38177)[8] (0.002000 sec.)
              output: (0 <= <bcopy_aux_1170@71:3>)
            end InterpProver.interpolate_log(38176)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(38175)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(38174)[5] (0.002000 sec.)
        output:
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) = (0 <= <bcopy_aux_1170@71:3>)
      end ApronInterface.convex_hull_interpolate(38173)[4] (0.002000 sec.)
      begin HcSolver.check_validity(38394)[4]
        input:
          P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
          ((0 > <k_make_array_u_1206@105:0>) && ((var182 > 0) && <fail_1511@108:0>))
          |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
          
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
          (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                              <<bcopy_aux_1170@71:2>@100:0>:int)
          
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
            ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
          |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                    <<bcopy_aux_1170@71:1>@74:0>:int,
                                                    <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
          
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                             <<bcopy_aux_1170@71:1>@74:0>:int)
          
           ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
          |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(38394)[4] (0.003999 sec.)
      solution:
        P[<fail_1511@108:0>](<fail_1511@108:0>:bool) = false
        P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int) =
        (0 <= <<bcopy_aux_1170@71:2>@100:0>)
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
        true
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) = true
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) = (0 <= <bcopy_aux_1170@71:3>)
    end GenHcSolver.solve(27360)[3] (0.067989 sec.)
    begin GenHcSolver.solve(38981)[3]
      Horn clauses:
        P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
        
        P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
        ((0 > <k_make_array_u_1206@105:0>) && ((var182 > 0) && <fail_1511@108:0>))
        |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
        
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                            <<bcopy_aux_1170@71:2>@100:0>:int)
        
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
          ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
        |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                  <<bcopy_aux_1170@71:1>@74:0>:int,
                                                  <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
        
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                           <<bcopy_aux_1170@71:1>@74:0>:int)
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) =
        ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
        P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int) =
        ((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
         ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
        P[<fail_1511@108:0>](<fail_1511@108:0>:bool) = false
      upper bounds:
        P[<fail_1511@108:0>](var196:bool) = true
      begin GenHcSolver.classify_pids(41670)[4]
        output:
          [<fail_1511@108:0>]
      end GenHcSolver.classify_pids(41670)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(41673)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(41676)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(41676)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(41681)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(41681)[5] (0.001000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(41684)[5]
          begin InterpProver.interpolate_fresh(41685)[6]
            begin InterpProver.interpolate_log(41686)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(41687)[8]
                begin InterpProver.interpolate_simplify(41688)[9]
                  begin InterpProver.interpolate_quick(41703)[10]
                    
                  end InterpProver.interpolate_quick(41703)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(41707)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(41707)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(41688)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(41687)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(41686)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(41685)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(41684)[5] (0.000000 sec.)
        output:
          P[<fail_1511@108:0>](<fail_1511@108:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(41673)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
        ((var182 > 0) && (0 > <k_make_array_u_1206@105:0>)) |- bot
        
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                            <<bcopy_aux_1170@71:2>@100:0>:int)
        
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
          ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
        |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                  <<bcopy_aux_1170@71:1>@74:0>:int,
                                                  <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
        
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                           <<bcopy_aux_1170@71:1>@74:0>:int)
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) =
        ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
        P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int) =
        ((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
         ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
      upper bounds:
        P[<<bcopy_aux_1170@71:2>@100:0>](var197:int,var198:int) = ((var197 <= 0) || (0 <= var198))
      begin GenHcSolver.classify_pids(44927)[4]
        output:
          [<<bcopy_aux_1170@71:2>@100:0>]
      end GenHcSolver.classify_pids(44927)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
          ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
      nub:(not ((<bcopy_aux_1170@71:0> <= 0) || (0 <= <<bcopy_aux_1170@71:2>@100:0>)))
      begin ApronInterface.convex_hull_interpolate(44930)[4]
        lb:((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
            ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
        nub:(not ((<bcopy_aux_1170@71:0> <= 0) || (0 <= <<bcopy_aux_1170@71:2>@100:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(44955)[5]
          ts: ((<<bcopy_aux_1170@71:2>@100:0> = 0) &&
               ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(44955)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(44973)[5]
          ts: ((<bcopy_aux_1170@71:0> > 0) && (0 > <<bcopy_aux_1170@71:2>@100:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(44973)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1170@71:2>@100:0> = 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0))
        nub':(((-1 + (-1 * <<bcopy_aux_1170@71:2>@100:0>)) >= 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0))
        begin InterpProver.interpolate(44978)[5]
          begin InterpProver.interpolate_fresh(44979)[6]
            begin InterpProver.interpolate_log(44980)[7]
              input1: ((<<bcopy_aux_1170@71:2>@100:0> = 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0))
              input2: (((-1 + (-1 * <<bcopy_aux_1170@71:2>@100:0>)) >= 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0))
              begin InterpProver.interpolate_check(44981)[8]
                begin InterpProver.interpolate_simplify(44982)[9]
                  begin InterpProver.interpolate_quick(45045)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(45054)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(45055)[12]
                        begin CsisatInterface.interpolate_csisat_log(45056)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_71_sep_0)
                          input2: (1 <= v_sep_bcopy_aux_1170_sep_71_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0) <= 0)
                          begin CsisatInterface.interpolate_csisat_raw(45057)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(45057)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(45056)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(45055)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(45054)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(45045)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(44982)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(44981)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_aux_1170@71:2>@100:0>)
            end InterpProver.interpolate_log(44980)[7] (0.002999 sec.)
            
          end InterpProver.interpolate_fresh(44979)[6] (0.002999 sec.)
          
        end InterpProver.interpolate(44978)[5] (0.002999 sec.)
        output:
          P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int) =
          (0 <= <<bcopy_aux_1170@71:2>@100:0>)
      end ApronInterface.convex_hull_interpolate(44930)[4] (0.002999 sec.)
      Horn clauses:
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        ((<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>) && (0 > <<bcopy_aux_1170@71:2>@100:0>)) |- bot
        
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
          ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
        |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                  <<bcopy_aux_1170@71:1>@74:0>:int,
                                                  <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
        
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                           <<bcopy_aux_1170@71:1>@74:0>:int)
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) =
        ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
        ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
      upper bounds:
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](var199:int,var200:int,var201:int) = true
      begin GenHcSolver.classify_pids(47368)[4]
        output:
          [<<<bcopy_aux_1170@71:1>@74:1>@90:0>]
      end GenHcSolver.classify_pids(47368)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
           ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(47371)[4]
        lb:((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
            ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
             ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(47407)[5]
          ts: ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
               ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
                ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0))))
          
        end ExtFormula.Formula.case_analysis_boolean(47407)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(47417)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(47417)[5] (0.000000 sec.)
        lb':((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
             ((<<bcopy_aux_1170@71:1>@74:0> = 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(47420)[5]
          begin InterpProver.interpolate_fresh(47421)[6]
            begin InterpProver.interpolate_log(47422)[7]
              input1: ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
                       ((<<bcopy_aux_1170@71:1>@74:0> = 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(47423)[8]
                begin InterpProver.interpolate_simplify(47424)[9]
                  begin InterpProver.interpolate_quick(47482)[10]
                    
                  end InterpProver.interpolate_quick(47482)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(47424)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(47423)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(47422)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(47421)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(47420)[5] (0.000000 sec.)
        output:
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(47371)[4] (0.001000 sec.)
      Horn clauses:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        ((<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>) && (0 > <<bcopy_aux_1170@71:2>@100:0>)) |- bot
        
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
        (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
        |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                           <<bcopy_aux_1170@71:1>@74:0>:int)
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) =
        ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
         ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
      upper bounds:
        P[<<bcopy_aux_1170@71:1>@74:0>](var202:int,var203:int) = true
      begin GenHcSolver.classify_pids(48876)[4]
        output:
          [<<bcopy_aux_1170@71:1>@74:0>]
      end GenHcSolver.classify_pids(48876)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(48879)[4]
        lb:((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
            ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(48904)[5]
          ts: ((<<bcopy_aux_1170@71:1>@74:0> = 0) &&
               ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) && (<bcopy_aux_1170@71:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(48904)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(48913)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(48913)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1170@71:1>@74:0> = 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(48916)[5]
          begin InterpProver.interpolate_fresh(48917)[6]
            begin InterpProver.interpolate_log(48918)[7]
              input1: ((<<bcopy_aux_1170@71:1>@74:0> = 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(48919)[8]
                begin InterpProver.interpolate_simplify(48920)[9]
                  begin InterpProver.interpolate_quick(48960)[10]
                    
                  end InterpProver.interpolate_quick(48960)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(48920)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(48919)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(48918)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(48917)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(48916)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) = true
      end ApronInterface.convex_hull_interpolate(48879)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
        ((<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>) && (0 > <<bcopy_aux_1170@71:2>@100:0>)) |- bot
        
         ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) =
        ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
      upper bounds:
        P[<bcopy_aux_1170@71:3>](var204:int,var205:int) = ((var205 >= var204) || (0 <= var205))
      begin GenHcSolver.classify_pids(49871)[4]
        output:
          [<bcopy_aux_1170@71:3>]
      end GenHcSolver.classify_pids(49871)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
      nub:(not ((<bcopy_aux_1170@71:3> >= <bcopy_aux_1170@71:0>) || (0 <= <bcopy_aux_1170@71:3>)))
      begin ApronInterface.convex_hull_interpolate(49874)[4]
        lb:((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
        nub:(not ((<bcopy_aux_1170@71:3> >= <bcopy_aux_1170@71:0>) || (0 <= <bcopy_aux_1170@71:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(49884)[5]
          ts: ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(49884)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(49903)[5]
          ts: ((<bcopy_aux_1170@71:3> < <bcopy_aux_1170@71:0>) && (0 > <bcopy_aux_1170@71:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(49903)[5] (0.001000 sec.)
        lb':((<bcopy_aux_1170@71:3> = 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0))
        nub':(((-1 + (-1 * <bcopy_aux_1170@71:3>)) >= 0) &&
              (((-1 + (-1 * <bcopy_aux_1170@71:3>)) + <bcopy_aux_1170@71:0>) >= 0))
        begin InterpProver.interpolate(49909)[5]
          begin InterpProver.interpolate_fresh(49910)[6]
            begin InterpProver.interpolate_log(49911)[7]
              input1: ((<bcopy_aux_1170@71:3> = 0) && ((-1 + <bcopy_aux_1170@71:0>) >= 0))
              input2: (((-1 + (-1 * <bcopy_aux_1170@71:3>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_aux_1170@71:3>)) + <bcopy_aux_1170@71:0>) >= 0))
              begin InterpProver.interpolate_check(49912)[8]
                begin InterpProver.interpolate_simplify(49913)[9]
                  begin InterpProver.interpolate_quick(49982)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(49991)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(49992)[12]
                        begin CsisatInterface.interpolate_csisat_log(49993)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_71_sep_3 & 1 <= v_sep_bcopy_aux_1170_sep_71_sep_0)
                          input2: ((1 + v_sep_bcopy_aux_1170_sep_71_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1170_sep_71_sep_3) <= v_sep_bcopy_aux_1170_sep_71_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(49994)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(49994)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1170_sep_71_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(49993)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1170_sep_71_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1170_sep_71_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(49992)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(49991)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(49982)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(49913)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(49912)[8] (0.002000 sec.)
              output: (0 <= <bcopy_aux_1170@71:3>)
            end InterpProver.interpolate_log(49911)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(49910)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(49909)[5] (0.002000 sec.)
        output:
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) = (0 <= <bcopy_aux_1170@71:3>)
      end ApronInterface.convex_hull_interpolate(49874)[4] (0.003000 sec.)
      begin HcSolver.check_validity(50151)[4]
        input:
          P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
          ((0 > <k_make_array_u_1206@105:0>) && ((var182 > 0) && <fail_1511@108:0>))
          |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
          
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
          (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                              <<bcopy_aux_1170@71:2>@100:0>:int)
          
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
            ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
          |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                    <<bcopy_aux_1170@71:1>@74:0>:int,
                                                    <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
          
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                             <<bcopy_aux_1170@71:1>@74:0>:int)
          
           ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
          |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(50151)[4] (0.001999 sec.)
      solution:
        P[<fail_1511@108:0>](<fail_1511@108:0>:bool) = false
        P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int) =
        (0 <= <<bcopy_aux_1170@71:2>@100:0>)
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int,<<<bcopy_aux_1170@71:1>@74:1>@90:0>:int) =
        true
        P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int) = true
        P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int) = (0 <= <bcopy_aux_1170@71:3>)
    end GenHcSolver.solve(38981)[3] (0.071989 sec.)
    begin YhornInterface.solve(50738)[3]
      begin HcSolver.solve_ub(50739)[4]
        encoded:
          P[<fail_1511@108:0>](<fail_1511@108:0>:int)|- bot
          
          P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
          ((0 > <k_make_array_u_1206@105:0>) && ((var182 > 0) && (<fail_1511@108:0> = 1)))
          |- P[<fail_1511@108:0>](<fail_1511@108:0>:int)
          
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
          (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                              <<bcopy_aux_1170@71:2>@100:0>:int)
          
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
            ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
          |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                    <<bcopy_aux_1170@71:1>@74:0>:int,
                                                    <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
          
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                             <<bcopy_aux_1170@71:1>@74:0>:int)
          
           ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
          |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
        input to Yhorn:
          P[<fail_1511@108:0>](<fail_1511@108:0>:int)|- bot
          
          P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
          ((var182 > 0) && ((0 > <k_make_array_u_1206@105:0>) && (<fail_1511@108:0> = 1)))
          |- P[<fail_1511@108:0>](<fail_1511@108:0>:int)
          
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
          (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                              <<bcopy_aux_1170@71:2>@100:0>:int)
          
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          ((<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>) &&
           ((<bcopy_aux_1170@71:0> > 0) &&
            ((0 <= <<bcopy_aux_1170@71:1>@74:0>) && (<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0))))
          |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                    <<bcopy_aux_1170@71:1>@74:0>:int,
                                                    <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
          
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                             <<bcopy_aux_1170@71:1>@74:0>:int)
          
           ((<bcopy_aux_1170@71:0> > 0) && (<bcopy_aux_1170@71:3> = 0))
          |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1511_sep_108_sep_0($134)) -> 1=0.
(($134-1=0) & (-$135>0) & ($136>0)) & (v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0($136,$135)) -> v_sep_fail_1511_sep_108_sep_0($134).
($137-$138<0) & (v_sep_bcopy_aux_1170_sep_71_sep_3($138,$137)) & (v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0($138,$137,$139)) -> v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0($138,$137).
(($140=0) & (-$141<=0) & ($138>0) & (-$138+$141<0)) & (v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0($138,$141)) -> v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0($138,$141,$140).
(-$138+$141<0) & (v_sep_bcopy_aux_1170_sep_71_sep_3($138,$141)) -> v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0($138,$141).
($142=0) & ($138>0) -> v_sep_bcopy_aux_1170_sep_71_sep_3($138,$142).


v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
.......
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
...
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
.....
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
......
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0: X
v_sep_bcopy_aux_1170_sep_71_sep_3: X
v_sep_fail_1511_sep_108_sep_0: X
.......(0=0) & (v_sep_fail_1511_sep_108_sep_0($134)) -> 1=0.
(($134-1=0) & (-$135>0) & ($136>0)) & (v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0($136,$135)) -> v_sep_fail_1511_sep_108_sep_0($134).
($137-$138<0) & (v_sep_bcopy_aux_1170_sep_71_sep_3($138,$137)) & (v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0($138,$137,$139)) -> v_sep_bcopy_aux_1170_sep_71_sep_2_sep_100_sep_0($138,$137).
(($140=0) & (-$141<=0) & ($138>0) & (-$138+$141<0)) & (v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0($138,$141)) -> v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_1_sep_90_sep_0($138,$141,$140).
(-$138+$141<0) & (v_sep_bcopy_aux_1170_sep_71_sep_3($138,$141)) -> v_sep_bcopy_aux_1170_sep_71_sep_1_sep_74_sep_0($138,$141).
($142=0) & ($138>0) -> v_sep_bcopy_aux_1170_sep_71_sep_3($138,$142).

        solution:
          P[<<bcopy_aux_1170@71:1>@74:0>]($163:int,$165:int) = true
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>]($156:int,$158:int,$160:int) = (0 <= $158)
          P[<<bcopy_aux_1170@71:2>@100:0>]($146:int,$148:int) = (0 <= $148)
          P[<bcopy_aux_1170@71:3>]($151:int,$153:int) = true
          P[<fail_1511@108:0>]($143:bool) = false
        
      end HcSolver.solve_ub(50739)[4] (0.021997 sec.)
      begin HcSolver.check_validity(51023)[4]
        input:
          P[<fail_1511@108:0>](<fail_1511@108:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@71:2>@100:0>](var182:int,<k_make_array_u_1206@105:0>:int),
          ((0 > <k_make_array_u_1206@105:0>) && ((var182 > 0) && <fail_1511@108:0>))
          |- P[<fail_1511@108:0>](<fail_1511@108:0>:bool)
          
          P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int,var183:int),
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:2>@100:0>:int),
          (<<bcopy_aux_1170@71:2>@100:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:2>@100:0>](<bcopy_aux_1170@71:0>:int,
                                              <<bcopy_aux_1170@71:2>@100:0>:int)
          
          P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          ((<<<bcopy_aux_1170@71:1>@74:1>@90:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@71:1>@74:0>) &&
            ((<bcopy_aux_1170@71:0> > 0) && (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>))))
          |- P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>](<bcopy_aux_1170@71:0>:int,
                                                    <<bcopy_aux_1170@71:1>@74:0>:int,
                                                    <<<bcopy_aux_1170@71:1>@74:1>@90:0>:int)
          
          P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<<bcopy_aux_1170@71:1>@74:0>:int),
          (<<bcopy_aux_1170@71:1>@74:0> < <bcopy_aux_1170@71:0>)
          |- P[<<bcopy_aux_1170@71:1>@74:0>](<bcopy_aux_1170@71:0>:int,
                                             <<bcopy_aux_1170@71:1>@74:0>:int)
          
           ((<bcopy_aux_1170@71:3> = 0) && (<bcopy_aux_1170@71:0> > 0))
          |- P[<bcopy_aux_1170@71:3>](<bcopy_aux_1170@71:0>:int,<bcopy_aux_1170@71:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(51023)[4] (0.003999 sec.)
      solution:
        P[<<bcopy_aux_1170@71:1>@74:0>]($163:int,$165:int) = true
        P[<<<bcopy_aux_1170@71:1>@74:1>@90:0>]($156:int,$158:int,$160:int) = (0 <= $158)
        P[<<bcopy_aux_1170@71:2>@100:0>]($146:int,$148:int) = (0 <= $148)
        P[<bcopy_aux_1170@71:3>]($151:int,$153:int) = true
        P[<fail_1511@108:0>]($143:bool) = false
    end YhornInterface.solve(50738)[3] (0.026996 sec.)
    
  end RefTypeInfer.infer_etrs(23047)[2] (0.327950 sec.)
  refinement types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) ->
                    v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1217: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1506: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1171: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1510: var235:int -> var234:int -> var233:unit -> X
    f_bcopy_aux_1507: var250:int ->
                      var249:int ->
                      var248:int ->
                      (var247:int -> (var246:int -> X) -> X) ->
                      (var243:unit -> X) -> (var241:int -> (var240:int -> X) -> X) -> var237:unit -> X
    f_update_1505: var257:int -> var256:int -> var255:int -> (var254:unit -> X) -> var252:int -> X
  abstraction types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) ->
                    v10:int[v10 -> (0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: var258:int -> var259:int -> (var260:int -> X) -> X
    k_make_array_u_1206: var263:int -> var264:int -> (var265:int -> X) -> var267:bool -> X
    k_make_array_u_1217: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1506: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1171: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    fail_1511: v1:bool -> (v2:unit -> X) -> X
    f_1510: var235:int -> var234:int -> var233:unit -> X
    f_bcopy_aux_1507: var250:int ->
                      var249:int ->
                      var248:int ->
                      (var247:int -> (var246:int -> X) -> X) ->
                      (var243:unit -> X) -> (var241:int -> (var240:int -> X) -> X) -> var237:unit -> X
    f_update_1505: var257:int -> var256:int -> var255:int -> (var254:unit -> X) -> var252:int -> X
  
end AbsTypeInfer.refine(23046)[1] (0.332950 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1504 ... --> 
  f_1508 ... --> 
  f_1509 ... --> 
  main_1043 [1/2] ... --> 
  k_main_1426 [1/2] ... --> 
  bcopy_aux_1170 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1206 [1/2] ... --> 
  k_make_array_u_1217 ... --> 
  f_bcopy_aux_1506 ... --> 
  update_1171 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1206 [2/2] ... --> 
  fail_1511 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(52390)[1]
  program:
    main_1504  | true = ((Random.int 0) f_1508)
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1313 ())
    bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1506 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1313
                                                          src_1040))
    f_1508 x_1462 | true = ((Random.int 0) (f_1509 x_1462))
    f_1509 x_1462 x_1475 | true = (main_1043 x_1462
                                             x_1475
                                             (f_1510 x_1462
                                                     x_1475))
    f_1510 x_1462 x_1475 x_1459 | true = end
    f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 | true = (
    update_1171
      i_1042
      m_1039
      des_1041
      x_1345
      (f_bcopy_aux_1507 i_1042
                        m_1039
                        x_1345
                        des_1041
                        k_bcopy_aux_1313
                        src_1040))
    f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 | true = (
    bcopy_aux_1170 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1313)
    f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 | true = (
    k_update_1253 ())
    fail_1511 b k | true = (fail ())
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | b_1456 = (bcopy_aux_1170
                                                               n_1044
                                                               (make_array_1030 n_1044)
                                                               (make_array_1030 m_1045)
                                                               0
                                                               k_main_1391)
    k_main_1426 m_1045 n_1044 k_main_1391 b_1456 | (not b_1456) = (k_main_1391 ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | b_1218 = (
    k_make_array_u_1217 i_1032
                        n_1031
                        k_make_array_1200
                        ())
    k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 | (not b_1218) = (
    fail_1511 true
              (k_make_array_u_1217 i_1032
                                   n_1031
                                   k_make_array_1200))
    k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 | true = (
    k_make_array_1200 0)
    main_1043 n_1044 m_1045 k_main_1391 | (n_1044 <= m_1045) = (k_main_1426 m_1045
                                                                    n_1044
                                                                    k_main_1391
                                                                    (n_1044 > 0))
    main_1043 n_1044 m_1045 k_main_1391 | (not (n_1044 <= m_1045)) = (
    k_main_1426 m_1045
                n_1044
                k_main_1391
                false)
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (0 <= i_1032) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1200 | (not (0 <= i_1032)) = (
    k_make_array_u_1206 i_1032
                        n_1031
                        k_make_array_1200
                        false)
    update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 | true = (
    des_1036 i_1034
             (f_update_1505 i_1034
                            n_1035
                            x_1037
                            k_update_1253))
    main_1504:X
    bcopy_aux_1170:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1508:int -> X
    f_1509:int -> int -> X
    f_1510:int -> int -> unit -> X
    f_bcopy_aux_1506:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_bcopy_aux_1507:int ->
                     int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> unit -> X
    f_update_1505:int -> int -> int -> (unit -> X) -> int -> X
    fail_1511:bool -> (unit -> X) -> X
    k_main_1426:int -> int -> (unit -> X) -> bool -> X
    k_make_array_u_1206:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1217:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1171:int -> int -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
  inlined functions: f_1508,f_1509,f_1510,f_bcopy_aux_1506,f_bcopy_aux_1507,f_update_1505,k_main_1426,k_make_array_u_1206,k_make_array_u_1217,main_1043,make_array_1030,update_1171
  counterexample: 0:0:0:0:0:1:0:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1508@114:0> = var269)
     [true.nop((<f_1509@117:0> = <f_1508@114:0>) && (<f_1509@117:1> = var270))
      [true.((<main_1043@119:0> = <f_1509@117:0>) && (<main_1043@119:1> = <f_1509@117:1>))
       [(<main_1043@119:0> <= <main_1043@119:1>).
        ((<k_main_1426@122:0> = <main_1043@119:1>) &&
         ((<k_main_1426@122:1> = <main_1043@119:0>) && (<k_main_1426@122:3> = (<main_1043@119:0> > 0))))
        [<k_main_1426@122:3>.((<bcopy_aux_1170@125:0> = <k_main_1426@122:1>) && (<bcopy_aux_1170@125:3> = 0))
         [(not (<bcopy_aux_1170@125:3> >= <bcopy_aux_1170@125:0>)).
          (<<bcopy_aux_1170@125:1>@128:0> = <bcopy_aux_1170@125:3>)
          [true.
           ((<make_array_1030@130:0> = <k_main_1426@122:1>) &&
            (<make_array_1030@130:1> = <<bcopy_aux_1170@125:1>@128:0>))
           [(0 <= <make_array_1030@130:1>).
            ((<k_make_array_u_1206@133:0> = <make_array_1030@130:1>) &&
             ((<k_make_array_u_1206@133:1> = <make_array_1030@130:0>) &&
              (<k_make_array_u_1206@133:3> = (<make_array_1030@130:1> < <make_array_1030@130:0>))))
            [<k_make_array_u_1206@133:3>.
             ((<k_make_array_u_1217@136:0> = <k_make_array_u_1206@133:0>) &&
              ((<k_make_array_u_1217@136:1> = <k_make_array_u_1206@133:1>) && (<k_make_array_u_1217@136:3> = ())))
             [true.(<<k_make_array_u_1217@136:2>@138:0> = 0)
              [true.(<<k_make_array_u_1206@133:2>@140:0> = <<k_make_array_u_1217@136:2>@138:0>)
               [true.(<<make_array_1030@130:2>@142:0> = <<k_make_array_u_1206@133:2>@140:0>)
                [true.(<<<bcopy_aux_1170@125:1>@128:1>@144:0> = <<make_array_1030@130:2>@142:0>)
                 [true.
                  ((<f_bcopy_aux_1506@146:0> = <bcopy_aux_1170@125:3>) &&
                   ((<f_bcopy_aux_1506@146:1> = <bcopy_aux_1170@125:0>) &&
                    (<f_bcopy_aux_1506@146:5> = <<<bcopy_aux_1170@125:1>@128:1>@144:0>)))
                  [true.
                   ((<update_1171@148:0> = <f_bcopy_aux_1506@146:0>) &&
                    ((<update_1171@148:1> = <f_bcopy_aux_1506@146:1>) &&
                     (<update_1171@148:3> = <f_bcopy_aux_1506@146:5>)))
                   [true.(<<update_1171@148:2>@150:0> = <update_1171@148:0>)
                    [true.(<<f_bcopy_aux_1506@146:2>@152:0> = <<update_1171@148:2>@150:0>)
                     [true.(<<bcopy_aux_1170@125:2>@154:0> = <<f_bcopy_aux_1506@146:2>@152:0>)
                      [true.
                       ((<make_array_1030@156:0> = <k_main_1426@122:0>) &&
                        (<make_array_1030@156:1> = <<bcopy_aux_1170@125:2>@154:0>))
                       [(0 <= <make_array_1030@156:1>).
                        ((<k_make_array_u_1206@159:0> = <make_array_1030@156:1>) &&
                         ((<k_make_array_u_1206@159:1> = <make_array_1030@156:0>) &&
                          (<k_make_array_u_1206@159:3> = (<make_array_1030@156:1> < <make_array_1030@156:0>))))
                        [(not <k_make_array_u_1206@159:3>).(<fail_1511@162:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(52391)[2]
    horn clauses:
      P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
      
      P[<k_make_array_u_1206@159:3>](<k_make_array_u_1206@159:0>:int,<k_make_array_u_1206@159:1>:int,false:bool),
      <fail_1511@162:0> |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
      
      P[<make_array_1030@156:1>](<k_make_array_u_1206@159:1>:int,<k_make_array_u_1206@159:0>:int),
      ((0 <= <k_make_array_u_1206@159:0>) &&
       (<k_make_array_u_1206@159:3> = (<k_make_array_u_1206@159:0> < <k_make_array_u_1206@159:1>)))
      |- P[<k_make_array_u_1206@159:3>](<k_make_array_u_1206@159:0>:int,
                                        <k_make_array_u_1206@159:1>:int,
                                        <k_make_array_u_1206@159:3>:bool)
      
      P[<k_main_1426@122:3>](<make_array_1030@156:0>:int,<bcopy_aux_1170@125:0>:int,true:bool),
      P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<make_array_1030@156:1>:int)|- P[<make_array_1030@156:1>](
      <make_array_1030@156:0>:int,<make_array_1030@156:1>:int)
      
      P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
      P[<<f_bcopy_aux_1506@146:2>@152:0>](<<bcopy_aux_1170@125:1>@128:0>:int,<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
      (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
      |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                           <<bcopy_aux_1170@125:2>@154:0>:int)
      
      P[<f_bcopy_aux_1506@146:5>](<f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:1>:int,<update_1171@148:3>:int),
      P[<<update_1171@148:2>@150:0>](<f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:1>:int,<<f_bcopy_aux_1506@146:2>@152:0>:int)|- P[<<f_bcopy_aux_1506@146:2>@152:0>](
      <f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:1>:int,<<f_bcopy_aux_1506@146:2>@152:0>:int)
      
      P[<update_1171@148:3>](<update_1171@148:0>:int,<update_1171@148:1>:int,<update_1171@148:3>:int),
      (<<update_1171@148:2>@150:0> = <update_1171@148:0>)
      |- P[<<update_1171@148:2>@150:0>](<update_1171@148:0>:int,<update_1171@148:1>:int,
                                        <<update_1171@148:2>@150:0>:int)
      
      P[<f_bcopy_aux_1506@146:5>](<update_1171@148:0>:int,<update_1171@148:1>:int,<update_1171@148:3>:int)|- P[<update_1171@148:3>](
      <update_1171@148:0>:int,<update_1171@148:1>:int,<update_1171@148:3>:int)
      
      P[<bcopy_aux_1170@125:3>](<f_bcopy_aux_1506@146:1>:int,<f_bcopy_aux_1506@146:0>:int),
      P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<f_bcopy_aux_1506@146:1>:int,<f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:5>:int),
      (<f_bcopy_aux_1506@146:0> < <f_bcopy_aux_1506@146:1>)
      |- P[<f_bcopy_aux_1506@146:5>](<f_bcopy_aux_1506@146:0>:int,<f_bcopy_aux_1506@146:1>:int,
                                     <f_bcopy_aux_1506@146:5>:int)
      
      P[<k_main_1426@122:3>](<k_main_1426@122:0>:int,<bcopy_aux_1170@125:0>:int,true:bool),
      P[<<make_array_1030@130:2>@142:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)|- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](
      <bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
      
      P[<make_array_1030@130:1>](<make_array_1030@130:0>:int,<make_array_1030@130:1>:int),
      P[<<k_make_array_u_1206@133:2>@140:0>](<make_array_1030@130:1>:int,<make_array_1030@130:0>:int,<<make_array_1030@130:2>@142:0>:int),
      (0 <= <make_array_1030@130:1>)
      |- P[<<make_array_1030@130:2>@142:0>](<make_array_1030@130:0>:int,
                                            <make_array_1030@130:1>:int,
                                            <<make_array_1030@130:2>@142:0>:int)
      
      P[<k_make_array_u_1206@133:3>](<k_make_array_u_1206@133:0>:int,<k_make_array_u_1206@133:1>:int,true:bool),
      P[<<k_make_array_u_1217@136:2>@138:0>](<k_make_array_u_1206@133:0>:int,<k_make_array_u_1206@133:1>:int,<<k_make_array_u_1206@133:2>@140:0>:int)|- P[<<k_make_array_u_1206@133:2>@140:0>](
      <k_make_array_u_1206@133:0>:int,<k_make_array_u_1206@133:1>:int,
      <<k_make_array_u_1206@133:2>@140:0>:int)
      
      P[<k_make_array_u_1217@136:3>](<k_make_array_u_1217@136:0>:int,<k_make_array_u_1217@136:1>:int,<k_make_array_u_1217@136:3>:unit),
      (<<k_make_array_u_1217@136:2>@138:0> = 0)
      |- P[<<k_make_array_u_1217@136:2>@138:0>](<k_make_array_u_1217@136:0>:int,
                                                <k_make_array_u_1217@136:1>:int,
                                                <<k_make_array_u_1217@136:2>@138:0>:int)
      
      P[<k_make_array_u_1206@133:3>](<k_make_array_u_1217@136:0>:int,<k_make_array_u_1217@136:1>:int,true:bool)|- P[<k_make_array_u_1217@136:3>](
      <k_make_array_u_1217@136:0>:int,<k_make_array_u_1217@136:1>:int,
      <k_make_array_u_1217@136:3>:unit)
      
      P[<make_array_1030@130:1>](<k_make_array_u_1206@133:1>:int,<k_make_array_u_1206@133:0>:int),
      ((0 <= <k_make_array_u_1206@133:0>) &&
       (<k_make_array_u_1206@133:3> = (<k_make_array_u_1206@133:0> < <k_make_array_u_1206@133:1>)))
      |- P[<k_make_array_u_1206@133:3>](<k_make_array_u_1206@133:0>:int,
                                        <k_make_array_u_1206@133:1>:int,
                                        <k_make_array_u_1206@133:3>:bool)
      
      P[<k_main_1426@122:3>](<k_main_1426@122:0>:int,<make_array_1030@130:0>:int,true:bool),
      P[<<bcopy_aux_1170@125:1>@128:0>](<make_array_1030@130:0>:int,<make_array_1030@130:1>:int)|- P[<make_array_1030@130:1>](
      <make_array_1030@130:0>:int,<make_array_1030@130:1>:int)
      
      P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
      (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
      |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                           <<bcopy_aux_1170@125:1>@128:0>:int)
      
      P[<k_main_1426@122:3>](<k_main_1426@122:0>:int,<bcopy_aux_1170@125:0>:int,true:bool),
      (<bcopy_aux_1170@125:3> = 0) |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,
                                                                <bcopy_aux_1170@125:3>:int)
      
      P[<main_1043@119:1>](<k_main_1426@122:1>:int,<k_main_1426@122:0>:int),
      ((<k_main_1426@122:1> <= <k_main_1426@122:0>) && (<k_main_1426@122:3> = (<k_main_1426@122:1> > 0)))
      |- P[<k_main_1426@122:3>](<k_main_1426@122:0>:int,<k_main_1426@122:1>:int,
                                <k_main_1426@122:3>:bool)
      
      P[<f_1509@117:1>](<main_1043@119:0>:int,<main_1043@119:1>:int)|- P[<main_1043@119:1>](
      <main_1043@119:0>:int,<main_1043@119:1>:int)
      
      P[<f_1508@114:0>](<f_1509@117:0>:int)|- P[<f_1509@117:1>](<f_1509@117:0>:int,
                                                                <f_1509@117:1>:int)
      
      |- P[<f_1508@114:0>](<f_1508@114:0>:int)
    call trees:
      <main_1504@111>
        <f_1508@114>
          <f_1509@117>
            <main_1043@119>
              <k_main_1426@122>
                <bcopy_aux_1170@125>
                </<bcopy_aux_1170@125:1>@128>
                <make_array_1030@130>
                  <k_make_array_u_1206@133>
                    <k_make_array_u_1217@136>
                    </<k_make_array_u_1217@136:2>@138>
                  </<k_make_array_u_1206@133:2>@140>
                </<make_array_1030@130:2>@142>
                <<<bcopy_aux_1170@125:1>@128:1>@144>
                  <f_bcopy_aux_1506@146>
                    <update_1171@148>
                    </<update_1171@148:2>@150>
                  </<f_bcopy_aux_1506@146:2>@152>
                </<bcopy_aux_1170@125:2>@154>
                <make_array_1030@156>
                  <k_make_array_u_1206@159>
                    <fail_1511@162>
    inlined horn clauses:
      P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
      
      P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
      ((0 <= <k_make_array_u_1206@159:0>) &&
       ((var273 > 0) && ((var273 < (1 + <k_make_array_u_1206@159:0>)) && <fail_1511@162:0>)))
      |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
      
      P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
      P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
      (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
      |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                           <<bcopy_aux_1170@125:2>@154:0>:int)
      
      P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
      ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
       ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
        ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
      |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                   <<bcopy_aux_1170@125:1>@128:0>:int,
                                                   <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
      
      P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
      (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
      |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                           <<bcopy_aux_1170@125:1>@128:0>:int)
      
       ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
      |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
    begin ParamSubstInfer.infer(56622)[3]
      
    end ParamSubstInfer.infer(56622)[3] (0.166974 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(56624)[3]
      
    end RefTypeInfer.elim_coeffs(56624)[3] (0.003000 sec.)
    begin GenHcSolver.solve(57133)[3]
      Horn clauses:
        P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
        
        P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
        ((0 <= <k_make_array_u_1206@159:0>) &&
         ((var273 > 0) && ((var273 < (1 + <k_make_array_u_1206@159:0>)) && <fail_1511@162:0>)))
        |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
        
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
        (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:2>@154:0>:int)
        
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
          ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
        |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                     <<bcopy_aux_1170@125:1>@128:0>:int,
                                                     <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
        
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:1>@128:0>:int)
        
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) =
        ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
        P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int) =
        ((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
         ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
        P[<fail_1511@162:0>](<fail_1511@162:0>:bool) = false
      upper bounds:
        P[<fail_1511@162:0>](var276:bool) = true
      begin GenHcSolver.classify_pids(59951)[4]
        output:
          [<fail_1511@162:0>]
      end GenHcSolver.classify_pids(59951)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(59954)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(59955)[5]
          begin InterpProver.interpolate_fresh(59956)[6]
            begin InterpProver.interpolate_log(59957)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(59958)[8]
                begin InterpProver.interpolate_simplify(59959)[9]
                  begin InterpProver.interpolate_quick(59972)[10]
                    
                  end InterpProver.interpolate_quick(59972)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(59976)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(59976)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(59959)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(59958)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(59957)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(59956)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(59955)[5] (0.000000 sec.)
        output:
          P[<fail_1511@162:0>](<fail_1511@162:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(59954)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
        ((var273 < (1 + <k_make_array_u_1206@159:0>)) && ((var273 > 0) && (0 <= <k_make_array_u_1206@159:0>))) |- bot
        
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
        (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:2>@154:0>:int)
        
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
          ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
        |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                     <<bcopy_aux_1170@125:1>@128:0>:int,
                                                     <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
        
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:1>@128:0>:int)
        
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) =
        ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
        P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int) =
        ((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
         ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
      upper bounds:
        P[<<bcopy_aux_1170@125:2>@154:0>](var277:int,var278:int) =
        ((var277 >= (1 + var278)) || ((var277 <= 0) || (0 > var278)))
      begin GenHcSolver.classify_pids(63756)[4]
        output:
          [<<bcopy_aux_1170@125:2>@154:0>]
      end GenHcSolver.classify_pids(63756)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
          ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
      nub:(not
             ((<bcopy_aux_1170@125:0> >= (1 + <<bcopy_aux_1170@125:2>@154:0>)) ||
              ((<bcopy_aux_1170@125:0> <= 0) || (0 > <<bcopy_aux_1170@125:2>@154:0>))))
      begin ApronInterface.convex_hull_interpolate(63759)[4]
        lb:((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
            ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
        nub:(not
               ((<bcopy_aux_1170@125:0> >= (1 + <<bcopy_aux_1170@125:2>@154:0>)) ||
                ((<bcopy_aux_1170@125:0> <= 0) || (0 > <<bcopy_aux_1170@125:2>@154:0>))))
        lb':((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
             ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
        nub':(not
                ((<bcopy_aux_1170@125:0> >= (1 + <<bcopy_aux_1170@125:2>@154:0>)) ||
                 ((<bcopy_aux_1170@125:0> <= 0) || (0 > <<bcopy_aux_1170@125:2>@154:0>))))
        begin InterpProver.interpolate(63760)[5]
          begin InterpProver.interpolate_fresh(63761)[6]
            begin InterpProver.interpolate_log(63762)[7]
              input1: ((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
                       ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
              input2: (not
                         ((<bcopy_aux_1170@125:0> >= (1 + <<bcopy_aux_1170@125:2>@154:0>)) ||
                          ((<bcopy_aux_1170@125:0> <= 0) || (0 > <<bcopy_aux_1170@125:2>@154:0>))))
              begin InterpProver.interpolate_check(63763)[8]
                begin InterpProver.interpolate_simplify(63764)[9]
                  begin InterpProver.interpolate_quick(63873)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(63882)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(63883)[12]
                        begin CsisatInterface.interpolate_csisat_log(63884)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_125_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0) <= v_sep_bcopy_aux_1170_sep_125_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_125_sep_0 & (1 + v_sep_bcopy_aux_1170_sep_125_sep_0) <= (1 + v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0))
                          begin CsisatInterface.interpolate_csisat_raw(63885)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(63885)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1170_sep_125_sep_0 + 2*v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(63884)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1170_sep_125_sep_0 + 2*v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1170_sep_125_sep_0 + 2*v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(63883)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(63882)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(63873)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(63764)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(63763)[8] (0.001999 sec.)
              output: ((1 + <<bcopy_aux_1170@125:2>@154:0>) <= <bcopy_aux_1170@125:0>)
            end InterpProver.interpolate_log(63762)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(63761)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(63760)[5] (0.001999 sec.)
        output:
          P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int) =
          ((1 + <<bcopy_aux_1170@125:2>@154:0>) <= <bcopy_aux_1170@125:0>)
      end ApronInterface.convex_hull_interpolate(63759)[4] (0.002999 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
          ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
        |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                     <<bcopy_aux_1170@125:1>@128:0>:int,
                                                     <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
        
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:1>@128:0>:int)
        
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) =
        ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
      upper bounds:
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](var279:int,var280:int,var281:int) = true
      begin GenHcSolver.classify_pids(65966)[4]
        output:
          [<<<bcopy_aux_1170@125:1>@128:1>@144:0>]
      end GenHcSolver.classify_pids(65966)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
           ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(65969)[4]
        lb:((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
            ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
             ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
        nub:false
        lb':((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
             ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
              ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
        nub':false
        begin InterpProver.interpolate(65970)[5]
          begin InterpProver.interpolate_fresh(65971)[6]
            begin InterpProver.interpolate_log(65972)[7]
              input1: ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
                       ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
                        ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
              input2: false
              begin InterpProver.interpolate_check(65973)[8]
                begin InterpProver.interpolate_simplify(65974)[9]
                  begin InterpProver.interpolate_quick(66067)[10]
                    
                  end InterpProver.interpolate_quick(66067)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(65974)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(65973)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(65972)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(65971)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(65970)[5] (0.002000 sec.)
        output:
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(65969)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:1>@128:0>:int)
        
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) =
        ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
      upper bounds:
        P[<<bcopy_aux_1170@125:1>@128:0>](var282:int,var283:int) = true
      begin GenHcSolver.classify_pids(67197)[4]
        output:
          [<<bcopy_aux_1170@125:1>@128:0>]
      end GenHcSolver.classify_pids(67197)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(67200)[4]
        lb:((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
            ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        nub:false
        lb':((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
             ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        nub':false
        begin InterpProver.interpolate(67201)[5]
          begin InterpProver.interpolate_fresh(67202)[6]
            begin InterpProver.interpolate_log(67203)[7]
              input1: ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
                       ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
              input2: false
              begin InterpProver.interpolate_check(67204)[8]
                begin InterpProver.interpolate_simplify(67205)[9]
                  begin InterpProver.interpolate_quick(67276)[10]
                    
                  end InterpProver.interpolate_quick(67276)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(67205)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(67204)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(67203)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(67202)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(67201)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) = true
      end ApronInterface.convex_hull_interpolate(67200)[4] (0.001000 sec.)
      Horn clauses:
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
      upper bounds:
        P[<bcopy_aux_1170@125:3>](var284:int,var285:int) = true
      begin GenHcSolver.classify_pids(67727)[4]
        output:
          [<bcopy_aux_1170@125:3>]
      end GenHcSolver.classify_pids(67727)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(67730)[4]
        lb:((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        nub:false
        lb':((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        nub':false
        begin InterpProver.interpolate(67731)[5]
          begin InterpProver.interpolate_fresh(67732)[6]
            begin InterpProver.interpolate_log(67733)[7]
              input1: ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
              input2: false
              begin InterpProver.interpolate_check(67734)[8]
                begin InterpProver.interpolate_simplify(67735)[9]
                  begin InterpProver.interpolate_quick(67767)[10]
                    
                  end InterpProver.interpolate_quick(67767)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(67735)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(67734)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(67733)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(67732)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(67731)[5] (0.001000 sec.)
        output:
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) = true
      end ApronInterface.convex_hull_interpolate(67730)[4] (0.001000 sec.)
      begin HcSolver.check_validity(67863)[4]
        input:
          P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
          ((0 <= <k_make_array_u_1206@159:0>) &&
           ((var273 > 0) && ((var273 < (1 + <k_make_array_u_1206@159:0>)) && <fail_1511@162:0>)))
          |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
          
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
          (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:2>@154:0>:int)
          
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
            ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
          |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                       <<bcopy_aux_1170@125:1>@128:0>:int,
                                                       <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
          
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:1>@128:0>:int)
          
           ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
          |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(67863)[4] (0.003000 sec.)
      solution:
        P[<fail_1511@162:0>](<fail_1511@162:0>:bool) = false
        P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int) =
        ((1 + <<bcopy_aux_1170@125:2>@154:0>) <= <bcopy_aux_1170@125:0>)
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
        true
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) = true
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) = true
    end GenHcSolver.solve(57133)[3] (0.063990 sec.)
    begin GenHcSolver.solve(68360)[3]
      Horn clauses:
        P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
        
        P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
        ((0 <= <k_make_array_u_1206@159:0>) &&
         ((var273 > 0) && ((var273 < (1 + <k_make_array_u_1206@159:0>)) && <fail_1511@162:0>)))
        |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
        
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
        (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:2>@154:0>:int)
        
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
          ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
        |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                     <<bcopy_aux_1170@125:1>@128:0>:int,
                                                     <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
        
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:1>@128:0>:int)
        
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) =
        ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
        P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int) =
        ((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
         ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
        P[<fail_1511@162:0>](<fail_1511@162:0>:bool) = false
      upper bounds:
        P[<fail_1511@162:0>](var287:bool) = true
      begin GenHcSolver.classify_pids(71178)[4]
        output:
          [<fail_1511@162:0>]
      end GenHcSolver.classify_pids(71178)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(71181)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(71184)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(71184)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(71189)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(71189)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(71192)[5]
          begin InterpProver.interpolate_fresh(71193)[6]
            begin InterpProver.interpolate_log(71194)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(71195)[8]
                begin InterpProver.interpolate_simplify(71196)[9]
                  begin InterpProver.interpolate_quick(71211)[10]
                    
                  end InterpProver.interpolate_quick(71211)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(71215)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(71215)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(71196)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(71195)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(71194)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(71193)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(71192)[5] (0.000000 sec.)
        output:
          P[<fail_1511@162:0>](<fail_1511@162:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(71181)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
        ((var273 < (1 + <k_make_array_u_1206@159:0>)) && ((var273 > 0) && (0 <= <k_make_array_u_1206@159:0>))) |- bot
        
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
        (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:2>@154:0>:int)
        
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
          ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
        |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                     <<bcopy_aux_1170@125:1>@128:0>:int,
                                                     <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
        
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:1>@128:0>:int)
        
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) =
        ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
        P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int) =
        ((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
         ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
      upper bounds:
        P[<<bcopy_aux_1170@125:2>@154:0>](var288:int,var289:int) =
        ((var288 >= (1 + var289)) || ((var288 <= 0) || (0 > var289)))
      begin GenHcSolver.classify_pids(75002)[4]
        output:
          [<<bcopy_aux_1170@125:2>@154:0>]
      end GenHcSolver.classify_pids(75002)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
          ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
      nub:(not
             ((<bcopy_aux_1170@125:0> >= (1 + <<bcopy_aux_1170@125:2>@154:0>)) ||
              ((<bcopy_aux_1170@125:0> <= 0) || (0 > <<bcopy_aux_1170@125:2>@154:0>))))
      begin ApronInterface.convex_hull_interpolate(75005)[4]
        lb:((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
            ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
        nub:(not
               ((<bcopy_aux_1170@125:0> >= (1 + <<bcopy_aux_1170@125:2>@154:0>)) ||
                ((<bcopy_aux_1170@125:0> <= 0) || (0 > <<bcopy_aux_1170@125:2>@154:0>))))
        begin ExtFormula.Formula.case_analysis_boolean(75030)[5]
          ts: ((<<bcopy_aux_1170@125:2>@154:0> = 0) &&
               ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(75030)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(75065)[5]
          ts: ((<bcopy_aux_1170@125:0> < (1 + <<bcopy_aux_1170@125:2>@154:0>)) &&
               ((<bcopy_aux_1170@125:0> > 0) && (0 <= <<bcopy_aux_1170@125:2>@154:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(75065)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1170@125:2>@154:0> = 0) && ((-1 + <bcopy_aux_1170@125:0>) >= 0))
        nub':(((<<bcopy_aux_1170@125:2>@154:0> + (-1 * <bcopy_aux_1170@125:0>)) >= 0) &&
              ((-1 + <bcopy_aux_1170@125:0>) >= 0))
        begin InterpProver.interpolate(75073)[5]
          begin InterpProver.interpolate_fresh(75074)[6]
            begin InterpProver.interpolate_log(75075)[7]
              input1: ((<<bcopy_aux_1170@125:2>@154:0> = 0) && ((-1 + <bcopy_aux_1170@125:0>) >= 0))
              input2: (((<<bcopy_aux_1170@125:2>@154:0> + (-1 * <bcopy_aux_1170@125:0>)) >= 0) &&
                       ((-1 + <bcopy_aux_1170@125:0>) >= 0))
              begin InterpProver.interpolate_check(75076)[8]
                begin InterpProver.interpolate_simplify(75077)[9]
                  begin InterpProver.interpolate_quick(75140)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(75149)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(75150)[12]
                        begin CsisatInterface.interpolate_csisat_log(75151)[13]
                          input1: (0 = v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0 & 1 <= v_sep_bcopy_aux_1170_sep_125_sep_0)
                          input2: (1 <= v_sep_bcopy_aux_1170_sep_125_sep_0 & v_sep_bcopy_aux_1170_sep_125_sep_0 <= v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(75152)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(75152)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1170_sep_125_sep_0 + 2*v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(75151)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1170_sep_125_sep_0 + 2*v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1170_sep_125_sep_0 + 2*v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(75150)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(75149)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(75140)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(75077)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(75076)[8] (0.001000 sec.)
              output: ((1 + <<bcopy_aux_1170@125:2>@154:0>) <= <bcopy_aux_1170@125:0>)
            end InterpProver.interpolate_log(75075)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(75074)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(75073)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int) =
          ((1 + <<bcopy_aux_1170@125:2>@154:0>) <= <bcopy_aux_1170@125:0>)
      end ApronInterface.convex_hull_interpolate(75005)[4] (0.003000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
          ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
        |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                     <<bcopy_aux_1170@125:1>@128:0>:int,
                                                     <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
        
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:1>@128:0>:int)
        
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) =
        ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
        ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
      upper bounds:
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](var290:int,var291:int,var292:int) = true
      begin GenHcSolver.classify_pids(77228)[4]
        output:
          [<<<bcopy_aux_1170@125:1>@128:1>@144:0>]
      end GenHcSolver.classify_pids(77228)[4] (0.000000 sec.)
      lb:((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
           ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
      nub:false
      begin ApronInterface.convex_hull_interpolate(77231)[4]
        lb:((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
            ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
             ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(77267)[5]
          ts: ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
               ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
                ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0))))
          
        end ExtFormula.Formula.case_analysis_boolean(77267)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(77277)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(77277)[5] (0.000000 sec.)
        lb':((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
             ((<<bcopy_aux_1170@125:1>@128:0> = 0) && ((-1 + <bcopy_aux_1170@125:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(77280)[5]
          begin InterpProver.interpolate_fresh(77281)[6]
            begin InterpProver.interpolate_log(77282)[7]
              input1: ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
                       ((<<bcopy_aux_1170@125:1>@128:0> = 0) && ((-1 + <bcopy_aux_1170@125:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(77283)[8]
                begin InterpProver.interpolate_simplify(77284)[9]
                  begin InterpProver.interpolate_quick(77342)[10]
                    
                  end InterpProver.interpolate_quick(77342)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(77284)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(77283)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(77282)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(77281)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(77280)[5] (0.001000 sec.)
        output:
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(77231)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
        (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
        |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                             <<bcopy_aux_1170@125:1>@128:0>:int)
        
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) =
        ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
         ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
      upper bounds:
        P[<<bcopy_aux_1170@125:1>@128:0>](var293:int,var294:int) = true
      begin GenHcSolver.classify_pids(78474)[4]
        output:
          [<<bcopy_aux_1170@125:1>@128:0>]
      end GenHcSolver.classify_pids(78474)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(78477)[4]
        lb:((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
            ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(78502)[5]
          ts: ((<<bcopy_aux_1170@125:1>@128:0> = 0) &&
               ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) && (<bcopy_aux_1170@125:0> > 0)))
          
        end ExtFormula.Formula.case_analysis_boolean(78502)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(78511)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(78511)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1170@125:1>@128:0> = 0) && ((-1 + <bcopy_aux_1170@125:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(78514)[5]
          begin InterpProver.interpolate_fresh(78515)[6]
            begin InterpProver.interpolate_log(78516)[7]
              input1: ((<<bcopy_aux_1170@125:1>@128:0> = 0) && ((-1 + <bcopy_aux_1170@125:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(78517)[8]
                begin InterpProver.interpolate_simplify(78518)[9]
                  begin InterpProver.interpolate_quick(78558)[10]
                    
                  end InterpProver.interpolate_quick(78558)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(78518)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(78517)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(78516)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(78515)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(78514)[5] (0.000000 sec.)
        output:
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) = true
      end ApronInterface.convex_hull_interpolate(78477)[4] (0.001000 sec.)
      Horn clauses:
         ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
      lower bounds:
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) =
        ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
      upper bounds:
        P[<bcopy_aux_1170@125:3>](var295:int,var296:int) = true
      begin GenHcSolver.classify_pids(79011)[4]
        output:
          [<bcopy_aux_1170@125:3>]
      end GenHcSolver.classify_pids(79011)[4] (0.000000 sec.)
      lb:((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
      nub:false
      begin ApronInterface.convex_hull_interpolate(79014)[4]
        lb:((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(79024)[5]
          ts: ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
          
        end ExtFormula.Formula.case_analysis_boolean(79024)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(79031)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(79031)[5] (0.000000 sec.)
        lb':((<bcopy_aux_1170@125:3> = 0) && ((-1 + <bcopy_aux_1170@125:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(79034)[5]
          begin InterpProver.interpolate_fresh(79035)[6]
            begin InterpProver.interpolate_log(79036)[7]
              input1: ((<bcopy_aux_1170@125:3> = 0) && ((-1 + <bcopy_aux_1170@125:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(79037)[8]
                begin InterpProver.interpolate_simplify(79038)[9]
                  begin InterpProver.interpolate_quick(79078)[10]
                    
                  end InterpProver.interpolate_quick(79078)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(79038)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(79037)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(79036)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(79035)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(79034)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) = true
      end ApronInterface.convex_hull_interpolate(79014)[4] (0.001000 sec.)
      begin HcSolver.check_validity(79176)[4]
        input:
          P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
          ((0 <= <k_make_array_u_1206@159:0>) &&
           ((var273 > 0) && ((var273 < (1 + <k_make_array_u_1206@159:0>)) && <fail_1511@162:0>)))
          |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
          
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
          (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:2>@154:0>:int)
          
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
            ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
          |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                       <<bcopy_aux_1170@125:1>@128:0>:int,
                                                       <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
          
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:1>@128:0>:int)
          
           ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
          |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(79176)[4] (0.003000 sec.)
      solution:
        P[<fail_1511@162:0>](<fail_1511@162:0>:bool) = false
        P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int) =
        ((1 + <<bcopy_aux_1170@125:2>@154:0>) <= <bcopy_aux_1170@125:0>)
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int,<<<bcopy_aux_1170@125:1>@128:1>@144:0>:int) =
        true
        P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int) = true
        P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int) = true
    end GenHcSolver.solve(68360)[3] (0.065990 sec.)
    begin YhornInterface.solve(79673)[3]
      begin HcSolver.solve_ub(79674)[4]
        encoded:
          P[<fail_1511@162:0>](<fail_1511@162:0>:int)|- bot
          
          P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
          ((0 <= <k_make_array_u_1206@159:0>) &&
           ((var273 > 0) && ((var273 < (1 + <k_make_array_u_1206@159:0>)) && (<fail_1511@162:0> = 1))))
          |- P[<fail_1511@162:0>](<fail_1511@162:0>:int)
          
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
          (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:2>@154:0>:int)
          
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
            ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
          |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                       <<bcopy_aux_1170@125:1>@128:0>:int,
                                                       <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
          
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:1>@128:0>:int)
          
           ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
          |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
        input to Yhorn:
          P[<fail_1511@162:0>](<fail_1511@162:0>:int)|- bot
          
          P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
          ((var273 < (1 + <k_make_array_u_1206@159:0>)) &&
           ((var273 > 0) && ((0 <= <k_make_array_u_1206@159:0>) && (<fail_1511@162:0> = 1))))
          |- P[<fail_1511@162:0>](<fail_1511@162:0>:int)
          
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
          (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:2>@154:0>:int)
          
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          ((<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>) &&
           ((<bcopy_aux_1170@125:0> > 0) &&
            ((0 <= <<bcopy_aux_1170@125:1>@128:0>) && (<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0))))
          |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                       <<bcopy_aux_1170@125:1>@128:0>:int,
                                                       <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
          
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:1>@128:0>:int)
          
           ((<bcopy_aux_1170@125:0> > 0) && (<bcopy_aux_1170@125:3> = 0))
          |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1511_sep_162_sep_0($240)) -> 1=0.
(($240-1=0) & (-$241<=0) & ($242>0) & (-$241+$242-1<0)) & (v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0($242,$241)) -> v_sep_fail_1511_sep_162_sep_0($240).
($243-$244<0) & (v_sep_bcopy_aux_1170_sep_125_sep_3($244,$243)) & (v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0($244,$243,$245)) -> v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0($244,$243).
(($246=0) & (-$247<=0) & ($244>0) & (-$244+$247<0)) & (v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0($244,$247)) -> v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0($244,$247,$246).
(-$244+$247<0) & (v_sep_bcopy_aux_1170_sep_125_sep_3($244,$247)) -> v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0($244,$247).
($248=0) & ($244>0) -> v_sep_bcopy_aux_1170_sep_125_sep_3($244,$248).


v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
.......
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
...
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
.....
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
......
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0: X
v_sep_bcopy_aux_1170_sep_125_sep_3: X
v_sep_fail_1511_sep_162_sep_0: X
.......(0=0) & (v_sep_fail_1511_sep_162_sep_0($240)) -> 1=0.
(($240-1=0) & (-$241<=0) & ($242>0) & (-$241+$242-1<0)) & (v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0($242,$241)) -> v_sep_fail_1511_sep_162_sep_0($240).
($243-$244<0) & (v_sep_bcopy_aux_1170_sep_125_sep_3($244,$243)) & (v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0($244,$243,$245)) -> v_sep_bcopy_aux_1170_sep_125_sep_2_sep_154_sep_0($244,$243).
(($246=0) & (-$247<=0) & ($244>0) & (-$244+$247<0)) & (v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0($244,$247)) -> v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_1_sep_144_sep_0($244,$247,$246).
(-$244+$247<0) & (v_sep_bcopy_aux_1170_sep_125_sep_3($244,$247)) -> v_sep_bcopy_aux_1170_sep_125_sep_1_sep_128_sep_0($244,$247).
($248=0) & ($244>0) -> v_sep_bcopy_aux_1170_sep_125_sep_3($244,$248).

        solution:
          P[<<bcopy_aux_1170@125:1>@128:0>]($269:int,$271:int) = ((1 + $271) <= $269)
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>]($262:int,$264:int,$266:int) = ((1 + $264) <= $262)
          P[<<bcopy_aux_1170@125:2>@154:0>]($252:int,$254:int) = ((1 + $254) <= $252)
          P[<bcopy_aux_1170@125:3>]($257:int,$259:int) = ((1 + $259) <= $257)
          P[<fail_1511@162:0>]($249:bool) = false
        
      end HcSolver.solve_ub(79674)[4] (0.020997 sec.)
      begin HcSolver.check_validity(80052)[4]
        input:
          P[<fail_1511@162:0>](<fail_1511@162:0>:bool)|- bot
          
          P[<<bcopy_aux_1170@125:2>@154:0>](var273:int,<k_make_array_u_1206@159:0>:int),
          ((0 <= <k_make_array_u_1206@159:0>) &&
           ((var273 > 0) && ((var273 < (1 + <k_make_array_u_1206@159:0>)) && <fail_1511@162:0>)))
          |- P[<fail_1511@162:0>](<fail_1511@162:0>:bool)
          
          P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int,var274:int),
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:2>@154:0>:int),
          (<<bcopy_aux_1170@125:2>@154:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:2>@154:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:2>@154:0>:int)
          
          P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          ((<<<bcopy_aux_1170@125:1>@128:1>@144:0> = 0) &&
           ((0 <= <<bcopy_aux_1170@125:1>@128:0>) &&
            ((<bcopy_aux_1170@125:0> > 0) && (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>))))
          |- P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>](<bcopy_aux_1170@125:0>:int,
                                                       <<bcopy_aux_1170@125:1>@128:0>:int,
                                                       <<<bcopy_aux_1170@125:1>@128:1>@144:0>:int)
          
          P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<<bcopy_aux_1170@125:1>@128:0>:int),
          (<<bcopy_aux_1170@125:1>@128:0> < <bcopy_aux_1170@125:0>)
          |- P[<<bcopy_aux_1170@125:1>@128:0>](<bcopy_aux_1170@125:0>:int,
                                               <<bcopy_aux_1170@125:1>@128:0>:int)
          
           ((<bcopy_aux_1170@125:3> = 0) && (<bcopy_aux_1170@125:0> > 0))
          |- P[<bcopy_aux_1170@125:3>](<bcopy_aux_1170@125:0>:int,<bcopy_aux_1170@125:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(80052)[4] (0.002999 sec.)
      solution:
        P[<<bcopy_aux_1170@125:1>@128:0>]($269:int,$271:int) = ((1 + $271) <= $269)
        P[<<<bcopy_aux_1170@125:1>@128:1>@144:0>]($262:int,$264:int,$266:int) = ((1 + $264) <= $262)
        P[<<bcopy_aux_1170@125:2>@154:0>]($252:int,$254:int) = ((1 + $254) <= $252)
        P[<bcopy_aux_1170@125:3>]($257:int,$259:int) = ((1 + $259) <= $257)
        P[<fail_1511@162:0>]($249:bool) = false
    end YhornInterface.solve(79673)[3] (0.023996 sec.)
    
  end RefTypeInfer.infer_etrs(52391)[2] (0.346946 sec.)
  refinement types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1217: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1506: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1171: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1206: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1511: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1510: var326:int -> var325:int -> var324:unit -> X
    f_bcopy_aux_1507: var341:int ->
                      var340:int ->
                      var339:int ->
                      (var338:int -> (var337:int -> X) -> X) ->
                      (var334:unit -> X) -> (var332:int -> (var331:int -> X) -> X) -> var328:unit -> X
    f_update_1505: var348:int -> var347:int -> var346:int -> (var345:unit -> X) -> var343:int -> X
  abstraction types:
    main_1504: X
    f_1508: v1:int -> X
    f_1509: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    k_main_1426: v1:int -> v2:int -> (v3:unit -> X) -> v5:bool -> X
    bcopy_aux_1170: v1:int ->
                    (v2:int -> (v3:int -> X) -> X) ->
                    (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: var349:int -> var350:int -> (var351:int -> X) -> X
    k_make_array_u_1206: var354:int -> var355:int -> (var356:int -> X) -> var358:bool -> X
    k_make_array_u_1217: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_bcopy_aux_1506: v1:int ->
                      v2:int ->
                      (v3:int -> (v4:int -> X) -> X) ->
                      (v7:unit -> X) -> (v9:int -> (v10:int -> X) -> X) -> v13:int -> X
    update_1171: v1:int -> v2:int -> (v3:int -> (v4:int -> X) -> X) -> v7:int -> (v8:unit -> X) -> X
    fail_1511: v1:bool -> (v2:unit -> X) -> X
    f_1510: var326:int -> var325:int -> var324:unit -> X
    f_bcopy_aux_1507: var341:int ->
                      var340:int ->
                      var339:int ->
                      (var338:int -> (var337:int -> X) -> X) ->
                      (var334:unit -> X) -> (var332:int -> (var331:int -> X) -> X) -> var328:unit -> X
    f_update_1505: var348:int -> var347:int -> var346:int -> (var345:unit -> X) -> var343:int -> X
  
end AbsTypeInfer.refine(52390)[1] (0.353946 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1504
  main_1504 -> (rand_int f_1508)
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (i_1042 >= m_1039) -> (k_bcopy_aux_1313 ())
  bcopy_aux_1170 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1313 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040))
  f_1508 x_1462 -> (rand_int (f_1509 x_1462))
  f_1509 x_1462 x_1475 -> (main_1043 x_1462 x_1475 (f_1510 x_1462 x_1475))
  f_1510 x_1462 x_1475 x_1459 -> end
  f_bcopy_aux_1506 i_1042 m_1039 des_1041 k_bcopy_aux_1313 src_1040 x_1345 ->
      (update_1171 i_1042 m_1039 des_1041 x_1345
        (f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040))
  f_bcopy_aux_1507 i_1042 m_1039 x_1345 des_1041 k_bcopy_aux_1313 src_1040 x_1316 ->
      (bcopy_aux_1170 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1313)
  f_update_1505 i_1034 n_1035 x_1037 k_update_1253 x_1256 -> (k_update_1253 ())
  fail_1511 b k -> {fail} => (k ())
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when b_1456 ->
      (bcopy_aux_1170 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1391)
  k_main_1426 m_1045 n_1044 k_main_1391 b_1456 when (not b_1456) -> (k_main_1391 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when b_1218 ->
      (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 ())
  k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 b_1218 when (not b_1218) ->
      (fail_1511 true (k_make_array_u_1217 i_1032 n_1031 k_make_array_1200))
  k_make_array_u_1217 i_1032 n_1031 k_make_array_1200 x_1203 -> (k_make_array_1200 0)
  main_1043 n_1044 m_1045 k_main_1391 when (n_1044 <= m_1045) -> (k_main_1426 m_1045 n_1044 k_main_1391 (n_1044 > 0))
  main_1043 n_1044 m_1045 k_main_1391 when (not (n_1044 <= m_1045)) -> (k_main_1426 m_1045 n_1044 k_main_1391 false)
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (0 <= i_1032) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1200 when (not (0 <= i_1032)) ->
      (k_make_array_u_1206 i_1032 n_1031 k_make_array_1200 false)
  update_1171 i_1034 n_1035 des_1036 x_1037 k_update_1253 ->
      (des_1036 i_1034 (f_update_1505 i_1034 n_1035 x_1037 k_update_1253))
Types:
  main_1504 : X
  bcopy_aux_1170 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1511 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy_aux: (x_1:int ->
                  (({x_8:int | x_8 >= 0 && x_1 >= x_8 + 1} -> int) ->
                       (({x_6:int | x_6 >= 0 && x_1 >= x_6 + 1} -> int) -> ({x_4:int | x_4 >= 0} -> unit))))

cycles: 4
total: 1.551 sec
  abst: 0.043 sec
  mc: 0.056 sec
  refine: 1.114 sec
    exparam: 0.422 sec
