MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi bcopy3.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 des_1034 i_1035 x_1036 j_1037 = if i_1035 = j_1037 then
                                                   x_1036
                                                 else
                                                   des_1034 i_1035 
 in
 let rec bcopy_aux_1038 m_1039 src_1040 des_1041 i_1042 =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1132 = update_1033 des_1041 i_1042 (src_1040 i_1042) 
     in
       bcopy_aux_1038 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 n_1044 m_1045 =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 then
       bcopy_aux_1038 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let update_1033 des_1034 i_1035 x_1036 j_1037 = if i_1035 = j_1037 then
                                                   x_1036
                                                 else
                                                   des_1034 i_1035 
 in
 let rec bcopy_aux_1038 m_1039 src_1040 des_1041 i_1042 =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1132 = update_1033 des_1041 i_1042 (src_1040 i_1042) 
     in
       bcopy_aux_1038 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 n_1044 m_1045 =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 then
       bcopy_aux_1038 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
 let main_1163 = let arg1_1161 = rand_int () 
                 in
                 let arg2_1162 = rand_int () 
                 in
                   main_1043 arg1_1161 arg2_1162 
 in
   ()

copy_poly::
 let make_array_1030 (n_1031:int) (i_1032:int) =
   let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                  ()
                else
                  {fail} () 
   in
     0 
 in
 let update_1165 (des_1034:(int -> int)) (i_1035:int) (x_1036:int) (j_1037:int) =
   if i_1035 = j_1037 then
     x_1036
   else
     des_1034 i_1035 
 in
 let rec bcopy_aux_1164 (m_1039:int) (src_1040:(int -> int)) (des_1041:(
   int -> int)) (i_1042:int) =
   if i_1042 >= m_1039 then
     ()
   else
     let u_1132 = update_1165 des_1041 i_1042 (src_1040 i_1042) 
     in
       bcopy_aux_1164 m_1039 src_1040 des_1041 (i_1042 + 1) 
 in
 let main_1043 (n_1044:int) (m_1045:int) =
   let array1_1046 = make_array_1030 n_1044 
   in
   let array2_1047 = make_array_1030 m_1045 
   in
     if n_1044 <= m_1045 then
       bcopy_aux_1164 n_1044 array1_1046 array2_1047 0
     else
       () 
 in
 let main_1163 = let arg1_1161 = rand_int () 
                 in
                 let arg2_1162 = rand_int () 
                 in
                   main_1043 arg1_1161 arg2_1162 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1193:(int -> X)) =
   let k_make_array_u_1210 (x_1196:unit) = k_make_array_1193 0 
   in
   let k_make_array_u_1199 (b_1211:bool) =
     if b_1211 then
       k_make_array_u_1210 ()
     else
       {|fail|} () k_make_array_u_1210 
   in
     if 0 <= i_1032 then
       k_make_array_u_1199 (i_1032 < n_1031)
     else
       k_make_array_u_1199 false 
 in
 let update_1165
   (des_1034:(int -> ((int -> X) -> X))) (i_1035:int) (x_1036:int) (j_1037:int) (k_update_1246:(
   int -> X)) = if i_1035 = j_1037 then
                  k_update_1246 x_1036
                else
                  des_1034 i_1035 k_update_1246 
 in
 let rec bcopy_aux_1164
   (m_1039:int) (src_1040:(int -> ((int -> X) -> X))) (des_1041:(int -> ((int -> X) -> X))) (i_1042:int) (k_bcopy_aux_1307:(
   unit -> X)) =
   if i_1042 >= m_1039 then
     k_bcopy_aux_1307 ()
   else
     src_1040 i_1042 (fun x_1352 -> bcopy_aux_1164 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1307) 
 in
 let main_1043 (n_1044:int) (m_1045:int) (k_main_1398:(unit -> X)) =
   if n_1044 <= m_1045 then
     bcopy_aux_1164 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1398
   else
     k_main_1398 () 
 in
   rand_int_cps () (fun x_1465 -> rand_int_cps () (fun x_1478 -> main_1043 x_1465 x_1478 (fun x_1462 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1507
  main_1507 -> (rand_int f_1509)
  bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 when (i_1042 >= m_1039) -> (k_bcopy_aux_1307 ())
  bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1508 i_1042 m_1039 des_1041 k_bcopy_aux_1307 src_1040))
  f_1509 x_1465 -> (rand_int (f_1510 x_1465))
  f_1510 x_1465 x_1478 -> (main_1043 x_1465 x_1478 (f_1511 x_1465 x_1478))
  f_1511 x_1465 x_1478 x_1462 -> end
  f_bcopy_aux_1508 i_1042 m_1039 des_1041 k_bcopy_aux_1307 src_1040 x_1352 ->
      (bcopy_aux_1164 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1307)
  fail_1512 b k -> {fail} => (k ())
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 when b_1211 ->
      (k_make_array_u_1210 i_1032 n_1031 k_make_array_1193 ())
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 when (not b_1211) ->
      (fail_1512 true (k_make_array_u_1210 i_1032 n_1031 k_make_array_1193))
  k_make_array_u_1210 i_1032 n_1031 k_make_array_1193 x_1196 -> (k_make_array_1193 0)
  main_1043 n_1044 m_1045 k_main_1398 when (n_1044 <= m_1045) ->
      (bcopy_aux_1164 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1398)
  main_1043 n_1044 m_1045 k_main_1398 when (not (n_1044 <= m_1045)) -> (k_main_1398 ())
  make_array_1030 n_1031 i_1032 k_make_array_1193 when (0 <= i_1032) ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1193 when (not (0 <= i_1032)) ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 false)
  update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 when (i_1035 = j_1037) -> (k_update_1246 x_1036)
  update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 when (not (i_1035 = j_1037)) ->
      (des_1034 i_1035 k_update_1246)
Types:
  main_1507 : X
  bcopy_aux_1164 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X)
  fail_1512 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1507 ... --> 
  f_1509 ... --> 
  f_1510 ... --> 
  main_1043 [1/2] ... --> 
  bcopy_aux_1164 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1199 [2/2] ... --> 
  fail_1512 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(186)[1]
  program:
    main_1507  | true = ((Random.int 0) f_1509)
    bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1307 ())
    bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1508 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1307
                                                          src_1040))
    f_1509 x_1465 | true = ((Random.int 0) (f_1510 x_1465))
    f_1510 x_1465 x_1478 | true = (main_1043 x_1465
                                             x_1478
                                             (f_1511 x_1465
                                                     x_1478))
    f_1511 x_1465 x_1478 x_1462 | true = end
    f_bcopy_aux_1508 i_1042 m_1039 des_1041 k_bcopy_aux_1307 src_1040 x_1352 | true = (
    bcopy_aux_1164 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1307)
    fail_1512 b k | true = (fail ())
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 | b_1211 = (
    k_make_array_u_1210 i_1032
                        n_1031
                        k_make_array_1193
                        ())
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 | (not b_1211) = (
    fail_1512 true
              (k_make_array_u_1210 i_1032
                                   n_1031
                                   k_make_array_1193))
    k_make_array_u_1210 i_1032 n_1031 k_make_array_1193 x_1196 | true = (
    k_make_array_1193 0)
    main_1043 n_1044 m_1045 k_main_1398 | (n_1044 <= m_1045) = (bcopy_aux_1164
                                                                  n_1044
                                                                  (make_array_1030 n_1044)
                                                                  (make_array_1030 m_1045)
                                                                  0
                                                                  k_main_1398)
    main_1043 n_1044 m_1045 k_main_1398 | (not (n_1044 <= m_1045)) = (
    k_main_1398 ())
    make_array_1030 n_1031 i_1032 k_make_array_1193 | (0 <= i_1032) = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1193
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1193 | (not (0 <= i_1032)) = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1193
                        false)
    update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 | (i_1035 = j_1037) = (
    k_update_1246 x_1036)
    update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 | (not (i_1035 = j_1037)) = (
    des_1034 i_1035
             k_update_1246)
    main_1507:X
    bcopy_aux_1164:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1509:int -> X
    f_1510:int -> int -> X
    f_1511:int -> int -> unit -> X
    f_bcopy_aux_1508:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    fail_1512:bool -> (unit -> X) -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1210:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1165:(int -> (int -> X) -> X) -> int -> int -> int -> (int -> X) -> X
  inlined functions: f_1509,f_1510,f_1511,f_bcopy_aux_1508,k_make_array_u_1199,k_make_array_u_1210,main_1043,make_array_1030,update_1165
  counterexample: 0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1509@4:0> = var2)
     [true.nop((<f_1510@7:0> = <f_1509@4:0>) && (<f_1510@7:1> = var3))
      [true.((<main_1043@9:0> = <f_1510@7:0>) && (<main_1043@9:1> = <f_1510@7:1>))
       [(<main_1043@9:0> <= <main_1043@9:1>).((<bcopy_aux_1164@12:0> = <main_1043@9:0>) && (<bcopy_aux_1164@12:3> = 0))
        [(not (<bcopy_aux_1164@12:3> >= <bcopy_aux_1164@12:0>)).(<<bcopy_aux_1164@12:1>@15:0> = <bcopy_aux_1164@12:3>)
         [true.((<make_array_1030@17:0> = <main_1043@9:0>) && (<make_array_1030@17:1> = <<bcopy_aux_1164@12:1>@15:0>))
          [(not (0 <= <make_array_1030@17:1>)).
           ((<k_make_array_u_1199@20:0> = <make_array_1030@17:1>) &&
            ((<k_make_array_u_1199@20:1> = <make_array_1030@17:0>) && (<k_make_array_u_1199@20:3> = false)))
           [(not <k_make_array_u_1199@20:3>).(<fail_1512@23:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(187)[2]
    horn clauses:
      P[<fail_1512@23:0>](<fail_1512@23:0>:bool)|- bot
      
      P[<k_make_array_u_1199@20:3>](<k_make_array_u_1199@20:0>:int,<k_make_array_u_1199@20:1>:int,false:bool),
      <fail_1512@23:0> |- P[<fail_1512@23:0>](<fail_1512@23:0>:bool)
      
      P[<make_array_1030@17:1>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
      ((0 > <k_make_array_u_1199@20:0>) && (not <k_make_array_u_1199@20:3>))
      |- P[<k_make_array_u_1199@20:3>](<k_make_array_u_1199@20:0>:int,
                                       <k_make_array_u_1199@20:1>:int,
                                       <k_make_array_u_1199@20:3>:bool)
      
      P[<main_1043@9:1>](<make_array_1030@17:0>:int,<main_1043@9:1>:int),
      P[<<bcopy_aux_1164@12:1>@15:0>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int),
      (<make_array_1030@17:0> <= <main_1043@9:1>)
      |- P[<make_array_1030@17:1>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int)
      
      P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
      (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
      |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int)
      
      P[<main_1043@9:1>](<bcopy_aux_1164@12:0>:int,<main_1043@9:1>:int),
      ((<bcopy_aux_1164@12:3> = 0) && (<bcopy_aux_1164@12:0> <= <main_1043@9:1>))
      |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int)
      
      P[<f_1510@7:1>](<main_1043@9:0>:int,<main_1043@9:1>:int)|- P[<main_1043@9:1>](
      <main_1043@9:0>:int,<main_1043@9:1>:int)
      
      P[<f_1509@4:0>](<f_1510@7:0>:int)|- P[<f_1510@7:1>](<f_1510@7:0>:int,
                                                          <f_1510@7:1>:int)
      
      |- P[<f_1509@4:0>](<f_1509@4:0>:int)
    call trees:
      <main_1507@1>
        <f_1509@4>
          <f_1510@7>
            <main_1043@9>
              <bcopy_aux_1164@12>
              </<bcopy_aux_1164@12:1>@15>
              <make_array_1030@17>
                <k_make_array_u_1199@20>
                  <fail_1512@23>
    inlined horn clauses:
      P[<fail_1512@23:0>](<fail_1512@23:0>:bool)|- bot
      
      P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
      ((0 > <k_make_array_u_1199@20:0>) && <fail_1512@23:0>) |- P[<fail_1512@23:0>](
      <fail_1512@23:0>:bool)
      
      P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
      (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
      |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int)
      
       (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                               <bcopy_aux_1164@12:3>:int)
    begin ParamSubstInfer.infer(1207)[3]
      
    end ParamSubstInfer.infer(1207)[3] (0.026996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1209)[3]
      
    end RefTypeInfer.elim_coeffs(1209)[3] (0.000000 sec.)
    begin GenHcSolver.solve(1334)[3]
      Horn clauses:
        P[<fail_1512@23:0>](<fail_1512@23:0>:bool)|- bot
        
        P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
        ((0 > <k_make_array_u_1199@20:0>) && <fail_1512@23:0>) |- P[<fail_1512@23:0>](
        <fail_1512@23:0>:bool)
        
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
        (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
        |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                           <<bcopy_aux_1164@12:1>@15:0>:int)
        
         (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                 <bcopy_aux_1164@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (<bcopy_aux_1164@12:3> = 0)
        P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int) =
        ((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
        P[<fail_1512@23:0>](<fail_1512@23:0>:bool) = false
      upper bounds:
        P[<fail_1512@23:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(2092)[4]
        output:
          [<fail_1512@23:0>]
      end GenHcSolver.classify_pids(2092)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2095)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2096)[5]
          begin InterpProver.interpolate_fresh(2097)[6]
            begin InterpProver.interpolate_log(2098)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2099)[8]
                begin InterpProver.interpolate_simplify(2100)[9]
                  begin InterpProver.interpolate_quick(2113)[10]
                    
                  end InterpProver.interpolate_quick(2113)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2117)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2117)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2100)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2099)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2098)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2097)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2096)[5] (0.000000 sec.)
        output:
          P[<fail_1512@23:0>](<fail_1512@23:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2095)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
        (0 > <k_make_array_u_1199@20:0>) |- bot
        
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
        (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
        |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                           <<bcopy_aux_1164@12:1>@15:0>:int)
        
         (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                 <bcopy_aux_1164@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (<bcopy_aux_1164@12:3> = 0)
        P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int) =
        ((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
      upper bounds:
        P[<<bcopy_aux_1164@12:1>@15:0>](var6:int,var7:int) = (0 <= var7)
      begin GenHcSolver.classify_pids(2973)[4]
        output:
          [<<bcopy_aux_1164@12:1>@15:0>]
      end GenHcSolver.classify_pids(2973)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
      nub:(not (0 <= <<bcopy_aux_1164@12:1>@15:0>))
      begin ApronInterface.convex_hull_interpolate(2976)[4]
        lb:((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
        nub:(not (0 <= <<bcopy_aux_1164@12:1>@15:0>))
        lb':((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
        nub':(not (0 <= <<bcopy_aux_1164@12:1>@15:0>))
        begin InterpProver.interpolate(2977)[5]
          begin InterpProver.interpolate_fresh(2978)[6]
            begin InterpProver.interpolate_log(2979)[7]
              input1: ((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
              input2: (not (0 <= <<bcopy_aux_1164@12:1>@15:0>))
              begin InterpProver.interpolate_check(2980)[8]
                begin InterpProver.interpolate_simplify(2981)[9]
                  begin InterpProver.interpolate_quick(3014)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3023)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3024)[12]
                        begin CsisatInterface.interpolate_csisat_log(3025)[13]
                          input1: (0 = v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0 & (1 + v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0) <= v_sep_bcopy_aux_1164_sep_12_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(3026)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3026)[14] (0.001000 sec.)
                          output: -2*v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3025)[13] (0.001000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3024)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3023)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(3014)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(2981)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(2980)[8] (0.001000 sec.)
              output: (0 <= <<bcopy_aux_1164@12:1>@15:0>)
            end InterpProver.interpolate_log(2979)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(2978)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(2977)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int) =
          (0 <= <<bcopy_aux_1164@12:1>@15:0>)
      end ApronInterface.convex_hull_interpolate(2976)[4] (0.002000 sec.)
      Horn clauses:
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
        ((<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>) && (0 > <<bcopy_aux_1164@12:1>@15:0>)) |- bot
        
         (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                 <bcopy_aux_1164@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (<bcopy_aux_1164@12:3> = 0)
      upper bounds:
        P[<bcopy_aux_1164@12:3>](var8:int,var9:int) = ((var9 >= var8) || (0 <= var9))
      begin GenHcSolver.classify_pids(3740)[4]
        output:
          [<bcopy_aux_1164@12:3>]
      end GenHcSolver.classify_pids(3740)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1164@12:3> = 0)
      nub:(not ((<bcopy_aux_1164@12:3> >= <bcopy_aux_1164@12:0>) || (0 <= <bcopy_aux_1164@12:3>)))
      begin ApronInterface.convex_hull_interpolate(3743)[4]
        lb:(<bcopy_aux_1164@12:3> = 0)
        nub:(not ((<bcopy_aux_1164@12:3> >= <bcopy_aux_1164@12:0>) || (0 <= <bcopy_aux_1164@12:3>)))
        lb':(<bcopy_aux_1164@12:3> = 0)
        nub':(not ((<bcopy_aux_1164@12:3> >= <bcopy_aux_1164@12:0>) || (0 <= <bcopy_aux_1164@12:3>)))
        begin InterpProver.interpolate(3744)[5]
          begin InterpProver.interpolate_fresh(3745)[6]
            begin InterpProver.interpolate_log(3746)[7]
              input1: (<bcopy_aux_1164@12:3> = 0)
              input2: (not ((<bcopy_aux_1164@12:3> >= <bcopy_aux_1164@12:0>) || (0 <= <bcopy_aux_1164@12:3>)))
              begin InterpProver.interpolate_check(3747)[8]
                begin InterpProver.interpolate_simplify(3748)[9]
                  begin InterpProver.interpolate_quick(3787)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3796)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3797)[12]
                        begin CsisatInterface.interpolate_csisat_log(3798)[13]
                          input1: 0 = v_sep_bcopy_aux_1164_sep_12_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1164_sep_12_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1164_sep_12_sep_3) <= v_sep_bcopy_aux_1164_sep_12_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(3799)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3799)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1164_sep_12_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3798)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1164_sep_12_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1164_sep_12_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3797)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3796)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3787)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3748)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(3747)[8] (0.002000 sec.)
              output: (0 <= <bcopy_aux_1164@12:3>)
            end InterpProver.interpolate_log(3746)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(3745)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(3744)[5] (0.002000 sec.)
        output:
          P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (0 <= <bcopy_aux_1164@12:3>)
      end ApronInterface.convex_hull_interpolate(3743)[4] (0.002000 sec.)
      begin HcSolver.check_validity(3915)[4]
        input:
          P[<fail_1512@23:0>](<fail_1512@23:0>:bool)|- bot
          
          P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
          ((0 > <k_make_array_u_1199@20:0>) && <fail_1512@23:0>) |- P[<fail_1512@23:0>](
          <fail_1512@23:0>:bool)
          
          P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
          (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
          |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                             <<bcopy_aux_1164@12:1>@15:0>:int)
          
           (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                   <bcopy_aux_1164@12:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(3915)[4] (0.001000 sec.)
      solution:
        P[<fail_1512@23:0>](<fail_1512@23:0>:bool) = false
        P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int) =
        (0 <= <<bcopy_aux_1164@12:1>@15:0>)
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (0 <= <bcopy_aux_1164@12:3>)
    end GenHcSolver.solve(1334)[3] (0.016998 sec.)
    begin GenHcSolver.solve(4146)[3]
      Horn clauses:
        P[<fail_1512@23:0>](<fail_1512@23:0>:bool)|- bot
        
        P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
        ((0 > <k_make_array_u_1199@20:0>) && <fail_1512@23:0>) |- P[<fail_1512@23:0>](
        <fail_1512@23:0>:bool)
        
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
        (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
        |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                           <<bcopy_aux_1164@12:1>@15:0>:int)
        
         (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                 <bcopy_aux_1164@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (<bcopy_aux_1164@12:3> = 0)
        P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int) =
        ((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
        P[<fail_1512@23:0>](<fail_1512@23:0>:bool) = false
      upper bounds:
        P[<fail_1512@23:0>](var11:bool) = true
      begin GenHcSolver.classify_pids(4904)[4]
        output:
          [<fail_1512@23:0>]
      end GenHcSolver.classify_pids(4904)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(4907)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(4910)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4910)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(4915)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(4915)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(4918)[5]
          begin InterpProver.interpolate_fresh(4919)[6]
            begin InterpProver.interpolate_log(4920)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(4921)[8]
                begin InterpProver.interpolate_simplify(4922)[9]
                  begin InterpProver.interpolate_quick(4937)[10]
                    
                  end InterpProver.interpolate_quick(4937)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(4941)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(4941)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4922)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(4921)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(4920)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(4919)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(4918)[5] (0.000000 sec.)
        output:
          P[<fail_1512@23:0>](<fail_1512@23:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(4907)[4] (0.000000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
        (0 > <k_make_array_u_1199@20:0>) |- bot
        
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
        (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
        |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                           <<bcopy_aux_1164@12:1>@15:0>:int)
        
         (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                 <bcopy_aux_1164@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (<bcopy_aux_1164@12:3> = 0)
        P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int) =
        ((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
      upper bounds:
        P[<<bcopy_aux_1164@12:1>@15:0>](var12:int,var13:int) = (0 <= var13)
      begin GenHcSolver.classify_pids(5804)[4]
        output:
          [<<bcopy_aux_1164@12:1>@15:0>]
      end GenHcSolver.classify_pids(5804)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
      nub:(not (0 <= <<bcopy_aux_1164@12:1>@15:0>))
      begin ApronInterface.convex_hull_interpolate(5807)[4]
        lb:((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
        nub:(not (0 <= <<bcopy_aux_1164@12:1>@15:0>))
        begin ExtFormula.Formula.case_analysis_boolean(5819)[5]
          ts: ((<<bcopy_aux_1164@12:1>@15:0> = 0) && (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(5819)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5828)[5]
          ts: (0 > <<bcopy_aux_1164@12:1>@15:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(5828)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1164@12:1>@15:0> = 0) && ((-1 + <bcopy_aux_1164@12:0>) >= 0))
        nub':((-1 + (-1 * <<bcopy_aux_1164@12:1>@15:0>)) >= 0)
        begin InterpProver.interpolate(5832)[5]
          begin InterpProver.interpolate_fresh(5833)[6]
            begin InterpProver.interpolate_log(5834)[7]
              input1: ((<<bcopy_aux_1164@12:1>@15:0> = 0) && ((-1 + <bcopy_aux_1164@12:0>) >= 0))
              input2: ((-1 + (-1 * <<bcopy_aux_1164@12:1>@15:0>)) >= 0)
              begin InterpProver.interpolate_check(5835)[8]
                begin InterpProver.interpolate_simplify(5836)[9]
                  begin InterpProver.interpolate_quick(5873)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(5882)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(5883)[12]
                        begin CsisatInterface.interpolate_csisat_log(5884)[13]
                          input1: (0 = v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0 & 1 <= v_sep_bcopy_aux_1164_sep_12_sep_0)
                          input2: (1 + v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(5885)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(5885)[14] (0.000000 sec.)
                          output: -2*v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(5884)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(5883)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(5882)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(5873)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5836)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(5835)[8] (0.002000 sec.)
              output: (0 <= <<bcopy_aux_1164@12:1>@15:0>)
            end InterpProver.interpolate_log(5834)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(5833)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(5832)[5] (0.002000 sec.)
        output:
          P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int) =
          (0 <= <<bcopy_aux_1164@12:1>@15:0>)
      end ApronInterface.convex_hull_interpolate(5807)[4] (0.003000 sec.)
      Horn clauses:
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
        ((<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>) && (0 > <<bcopy_aux_1164@12:1>@15:0>)) |- bot
        
         (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                 <bcopy_aux_1164@12:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (<bcopy_aux_1164@12:3> = 0)
      upper bounds:
        P[<bcopy_aux_1164@12:3>](var14:int,var15:int) = ((var15 >= var14) || (0 <= var15))
      begin GenHcSolver.classify_pids(6606)[4]
        output:
          [<bcopy_aux_1164@12:3>]
      end GenHcSolver.classify_pids(6606)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1164@12:3> = 0)
      nub:(not ((<bcopy_aux_1164@12:3> >= <bcopy_aux_1164@12:0>) || (0 <= <bcopy_aux_1164@12:3>)))
      begin ApronInterface.convex_hull_interpolate(6609)[4]
        lb:(<bcopy_aux_1164@12:3> = 0)
        nub:(not ((<bcopy_aux_1164@12:3> >= <bcopy_aux_1164@12:0>) || (0 <= <bcopy_aux_1164@12:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(6613)[5]
          ts: (<bcopy_aux_1164@12:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(6613)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6631)[5]
          ts: ((<bcopy_aux_1164@12:3> < <bcopy_aux_1164@12:0>) && (0 > <bcopy_aux_1164@12:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(6631)[5] (0.000000 sec.)
        lb':(<bcopy_aux_1164@12:3> = 0)
        nub':(((-1 + (-1 * <bcopy_aux_1164@12:3>)) >= 0) &&
              (((-1 + (-1 * <bcopy_aux_1164@12:3>)) + <bcopy_aux_1164@12:0>) >= 0))
        begin InterpProver.interpolate(6637)[5]
          begin InterpProver.interpolate_fresh(6638)[6]
            begin InterpProver.interpolate_log(6639)[7]
              input1: (<bcopy_aux_1164@12:3> = 0)
              input2: (((-1 + (-1 * <bcopy_aux_1164@12:3>)) >= 0) &&
                       (((-1 + (-1 * <bcopy_aux_1164@12:3>)) + <bcopy_aux_1164@12:0>) >= 0))
              begin InterpProver.interpolate_check(6640)[8]
                begin InterpProver.interpolate_simplify(6641)[9]
                  begin InterpProver.interpolate_quick(6692)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(6701)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(6702)[12]
                        begin CsisatInterface.interpolate_csisat_log(6703)[13]
                          input1: 0 = v_sep_bcopy_aux_1164_sep_12_sep_3
                          input2: ((1 + v_sep_bcopy_aux_1164_sep_12_sep_3) <= 0 & (1 + v_sep_bcopy_aux_1164_sep_12_sep_3) <= v_sep_bcopy_aux_1164_sep_12_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(6704)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(6704)[14] (0.001000 sec.)
                          output: -2*v_sep_bcopy_aux_1164_sep_12_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(6703)[13] (0.001000 sec.)
                        after simplification: -2*v_sep_bcopy_aux_1164_sep_12_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_bcopy_aux_1164_sep_12_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(6702)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(6701)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(6692)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(6641)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(6640)[8] (0.002000 sec.)
              output: (0 <= <bcopy_aux_1164@12:3>)
            end InterpProver.interpolate_log(6639)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(6638)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(6637)[5] (0.002000 sec.)
        output:
          P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (0 <= <bcopy_aux_1164@12:3>)
      end ApronInterface.convex_hull_interpolate(6609)[4] (0.002000 sec.)
      begin HcSolver.check_validity(6824)[4]
        input:
          P[<fail_1512@23:0>](<fail_1512@23:0>:bool)|- bot
          
          P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
          ((0 > <k_make_array_u_1199@20:0>) && <fail_1512@23:0>) |- P[<fail_1512@23:0>](
          <fail_1512@23:0>:bool)
          
          P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
          (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
          |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                             <<bcopy_aux_1164@12:1>@15:0>:int)
          
           (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                   <bcopy_aux_1164@12:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(6824)[4] (0.002000 sec.)
      solution:
        P[<fail_1512@23:0>](<fail_1512@23:0>:bool) = false
        P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int) =
        (0 <= <<bcopy_aux_1164@12:1>@15:0>)
        P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<bcopy_aux_1164@12:3>:int) = (0 <= <bcopy_aux_1164@12:3>)
    end GenHcSolver.solve(4146)[3] (0.020997 sec.)
    begin YhornInterface.solve(7055)[3]
      begin HcSolver.solve_ub(7056)[4]
        encoded:
          P[<fail_1512@23:0>](<fail_1512@23:0>:int)|- bot
          
          P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
          ((0 > <k_make_array_u_1199@20:0>) && (<fail_1512@23:0> = 1)) |- P[<fail_1512@23:0>](
          <fail_1512@23:0>:int)
          
          P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
          (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
          |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                             <<bcopy_aux_1164@12:1>@15:0>:int)
          
           (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                   <bcopy_aux_1164@12:3>:int)
        input to Yhorn:
          P[<fail_1512@23:0>](<fail_1512@23:0>:int)|- bot
          
          P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
          ((0 > <k_make_array_u_1199@20:0>) && (<fail_1512@23:0> = 1)) |- P[<fail_1512@23:0>](
          <fail_1512@23:0>:int)
          
          P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
          (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
          |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                             <<bcopy_aux_1164@12:1>@15:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1512_sep_23_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0($9,$8)) -> v_sep_fail_1512_sep_23_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1164_sep_12_sep_3($11,$10)) -> v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1164_sep_12_sep_3($11,$12).


v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1164_sep_12_sep_3: X
v_sep_fail_1512_sep_23_sep_0: X
....
v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1164_sep_12_sep_3: X
v_sep_fail_1512_sep_23_sep_0: X
...
v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1164_sep_12_sep_3: X
v_sep_fail_1512_sep_23_sep_0: X
....
v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0: X
v_sep_bcopy_aux_1164_sep_12_sep_3: X
v_sep_fail_1512_sep_23_sep_0: X
....(0=0) & (v_sep_fail_1512_sep_23_sep_0($7)) -> 1=0.
(($7-1=0) & (-$8>0)) & (v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0($9,$8)) -> v_sep_fail_1512_sep_23_sep_0($7).
($10-$11<0) & (v_sep_bcopy_aux_1164_sep_12_sep_3($11,$10)) -> v_sep_bcopy_aux_1164_sep_12_sep_1_sep_15_sep_0($11,$10).
$12=0 -> v_sep_bcopy_aux_1164_sep_12_sep_3($11,$12).

           (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                   <bcopy_aux_1164@12:3>:int)
        solution:
          P[<<bcopy_aux_1164@12:1>@15:0>]($16:int,$18:int) = (0 <= $18)
          P[<bcopy_aux_1164@12:3>]($21:int,$23:int) = (0 <= $23)
          P[<fail_1512@23:0>]($13:bool) = false
        
      end HcSolver.solve_ub(7056)[4] (0.009998 sec.)
      begin HcSolver.check_validity(7140)[4]
        input:
          P[<fail_1512@23:0>](<fail_1512@23:0>:bool)|- bot
          
          P[<<bcopy_aux_1164@12:1>@15:0>](<k_make_array_u_1199@20:1>:int,<k_make_array_u_1199@20:0>:int),
          ((0 > <k_make_array_u_1199@20:0>) && <fail_1512@23:0>) |- P[<fail_1512@23:0>](
          <fail_1512@23:0>:bool)
          
          P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,<<bcopy_aux_1164@12:1>@15:0>:int),
          (<<bcopy_aux_1164@12:1>@15:0> < <bcopy_aux_1164@12:0>)
          |- P[<<bcopy_aux_1164@12:1>@15:0>](<bcopy_aux_1164@12:0>:int,
                                             <<bcopy_aux_1164@12:1>@15:0>:int)
          
           (<bcopy_aux_1164@12:3> = 0) |- P[<bcopy_aux_1164@12:3>](<bcopy_aux_1164@12:0>:int,
                                                                   <bcopy_aux_1164@12:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(7140)[4] (0.002000 sec.)
      solution:
        P[<<bcopy_aux_1164@12:1>@15:0>]($16:int,$18:int) = (0 <= $18)
        P[<bcopy_aux_1164@12:3>]($21:int,$23:int) = (0 <= $23)
        P[<fail_1512@23:0>]($13:bool) = false
    end YhornInterface.solve(7055)[3] (0.011998 sec.)
    
  end RefTypeInfer.infer_etrs(187)[2] (0.081988 sec.)
  refinement types:
    main_1507: X
    f_1509: v1:int -> X
    f_1510: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1164: v1:int ->
                    (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:{v10:int | (0 <= v10)} -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1512: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1511: var35:int -> var34:int -> var33:unit -> X
    f_bcopy_aux_1508: var49:int ->
                      var48:int ->
                      (var47:int -> (var46:int -> X) -> X) ->
                      (var43:unit -> X) -> (var41:int -> (var40:int -> X) -> X) -> var37:int -> X
    k_make_array_u_1210: var55:int -> var54:int -> (var53:int -> X) -> var51:unit -> X
    update_1165: (var65:int -> (var64:int -> X) -> X) -> var61:int -> var60:int -> var59:int -> (var58:int -> X) -> X
  abstraction types:
    main_1507: X
    f_1509: v1:int -> X
    f_1510: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1164: v1:int ->
                    (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int[v10 -> (
                                                              0 <= v10)] -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1512: v1:bool -> (v2:unit -> X) -> X
    f_1511: var35:int -> var34:int -> var33:unit -> X
    f_bcopy_aux_1508: var49:int ->
                      var48:int ->
                      (var47:int -> (var46:int -> X) -> X) ->
                      (var43:unit -> X) -> (var41:int -> (var40:int -> X) -> X) -> var37:int -> X
    k_make_array_u_1210: var55:int -> var54:int -> (var53:int -> X) -> var51:unit -> X
    update_1165: (var65:int -> (var64:int -> X) -> X) -> var61:int -> var60:int -> var59:int -> (var58:int -> X) -> X
  
end AbsTypeInfer.refine(186)[1] (0.084987 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1507
  main_1507 -> (rand_int f_1509)
  bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 when (i_1042 >= m_1039) -> (k_bcopy_aux_1307 ())
  bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1508 i_1042 m_1039 des_1041 k_bcopy_aux_1307 src_1040))
  f_1509 x_1465 -> (rand_int (f_1510 x_1465))
  f_1510 x_1465 x_1478 -> (main_1043 x_1465 x_1478 (f_1511 x_1465 x_1478))
  f_1511 x_1465 x_1478 x_1462 -> end
  f_bcopy_aux_1508 i_1042 m_1039 des_1041 k_bcopy_aux_1307 src_1040 x_1352 ->
      (bcopy_aux_1164 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1307)
  fail_1512 b k -> {fail} => (k ())
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 when b_1211 ->
      (k_make_array_u_1210 i_1032 n_1031 k_make_array_1193 ())
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 when (not b_1211) ->
      (fail_1512 true (k_make_array_u_1210 i_1032 n_1031 k_make_array_1193))
  k_make_array_u_1210 i_1032 n_1031 k_make_array_1193 x_1196 -> (k_make_array_1193 0)
  main_1043 n_1044 m_1045 k_main_1398 when (n_1044 <= m_1045) ->
      (bcopy_aux_1164 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1398)
  main_1043 n_1044 m_1045 k_main_1398 when (not (n_1044 <= m_1045)) -> (k_main_1398 ())
  make_array_1030 n_1031 i_1032 k_make_array_1193 when (0 <= i_1032) ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1193 when (not (0 <= i_1032)) ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 false)
  update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 when (i_1035 = j_1037) -> (k_update_1246 x_1036)
  update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 when (not (i_1035 = j_1037)) ->
      (des_1034 i_1035 k_update_1246)
Types:
  main_1507 : X
  bcopy_aux_1164 : (int ->
                    (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1512 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1507 ... --> 
  f_1509 ... --> 
  f_1510 ... --> 
  main_1043 [1/2] ... --> 
  bcopy_aux_1164 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1199 [2/2] ... --> 
  fail_1512 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(7765)[1]
  program:
    main_1507  | true = ((Random.int 0) f_1509)
    bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 | (
    i_1042 >= m_1039) = (k_bcopy_aux_1307 ())
    bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 | (
    not (i_1042 >= m_1039)) = (src_1040 i_1042
                                        (f_bcopy_aux_1508 i_1042
                                                          m_1039
                                                          des_1041
                                                          k_bcopy_aux_1307
                                                          src_1040))
    f_1509 x_1465 | true = ((Random.int 0) (f_1510 x_1465))
    f_1510 x_1465 x_1478 | true = (main_1043 x_1465
                                             x_1478
                                             (f_1511 x_1465
                                                     x_1478))
    f_1511 x_1465 x_1478 x_1462 | true = end
    f_bcopy_aux_1508 i_1042 m_1039 des_1041 k_bcopy_aux_1307 src_1040 x_1352 | true = (
    bcopy_aux_1164 m_1039
                   src_1040
                   des_1041
                   (i_1042 + 1)
                   k_bcopy_aux_1307)
    fail_1512 b k | true = (fail ())
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 | b_1211 = (
    k_make_array_u_1210 i_1032
                        n_1031
                        k_make_array_1193
                        ())
    k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 | (not b_1211) = (
    fail_1512 true
              (k_make_array_u_1210 i_1032
                                   n_1031
                                   k_make_array_1193))
    k_make_array_u_1210 i_1032 n_1031 k_make_array_1193 x_1196 | true = (
    k_make_array_1193 0)
    main_1043 n_1044 m_1045 k_main_1398 | (n_1044 <= m_1045) = (bcopy_aux_1164
                                                                  n_1044
                                                                  (make_array_1030 n_1044)
                                                                  (make_array_1030 m_1045)
                                                                  0
                                                                  k_main_1398)
    main_1043 n_1044 m_1045 k_main_1398 | (not (n_1044 <= m_1045)) = (
    k_main_1398 ())
    make_array_1030 n_1031 i_1032 k_make_array_1193 | (0 <= i_1032) = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1193
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1193 | (not (0 <= i_1032)) = (
    k_make_array_u_1199 i_1032
                        n_1031
                        k_make_array_1193
                        false)
    update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 | (i_1035 = j_1037) = (
    k_update_1246 x_1036)
    update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 | (not (i_1035 = j_1037)) = (
    des_1034 i_1035
             k_update_1246)
    main_1507:X
    bcopy_aux_1164:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> (unit -> X) -> X
    f_1509:int -> X
    f_1510:int -> int -> X
    f_1511:int -> int -> unit -> X
    f_bcopy_aux_1508:int -> int -> (int -> (int -> X) -> X) -> (unit -> X) -> (int -> (int -> X) -> X) -> int -> X
    fail_1512:bool -> (unit -> X) -> X
    k_make_array_u_1199:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1210:int -> int -> (int -> X) -> unit -> X
    main_1043:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
    update_1165:(int -> (int -> X) -> X) -> int -> int -> int -> (int -> X) -> X
  inlined functions: f_1509,f_1510,f_1511,f_bcopy_aux_1508,k_make_array_u_1199,k_make_array_u_1210,main_1043,make_array_1030,update_1165
  counterexample: 0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1509@29:0> = var66)
     [true.nop((<f_1510@32:0> = <f_1509@29:0>) && (<f_1510@32:1> = var67))
      [true.((<main_1043@34:0> = <f_1510@32:0>) && (<main_1043@34:1> = <f_1510@32:1>))
       [(<main_1043@34:0> <= <main_1043@34:1>).
        ((<bcopy_aux_1164@37:0> = <main_1043@34:0>) && (<bcopy_aux_1164@37:3> = 0))
        [(not (<bcopy_aux_1164@37:3> >= <bcopy_aux_1164@37:0>)).(<<bcopy_aux_1164@37:1>@40:0> = <bcopy_aux_1164@37:3>)
         [true.((<make_array_1030@42:0> = <main_1043@34:0>) && (<make_array_1030@42:1> = <<bcopy_aux_1164@37:1>@40:0>))
          [(0 <= <make_array_1030@42:1>).
           ((<k_make_array_u_1199@45:0> = <make_array_1030@42:1>) &&
            ((<k_make_array_u_1199@45:1> = <make_array_1030@42:0>) &&
             (<k_make_array_u_1199@45:3> = (<make_array_1030@42:1> < <make_array_1030@42:0>))))
           [(not <k_make_array_u_1199@45:3>).(<fail_1512@48:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(7766)[2]
    horn clauses:
      P[<fail_1512@48:0>](<fail_1512@48:0>:bool)|- bot
      
      P[<k_make_array_u_1199@45:3>](<k_make_array_u_1199@45:0>:int,<k_make_array_u_1199@45:1>:int,false:bool),
      <fail_1512@48:0> |- P[<fail_1512@48:0>](<fail_1512@48:0>:bool)
      
      P[<make_array_1030@42:1>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
      ((0 <= <k_make_array_u_1199@45:0>) &&
       (<k_make_array_u_1199@45:3> = (<k_make_array_u_1199@45:0> < <k_make_array_u_1199@45:1>)))
      |- P[<k_make_array_u_1199@45:3>](<k_make_array_u_1199@45:0>:int,
                                       <k_make_array_u_1199@45:1>:int,
                                       <k_make_array_u_1199@45:3>:bool)
      
      P[<main_1043@34:1>](<make_array_1030@42:0>:int,<main_1043@34:1>:int),
      P[<<bcopy_aux_1164@37:1>@40:0>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int),
      (<make_array_1030@42:0> <= <main_1043@34:1>)
      |- P[<make_array_1030@42:1>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int)
      
      P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
      (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
      |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int)
      
      P[<main_1043@34:1>](<bcopy_aux_1164@37:0>:int,<main_1043@34:1>:int),
      ((<bcopy_aux_1164@37:3> = 0) && (<bcopy_aux_1164@37:0> <= <main_1043@34:1>))
      |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int)
      
      P[<f_1510@32:1>](<main_1043@34:0>:int,<main_1043@34:1>:int)|- P[<main_1043@34:1>](
      <main_1043@34:0>:int,<main_1043@34:1>:int)
      
      P[<f_1509@29:0>](<f_1510@32:0>:int)|- P[<f_1510@32:1>](<f_1510@32:0>:int,
                                                             <f_1510@32:1>:int)
      
      |- P[<f_1509@29:0>](<f_1509@29:0>:int)
    call trees:
      <main_1507@26>
        <f_1509@29>
          <f_1510@32>
            <main_1043@34>
              <bcopy_aux_1164@37>
              </<bcopy_aux_1164@37:1>@40>
              <make_array_1030@42>
                <k_make_array_u_1199@45>
                  <fail_1512@48>
    inlined horn clauses:
      P[<fail_1512@48:0>](<fail_1512@48:0>:bool)|- bot
      
      P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
      ((0 <= <k_make_array_u_1199@45:0>) &&
       ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && <fail_1512@48:0>))
      |- P[<fail_1512@48:0>](<fail_1512@48:0>:bool)
      
      P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
      (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
      |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int)
      
       (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                               <bcopy_aux_1164@37:3>:int)
    begin ParamSubstInfer.infer(9004)[3]
      
    end ParamSubstInfer.infer(9004)[3] (0.073989 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(9006)[3]
      
    end RefTypeInfer.elim_coeffs(9006)[3] (0.001000 sec.)
    begin GenHcSolver.solve(9198)[3]
      Horn clauses:
        P[<fail_1512@48:0>](<fail_1512@48:0>:bool)|- bot
        
        P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
        ((0 <= <k_make_array_u_1199@45:0>) &&
         ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && <fail_1512@48:0>))
        |- P[<fail_1512@48:0>](<fail_1512@48:0>:bool)
        
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
        (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
        |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                           <<bcopy_aux_1164@37:1>@40:0>:int)
        
         (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                 <bcopy_aux_1164@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = (<bcopy_aux_1164@37:3> = 0)
        P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int) =
        ((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
        P[<fail_1512@48:0>](<fail_1512@48:0>:bool) = false
      upper bounds:
        P[<fail_1512@48:0>](var69:bool) = true
      begin GenHcSolver.classify_pids(10031)[4]
        output:
          [<fail_1512@48:0>]
      end GenHcSolver.classify_pids(10031)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(10034)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(10035)[5]
          begin InterpProver.interpolate_fresh(10036)[6]
            begin InterpProver.interpolate_log(10037)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(10038)[8]
                begin InterpProver.interpolate_simplify(10039)[9]
                  begin InterpProver.interpolate_quick(10052)[10]
                    
                  end InterpProver.interpolate_quick(10052)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(10056)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(10056)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(10039)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(10038)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(10037)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(10036)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(10035)[5] (0.001000 sec.)
        output:
          P[<fail_1512@48:0>](<fail_1512@48:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(10034)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
        ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && (0 <= <k_make_array_u_1199@45:0>)) |- bot
        
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
        (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
        |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                           <<bcopy_aux_1164@37:1>@40:0>:int)
        
         (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                 <bcopy_aux_1164@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = (<bcopy_aux_1164@37:3> = 0)
        P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int) =
        ((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
      upper bounds:
        P[<<bcopy_aux_1164@37:1>@40:0>](var70:int,var71:int) = ((var71 < var70) || (0 > var71))
      begin GenHcSolver.classify_pids(11256)[4]
        output:
          [<<bcopy_aux_1164@37:1>@40:0>]
      end GenHcSolver.classify_pids(11256)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
      nub:(not ((<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>) || (0 > <<bcopy_aux_1164@37:1>@40:0>)))
      begin ApronInterface.convex_hull_interpolate(11259)[4]
        lb:((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
        nub:(not ((<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>) || (0 > <<bcopy_aux_1164@37:1>@40:0>)))
        lb':((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
        nub':(not ((<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>) || (0 > <<bcopy_aux_1164@37:1>@40:0>)))
        begin InterpProver.interpolate(11260)[5]
          begin InterpProver.interpolate_fresh(11261)[6]
            begin InterpProver.interpolate_log(11262)[7]
              input1: ((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
              input2: (not
                         ((<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>) || (0 > <<bcopy_aux_1164@37:1>@40:0>)))
              begin InterpProver.interpolate_check(11263)[8]
                begin InterpProver.interpolate_simplify(11264)[9]
                  begin InterpProver.interpolate_quick(11319)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(11328)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(11329)[12]
                        begin CsisatInterface.interpolate_csisat_log(11330)[13]
                          input1: (0 = v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0 & (1 + v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0) <= v_sep_bcopy_aux_1164_sep_37_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0 & v_sep_bcopy_aux_1164_sep_37_sep_0 <= v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(11331)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(11331)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1164_sep_37_sep_0 + 2*v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(11330)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1164_sep_37_sep_0 + 2*v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1164_sep_37_sep_0 + 2*v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(11329)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(11328)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(11319)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(11264)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(11263)[8] (0.001000 sec.)
              output: ((1 + <<bcopy_aux_1164@37:1>@40:0>) <= <bcopy_aux_1164@37:0>)
            end InterpProver.interpolate_log(11262)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(11261)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(11260)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int) =
          ((1 + <<bcopy_aux_1164@37:1>@40:0>) <= <bcopy_aux_1164@37:0>)
      end ApronInterface.convex_hull_interpolate(11259)[4] (0.001000 sec.)
      Horn clauses:
         (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                 <bcopy_aux_1164@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = (<bcopy_aux_1164@37:3> = 0)
      upper bounds:
        P[<bcopy_aux_1164@37:3>](var72:int,var73:int) = true
      begin GenHcSolver.classify_pids(11677)[4]
        output:
          [<bcopy_aux_1164@37:3>]
      end GenHcSolver.classify_pids(11677)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1164@37:3> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(11680)[4]
        lb:(<bcopy_aux_1164@37:3> = 0)
        nub:false
        lb':(<bcopy_aux_1164@37:3> = 0)
        nub':false
        begin InterpProver.interpolate(11681)[5]
          begin InterpProver.interpolate_fresh(11682)[6]
            begin InterpProver.interpolate_log(11683)[7]
              input1: (<bcopy_aux_1164@37:3> = 0)
              input2: false
              begin InterpProver.interpolate_check(11684)[8]
                begin InterpProver.interpolate_simplify(11685)[9]
                  begin InterpProver.interpolate_quick(11704)[10]
                    
                  end InterpProver.interpolate_quick(11704)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11685)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11684)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(11683)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11682)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11681)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = true
      end ApronInterface.convex_hull_interpolate(11680)[4] (0.000000 sec.)
      begin HcSolver.check_validity(11768)[4]
        input:
          P[<fail_1512@48:0>](<fail_1512@48:0>:bool)|- bot
          
          P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
          ((0 <= <k_make_array_u_1199@45:0>) &&
           ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && <fail_1512@48:0>))
          |- P[<fail_1512@48:0>](<fail_1512@48:0>:bool)
          
          P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
          (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
          |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                             <<bcopy_aux_1164@37:1>@40:0>:int)
          
           (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                   <bcopy_aux_1164@37:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(11768)[4] (0.001000 sec.)
      solution:
        P[<fail_1512@48:0>](<fail_1512@48:0>:bool) = false
        P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int) =
        ((1 + <<bcopy_aux_1164@37:1>@40:0>) <= <bcopy_aux_1164@37:0>)
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = true
    end GenHcSolver.solve(9198)[3] (0.010999 sec.)
    begin GenHcSolver.solve(11969)[3]
      Horn clauses:
        P[<fail_1512@48:0>](<fail_1512@48:0>:bool)|- bot
        
        P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
        ((0 <= <k_make_array_u_1199@45:0>) &&
         ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && <fail_1512@48:0>))
        |- P[<fail_1512@48:0>](<fail_1512@48:0>:bool)
        
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
        (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
        |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                           <<bcopy_aux_1164@37:1>@40:0>:int)
        
         (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                 <bcopy_aux_1164@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = (<bcopy_aux_1164@37:3> = 0)
        P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int) =
        ((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
        P[<fail_1512@48:0>](<fail_1512@48:0>:bool) = false
      upper bounds:
        P[<fail_1512@48:0>](var75:bool) = true
      begin GenHcSolver.classify_pids(12802)[4]
        output:
          [<fail_1512@48:0>]
      end GenHcSolver.classify_pids(12802)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(12805)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(12808)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(12808)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(12813)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(12813)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(12816)[5]
          begin InterpProver.interpolate_fresh(12817)[6]
            begin InterpProver.interpolate_log(12818)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(12819)[8]
                begin InterpProver.interpolate_simplify(12820)[9]
                  begin InterpProver.interpolate_quick(12835)[10]
                    
                  end InterpProver.interpolate_quick(12835)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(12839)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(12839)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(12820)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(12819)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(12818)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(12817)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(12816)[5] (0.001000 sec.)
        output:
          P[<fail_1512@48:0>](<fail_1512@48:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(12805)[4] (0.001000 sec.)
      Horn clauses:
        P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
        ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && (0 <= <k_make_array_u_1199@45:0>)) |- bot
        
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
        (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
        |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                           <<bcopy_aux_1164@37:1>@40:0>:int)
        
         (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                 <bcopy_aux_1164@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = (<bcopy_aux_1164@37:3> = 0)
        P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int) =
        ((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
      upper bounds:
        P[<<bcopy_aux_1164@37:1>@40:0>](var76:int,var77:int) = ((var77 < var76) || (0 > var77))
      begin GenHcSolver.classify_pids(14046)[4]
        output:
          [<<bcopy_aux_1164@37:1>@40:0>]
      end GenHcSolver.classify_pids(14046)[4] (0.000000 sec.)
      lb:((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
      nub:(not ((<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>) || (0 > <<bcopy_aux_1164@37:1>@40:0>)))
      begin ApronInterface.convex_hull_interpolate(14049)[4]
        lb:((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
        nub:(not ((<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>) || (0 > <<bcopy_aux_1164@37:1>@40:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(14061)[5]
          ts: ((<<bcopy_aux_1164@37:1>@40:0> = 0) && (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(14061)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(14081)[5]
          ts: ((<<bcopy_aux_1164@37:1>@40:0> >= <bcopy_aux_1164@37:0>) && (0 <= <<bcopy_aux_1164@37:1>@40:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(14081)[5] (0.000000 sec.)
        lb':((<<bcopy_aux_1164@37:1>@40:0> = 0) && ((-1 + <bcopy_aux_1164@37:0>) >= 0))
        nub':(((<<bcopy_aux_1164@37:1>@40:0> + (-1 * <bcopy_aux_1164@37:0>)) >= 0) &&
              (<<bcopy_aux_1164@37:1>@40:0> >= 0))
        begin InterpProver.interpolate(14087)[5]
          begin InterpProver.interpolate_fresh(14088)[6]
            begin InterpProver.interpolate_log(14089)[7]
              input1: ((<<bcopy_aux_1164@37:1>@40:0> = 0) && ((-1 + <bcopy_aux_1164@37:0>) >= 0))
              input2: (((<<bcopy_aux_1164@37:1>@40:0> + (-1 * <bcopy_aux_1164@37:0>)) >= 0) &&
                       (<<bcopy_aux_1164@37:1>@40:0> >= 0))
              begin InterpProver.interpolate_check(14090)[8]
                begin InterpProver.interpolate_simplify(14091)[9]
                  begin InterpProver.interpolate_quick(14148)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(14157)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(14158)[12]
                        begin CsisatInterface.interpolate_csisat_log(14159)[13]
                          input1: (0 = v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0 & 1 <= v_sep_bcopy_aux_1164_sep_37_sep_0)
                          input2: (0 <= v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0 & v_sep_bcopy_aux_1164_sep_37_sep_0 <= v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(14160)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(14160)[14] (0.000000 sec.)
                          output: (-2*v_sep_bcopy_aux_1164_sep_37_sep_0 + 2*v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(14159)[13] (0.001000 sec.)
                        after simplification: (-2*v_sep_bcopy_aux_1164_sep_37_sep_0 + 2*v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_bcopy_aux_1164_sep_37_sep_0 + 2*v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(14158)[12] (0.001000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(14157)[11] (0.001000 sec.)
                    
                  end InterpProver.interpolate_quick(14148)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(14091)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(14090)[8] (0.001000 sec.)
              output: ((1 + <<bcopy_aux_1164@37:1>@40:0>) <= <bcopy_aux_1164@37:0>)
            end InterpProver.interpolate_log(14089)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(14088)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(14087)[5] (0.001000 sec.)
        output:
          P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int) =
          ((1 + <<bcopy_aux_1164@37:1>@40:0>) <= <bcopy_aux_1164@37:0>)
      end ApronInterface.convex_hull_interpolate(14049)[4] (0.002000 sec.)
      Horn clauses:
         (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                 <bcopy_aux_1164@37:3>:int)
      lower bounds:
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = (<bcopy_aux_1164@37:3> = 0)
      upper bounds:
        P[<bcopy_aux_1164@37:3>](var78:int,var79:int) = true
      begin GenHcSolver.classify_pids(14506)[4]
        output:
          [<bcopy_aux_1164@37:3>]
      end GenHcSolver.classify_pids(14506)[4] (0.000000 sec.)
      lb:(<bcopy_aux_1164@37:3> = 0)
      nub:false
      begin ApronInterface.convex_hull_interpolate(14509)[4]
        lb:(<bcopy_aux_1164@37:3> = 0)
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(14513)[5]
          ts: (<bcopy_aux_1164@37:3> = 0)
          
        end ExtFormula.Formula.case_analysis_boolean(14513)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(14519)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(14519)[5] (0.000000 sec.)
        lb':(<bcopy_aux_1164@37:3> = 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(14522)[5]
          begin InterpProver.interpolate_fresh(14523)[6]
            begin InterpProver.interpolate_log(14524)[7]
              input1: (<bcopy_aux_1164@37:3> = 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(14525)[8]
                begin InterpProver.interpolate_simplify(14526)[9]
                  begin InterpProver.interpolate_quick(14546)[10]
                    
                  end InterpProver.interpolate_quick(14546)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(14526)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(14525)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(14524)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(14523)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(14522)[5] (0.000000 sec.)
        output:
          P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = true
      end ApronInterface.convex_hull_interpolate(14509)[4] (0.000000 sec.)
      begin HcSolver.check_validity(14612)[4]
        input:
          P[<fail_1512@48:0>](<fail_1512@48:0>:bool)|- bot
          
          P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
          ((0 <= <k_make_array_u_1199@45:0>) &&
           ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && <fail_1512@48:0>))
          |- P[<fail_1512@48:0>](<fail_1512@48:0>:bool)
          
          P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
          (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
          |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                             <<bcopy_aux_1164@37:1>@40:0>:int)
          
           (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                   <bcopy_aux_1164@37:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14612)[4] (0.002000 sec.)
      solution:
        P[<fail_1512@48:0>](<fail_1512@48:0>:bool) = false
        P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int) =
        ((1 + <<bcopy_aux_1164@37:1>@40:0>) <= <bcopy_aux_1164@37:0>)
        P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<bcopy_aux_1164@37:3>:int) = true
    end GenHcSolver.solve(11969)[3] (0.016997 sec.)
    begin YhornInterface.solve(14813)[3]
      begin HcSolver.solve_ub(14814)[4]
        encoded:
          P[<fail_1512@48:0>](<fail_1512@48:0>:int)|- bot
          
          P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
          ((0 <= <k_make_array_u_1199@45:0>) &&
           ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && (<fail_1512@48:0> = 1)))
          |- P[<fail_1512@48:0>](<fail_1512@48:0>:int)
          
          P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
          (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
          |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                             <<bcopy_aux_1164@37:1>@40:0>:int)
          
           (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                   <bcopy_aux_1164@37:3>:int)
        input to Yhorn:
          P[<fail_1512@48:0>](<fail_1512@48:0>:int)|- bot
          
          P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
          ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) &&
           ((0 <= <k_make_array_u_1199@45:0>) && (<fail_1512@48:0> = 1))) |- P[<fail_1512@48:0>](
          <fail_1512@48:0>:int)
          
          P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
          (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
          |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                             <<bcopy_aux_1164@37:1>@40:0>:int)
          Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1512_sep_48_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0($63,$62)) -> v_sep_fail_1512_sep_48_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1164_sep_37_sep_3($65,$64)) -> v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1164_sep_37_sep_3($65,$66).


v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1164_sep_37_sep_3: X
v_sep_fail_1512_sep_48_sep_0: X
....
v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1164_sep_37_sep_3: X
v_sep_fail_1512_sep_48_sep_0: X
...
v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1164_sep_37_sep_3: X
v_sep_fail_1512_sep_48_sep_0: X
....
v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0: X
v_sep_bcopy_aux_1164_sep_37_sep_3: X
v_sep_fail_1512_sep_48_sep_0: X
....(0=0) & (v_sep_fail_1512_sep_48_sep_0($61)) -> 1=0.
(($61-1=0) & (-$62<=0) & ($62-$63>=0)) & (v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0($63,$62)) -> v_sep_fail_1512_sep_48_sep_0($61).
($64-$65<0) & (v_sep_bcopy_aux_1164_sep_37_sep_3($65,$64)) -> v_sep_bcopy_aux_1164_sep_37_sep_1_sep_40_sep_0($65,$64).
$66=0 -> v_sep_bcopy_aux_1164_sep_37_sep_3($65,$66).

           (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                   <bcopy_aux_1164@37:3>:int)
        solution:
          P[<<bcopy_aux_1164@37:1>@40:0>]($70:int,$72:int) = ((1 + $72) <= $70)
          P[<bcopy_aux_1164@37:3>]($75:int,$77:int) = true
          P[<fail_1512@48:0>]($67:bool) = false
        
      end HcSolver.solve_ub(14814)[4] (0.011998 sec.)
      begin HcSolver.check_validity(14946)[4]
        input:
          P[<fail_1512@48:0>](<fail_1512@48:0>:bool)|- bot
          
          P[<<bcopy_aux_1164@37:1>@40:0>](<k_make_array_u_1199@45:1>:int,<k_make_array_u_1199@45:0>:int),
          ((0 <= <k_make_array_u_1199@45:0>) &&
           ((<k_make_array_u_1199@45:0> >= <k_make_array_u_1199@45:1>) && <fail_1512@48:0>))
          |- P[<fail_1512@48:0>](<fail_1512@48:0>:bool)
          
          P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,<<bcopy_aux_1164@37:1>@40:0>:int),
          (<<bcopy_aux_1164@37:1>@40:0> < <bcopy_aux_1164@37:0>)
          |- P[<<bcopy_aux_1164@37:1>@40:0>](<bcopy_aux_1164@37:0>:int,
                                             <<bcopy_aux_1164@37:1>@40:0>:int)
          
           (<bcopy_aux_1164@37:3> = 0) |- P[<bcopy_aux_1164@37:3>](<bcopy_aux_1164@37:0>:int,
                                                                   <bcopy_aux_1164@37:3>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14946)[4] (0.000000 sec.)
      solution:
        P[<<bcopy_aux_1164@37:1>@40:0>]($70:int,$72:int) = ((1 + $72) <= $70)
        P[<bcopy_aux_1164@37:3>]($75:int,$77:int) = true
        P[<fail_1512@48:0>]($67:bool) = false
    end YhornInterface.solve(14813)[3] (0.011998 sec.)
    
  end RefTypeInfer.infer_etrs(7766)[2] (0.119982 sec.)
  refinement types:
    main_1507: X
    f_1509: v1:int -> X
    f_1510: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1164: v1:int ->
                    (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1512: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1511: var99:int -> var98:int -> var97:unit -> X
    f_bcopy_aux_1508: var113:int ->
                      var112:int ->
                      (var111:int -> (var110:int -> X) -> X) ->
                      (var107:unit -> X) -> (var105:int -> (var104:int -> X) -> X) -> var101:int -> X
    k_make_array_u_1210: var119:int -> var118:int -> (var117:int -> X) -> var115:unit -> X
    update_1165: (var129:int -> (var128:int -> X) -> X) ->
                 var125:int -> var124:int -> var123:int -> (var122:int -> X) -> X
  abstraction types:
    main_1507: X
    f_1509: v1:int -> X
    f_1510: v1:int -> v2:int -> X
    main_1043: v1:int -> v2:int -> (v3:unit -> X) -> X
    bcopy_aux_1164: v1:int ->
                    (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                    (v6:int -> (v7:int -> X) -> X) -> v10:int -> (v11:unit -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1199: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1512: v1:bool -> (v2:unit -> X) -> X
    f_1511: var99:int -> var98:int -> var97:unit -> X
    f_bcopy_aux_1508: var113:int ->
                      var112:int ->
                      (var111:int -> (var110:int -> X) -> X) ->
                      (var107:unit -> X) -> (var105:int -> (var104:int -> X) -> X) -> var101:int -> X
    k_make_array_u_1210: var119:int -> var118:int -> (var117:int -> X) -> var115:unit -> X
    update_1165: (var129:int -> (var128:int -> X) -> X) ->
                 var125:int -> var124:int -> var123:int -> (var122:int -> X) -> X
  
end AbsTypeInfer.refine(7765)[1] (0.123982 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1507
  main_1507 -> (rand_int f_1509)
  bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 when (i_1042 >= m_1039) -> (k_bcopy_aux_1307 ())
  bcopy_aux_1164 m_1039 src_1040 des_1041 i_1042 k_bcopy_aux_1307 when (
      not (i_1042 >= m_1039)) -> (src_1040 i_1042 (f_bcopy_aux_1508 i_1042 m_1039 des_1041 k_bcopy_aux_1307 src_1040))
  f_1509 x_1465 -> (rand_int (f_1510 x_1465))
  f_1510 x_1465 x_1478 -> (main_1043 x_1465 x_1478 (f_1511 x_1465 x_1478))
  f_1511 x_1465 x_1478 x_1462 -> end
  f_bcopy_aux_1508 i_1042 m_1039 des_1041 k_bcopy_aux_1307 src_1040 x_1352 ->
      (bcopy_aux_1164 m_1039 src_1040 des_1041 (i_1042 + 1) k_bcopy_aux_1307)
  fail_1512 b k -> {fail} => (k ())
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 when b_1211 ->
      (k_make_array_u_1210 i_1032 n_1031 k_make_array_1193 ())
  k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 b_1211 when (not b_1211) ->
      (fail_1512 true (k_make_array_u_1210 i_1032 n_1031 k_make_array_1193))
  k_make_array_u_1210 i_1032 n_1031 k_make_array_1193 x_1196 -> (k_make_array_1193 0)
  main_1043 n_1044 m_1045 k_main_1398 when (n_1044 <= m_1045) ->
      (bcopy_aux_1164 n_1044 (make_array_1030 n_1044) (make_array_1030 m_1045) 0 k_main_1398)
  main_1043 n_1044 m_1045 k_main_1398 when (not (n_1044 <= m_1045)) -> (k_main_1398 ())
  make_array_1030 n_1031 i_1032 k_make_array_1193 when (0 <= i_1032) ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1193 when (not (0 <= i_1032)) ->
      (k_make_array_u_1199 i_1032 n_1031 k_make_array_1193 false)
  update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 when (i_1035 = j_1037) -> (k_update_1246 x_1036)
  update_1165 des_1034 i_1035 x_1036 j_1037 k_update_1246 when (not (i_1035 = j_1037)) ->
      (des_1034 i_1035 k_update_1246)
Types:
  main_1507 : X
  bcopy_aux_1164 : (x_1:int ->
                    (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                    (int -> (int -> X) -> X) -> x_14:int[x_14 >= 0] -> (unit -> X) -> X)
  fail_1512 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  bcopy_aux: (x_1:int -> (({x_6:int | x_6 >= 0 && x_1 >= x_6 + 1} -> int) -> (Top -> ({x_4:int | x_4 >= 0} -> unit))))

cycles: 2
total: 0.573 sec
  abst: 0.014 sec
  mc: 0.028 sec
  refine: 0.244 sec
    exparam: 0.101 sec
