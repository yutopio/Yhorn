MoCHi: Model Checker for Higher-Order Programs
  TRecS version: 1.30
  OCaml version: 4.00.1
  Command: ../mochi.opt -gchi a-dotprod.ml

parsed::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let rec dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 =
   if i_1037 >= n_1034 then
     sum_1038
   else
     dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (sum_1038 + (v1_1035 i_1037 * v2_1036 i_1037)) 
 in
 let main_1039 z_1040 n_1041 =
   let v1_1042 = make_array_1030 n_1041 
   in
   let v2_1043 = make_array_1030 n_1041 
   in
     if z_1040 = 0 then
       let u_1141 = dotprod_1033 n_1041 v1_1042 v2_1043 z_1040 z_1040 
       in
         ()
     else
       () 
 in
   ()

set_target::
 let make_array_1030 n_1031 i_1032 = let u_1045 = if 0 <= i_1032 && i_1032 < n_1031 then
                                                    ()
                                                  else
                                                    {fail} () 
                                     in
                                       0 
 in
 let rec dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 =
   if i_1037 >= n_1034 then
     sum_1038
   else
     dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (sum_1038 + (v1_1035 i_1037 * v2_1036 i_1037)) 
 in
 let main_1039 z_1040 n_1041 =
   let v1_1042 = make_array_1030 n_1041 
   in
   let v2_1043 = make_array_1030 n_1041 
   in
     if z_1040 = 0 then
       let u_1141 = dotprod_1033 n_1041 v1_1042 v2_1043 z_1040 z_1040 
       in
         ()
     else
       () 
 in
 let main_1144 = let arg1_1142 = rand_int () 
                 in
                 let arg2_1143 = rand_int () 
                 in
                   main_1039 arg1_1142 arg2_1143 
 in
   ()

CPS::
 let make_array_1030 (n_1031:int) (i_1032:int) (k_make_array_1172:(int -> X)) =
   let k_make_array_u_1189 (x_1175:unit) = k_make_array_1172 0 
   in
   let k_make_array_u_1178 (b_1190:bool) =
     if b_1190 then
       k_make_array_u_1189 ()
     else
       {|fail|} () k_make_array_u_1189 
   in
     if 0 <= i_1032 then
       k_make_array_u_1178 (i_1032 < n_1031)
     else
       k_make_array_u_1178 false 
 in
 let rec dotprod_1033
   (n_1034:int) (v1_1035:(int -> ((int -> X) -> X))) (v2_1036:(int -> ((int -> X) -> X))) (i_1037:int) (sum_1038:int) (k_dotprod_1240:(
   int -> X)) =
   if i_1037 >= n_1034 then
     k_dotprod_1240 sum_1038
   else
     v1_1035 i_1037
       (fun x_1266 ->
          v2_1036 i_1037
            (fun x_1267 ->
               dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (sum_1038 + (x_1266 * x_1267)) k_dotprod_1240)) 
 in
 let main_1039 (z_1040:int) (n_1041:int) (k_main_1315:(unit -> X)) =
   if z_1040 = 0 then
     dotprod_1033 n_1041 (make_array_1030 n_1041) (make_array_1030 n_1041) z_1040 z_1040 (fun x_1350 -> k_main_1315 ())
   else
     k_main_1315 () 
 in
   rand_int_cps () (fun x_1386 -> rand_int_cps () (fun x_1399 -> main_1039 x_1386 x_1399 (fun x_1383 -> end)))

Program with abstraction types (CEGAR-cycle 0)::
Main: main_1428
  main_1428 -> (rand_int f_1432)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      i_1037 >= n_1034) -> (k_dotprod_1240 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036))
  f_1432 x_1386 -> (rand_int (f_1433 x_1386))
  f_1433 x_1386 x_1399 -> (main_1039 x_1386 x_1399 (f_1434 x_1386 x_1399))
  f_1434 x_1386 x_1399 x_1383 -> end
  f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 ->
      (v2_1036 i_1037 (f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036))
  f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (sum_1038 + (x_1266 * x_1267)) k_dotprod_1240)
  f_main_1431 n_1041 z_1040 k_main_1315 x_1350 -> (k_main_1315 ())
  fail_1435 b k -> {fail} => (k ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when b_1190 ->
      (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when (not b_1190) ->
      (fail_1435 true (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172))
  k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 -> (k_make_array_1172 0)
  main_1039 z_1040 n_1041 k_main_1315 when (z_1040 = 0) ->
      (dotprod_1033 n_1041 (make_array_1030 n_1041) (make_array_1030 n_1041) z_1040 z_1040
        (f_main_1431 n_1041 z_1040 k_main_1315))
  main_1039 z_1040 n_1041 k_main_1315 when (not (z_1040 = 0)) -> (k_main_1315 ())
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (0 <= i_1032) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (not (0 <= i_1032)) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 false)
Types:
  main_1428 : X
  dotprod_1033 : (int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X)
  fail_1435 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_1428 ... --> 
  f_1432 ... --> 
  f_1433 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1178 [2/2] ... --> 
  fail_1435 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 1; 1; 0

(0-3) Checking counter-example ... DONE!

(0-4) Discovering predicates ... 
begin AbsTypeInfer.refine(181)[1]
  program:
    main_1428  | true = ((Random.int 0) f_1432)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 | (
    i_1037 >= n_1034) = (k_dotprod_1240 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1429 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1240
                                                       v1_1035
                                                       v2_1036))
    f_1432 x_1386 | true = ((Random.int 0) (f_1433 x_1386))
    f_1433 x_1386 x_1399 | true = (main_1039 x_1386
                                             x_1399
                                             (f_1434 x_1386
                                                     x_1399))
    f_1434 x_1386 x_1399 x_1383 | true = end
    f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 | true = (
    v2_1036 i_1037
            (f_dotprod_1430 i_1037
                            n_1034
                            sum_1038
                            x_1266
                            k_dotprod_1240
                            v1_1035
                            v2_1036))
    f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 (sum_1038 + (x_1266 * x_1267))
                 k_dotprod_1240)
    f_main_1431 n_1041 z_1040 k_main_1315 x_1350 | true = (k_main_1315 ())
    fail_1435 b k | true = (fail ())
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 | b_1190 = (
    k_make_array_u_1189 i_1032
                        n_1031
                        k_make_array_1172
                        ())
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 | (not b_1190) = (
    fail_1435 true
              (k_make_array_u_1189 i_1032
                                   n_1031
                                   k_make_array_1172))
    k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 | true = (
    k_make_array_1172 0)
    main_1039 z_1040 n_1041 k_main_1315 | (z_1040 = 0) = (dotprod_1033
                                                            n_1041
                                                            (make_array_1030 n_1041)
                                                            (make_array_1030 n_1041)
                                                            z_1040
                                                            z_1040
                                                            (f_main_1431 n_1041
                                                                    z_1040
                                                                    k_main_1315))
    main_1039 z_1040 n_1041 k_main_1315 | (not (z_1040 = 0)) = (k_main_1315 ())
    make_array_1030 n_1031 i_1032 k_make_array_1172 | (0 <= i_1032) = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1172
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1172 | (not (0 <= i_1032)) = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1172
                        false)
    main_1428:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1432:int -> X
    f_1433:int -> int -> X
    f_1434:int -> int -> unit -> X
    f_dotprod_1429:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1430:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1431:int -> int -> (unit -> X) -> int -> X
    fail_1435:bool -> (unit -> X) -> X
    k_make_array_u_1178:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1189:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1432,f_1433,f_1434,f_dotprod_1429,f_dotprod_1430,f_main_1431,k_make_array_u_1178,k_make_array_u_1189,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:1:1:0
  error traces:
    [true.nop(<f_1432@4:0> = var2)
     [true.nop((<f_1433@7:0> = <f_1432@4:0>) && (<f_1433@7:1> = var3))
      [true.((<main_1039@9:0> = <f_1433@7:0>) && (<main_1039@9:1> = <f_1433@7:1>))
       [(<main_1039@9:0> = 0).
        ((<dotprod_1033@12:0> = <main_1039@9:1>) &&
         ((<dotprod_1033@12:3> = <main_1039@9:0>) && (<dotprod_1033@12:4> = <main_1039@9:0>)))
        [(not (<dotprod_1033@12:3> >= <dotprod_1033@12:0>)).(<<dotprod_1033@12:1>@15:0> = <dotprod_1033@12:3>)
         [true.((<make_array_1030@17:0> = <main_1039@9:1>) && (<make_array_1030@17:1> = <<dotprod_1033@12:1>@15:0>))
          [(not (0 <= <make_array_1030@17:1>)).
           ((<k_make_array_u_1178@20:0> = <make_array_1030@17:1>) &&
            ((<k_make_array_u_1178@20:1> = <make_array_1030@17:0>) && (<k_make_array_u_1178@20:3> = false)))
           [(not <k_make_array_u_1178@20:3>).(<fail_1435@23:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(182)[2]
    horn clauses:
      P[<fail_1435@23:0>](<fail_1435@23:0>:bool)|- bot
      
      P[<k_make_array_u_1178@20:3>](<k_make_array_u_1178@20:0>:int,<k_make_array_u_1178@20:1>:int,false:bool),
      <fail_1435@23:0> |- P[<fail_1435@23:0>](<fail_1435@23:0>:bool)
      
      P[<make_array_1030@17:1>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
      ((0 > <k_make_array_u_1178@20:0>) && (not <k_make_array_u_1178@20:3>))
      |- P[<k_make_array_u_1178@20:3>](<k_make_array_u_1178@20:0>:int,
                                       <k_make_array_u_1178@20:1>:int,
                                       <k_make_array_u_1178@20:3>:bool)
      
      P[<main_1039@9:1>](0:int,<make_array_1030@17:0>:int),
      P[<<dotprod_1033@12:1>@15:0>](<make_array_1030@17:0>:int,<make_array_1030@17:1>:int)|- P[<make_array_1030@17:1>](
      <make_array_1030@17:0>:int,<make_array_1030@17:1>:int)
      
      P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
      (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
      |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
      
      P[<main_1039@9:1>](<dotprod_1033@12:4>:int,<dotprod_1033@12:0>:int),
      ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                <dotprod_1033@12:4>:int)
      
      P[<f_1433@7:1>](<main_1039@9:0>:int,<main_1039@9:1>:int)|- P[<main_1039@9:1>](
      <main_1039@9:0>:int,<main_1039@9:1>:int)
      
      P[<f_1432@4:0>](<f_1433@7:0>:int)|- P[<f_1433@7:1>](<f_1433@7:0>:int,
                                                          <f_1433@7:1>:int)
      
      |- P[<f_1432@4:0>](<f_1432@4:0>:int)
    call trees:
      <main_1428@1>
        <f_1432@4>
          <f_1433@7>
            <main_1039@9>
              <dotprod_1033@12>
              </<dotprod_1033@12:1>@15>
              <make_array_1030@17>
                <k_make_array_u_1178@20>
                  <fail_1435@23>
    inlined horn clauses:
      P[<fail_1435@23:0>](<fail_1435@23:0>:bool)|- bot
      
      P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
      ((0 > <k_make_array_u_1178@20:0>) && <fail_1435@23:0>) |- P[<fail_1435@23:0>](
      <fail_1435@23:0>:bool)
      
      P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
      (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
      |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
      
       ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                <dotprod_1033@12:4>:int)
    begin ParamSubstInfer.infer(1188)[3]
      
    end ParamSubstInfer.infer(1188)[3] (0.023996 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(1190)[3]
      
    end RefTypeInfer.elim_coeffs(1190)[3] (0.001000 sec.)
    begin GenHcSolver.solve(1349)[3]
      Horn clauses:
        P[<fail_1435@23:0>](<fail_1435@23:0>:bool)|- bot
        
        P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
        ((0 > <k_make_array_u_1178@20:0>) && <fail_1435@23:0>) |- P[<fail_1435@23:0>](
        <fail_1435@23:0>:bool)
        
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
        |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        P[<fail_1435@23:0>](<fail_1435@23:0>:bool) = false
      upper bounds:
        P[<fail_1435@23:0>](var5:bool) = true
      begin GenHcSolver.classify_pids(2281)[4]
        output:
          [<fail_1435@23:0>]
      end GenHcSolver.classify_pids(2281)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(2284)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(2285)[5]
          begin InterpProver.interpolate_fresh(2286)[6]
            begin InterpProver.interpolate_log(2287)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(2288)[8]
                begin InterpProver.interpolate_simplify(2289)[9]
                  begin InterpProver.interpolate_quick(2302)[10]
                    
                  end InterpProver.interpolate_quick(2302)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(2306)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(2306)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(2289)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(2288)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(2287)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(2286)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(2285)[5] (0.000000 sec.)
        output:
          P[<fail_1435@23:0>](<fail_1435@23:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(2284)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
        (0 > <k_make_array_u_1178@20:0>) |- bot
        
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
        |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
      upper bounds:
        P[<<dotprod_1033@12:1>@15:0>](var6:int,var7:int) = (0 <= var7)
      begin GenHcSolver.classify_pids(3370)[4]
        output:
          [<<dotprod_1033@12:1>@15:0>]
      end GenHcSolver.classify_pids(3370)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
      nub:(not (0 <= <<dotprod_1033@12:1>@15:0>))
      begin ApronInterface.convex_hull_interpolate(3373)[4]
        lb:((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        nub:(not (0 <= <<dotprod_1033@12:1>@15:0>))
        lb':((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        nub':(not (0 <= <<dotprod_1033@12:1>@15:0>))
        begin InterpProver.interpolate(3374)[5]
          begin InterpProver.interpolate_fresh(3375)[6]
            begin InterpProver.interpolate_log(3376)[7]
              input1: ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
              input2: (not (0 <= <<dotprod_1033@12:1>@15:0>))
              begin InterpProver.interpolate_check(3377)[8]
                begin InterpProver.interpolate_simplify(3378)[9]
                  begin InterpProver.interpolate_quick(3411)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(3420)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(3421)[12]
                        begin CsisatInterface.interpolate_csisat_log(3422)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 & (1 + v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0) <= v_sep_dotprod_1033_sep_12_sep_0)
                          input2: (1 + v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(3423)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(3423)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(3422)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(3421)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(3420)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(3411)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(3378)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(3377)[8] (0.001000 sec.)
              output: (0 <= <<dotprod_1033@12:1>@15:0>)
            end InterpProver.interpolate_log(3376)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(3375)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(3374)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
          (0 <= <<dotprod_1033@12:1>@15:0>)
      end ApronInterface.convex_hull_interpolate(3373)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        ((<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>) && (0 > <<dotprod_1033@12:1>@15:0>)) |- bot
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      upper bounds:
        P[<dotprod_1033@12:4>](var8:int,var9:int,var10:int) = ((var9 >= var8) || (0 <= var9))
      begin GenHcSolver.classify_pids(4437)[4]
        output:
          [<dotprod_1033@12:4>]
      end GenHcSolver.classify_pids(4437)[4] (0.000000 sec.)
      lb:((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      nub:(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
      begin ApronInterface.convex_hull_interpolate(4440)[4]
        lb:((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        nub:(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
        lb':((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        nub':(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
        begin InterpProver.interpolate(4441)[5]
          begin InterpProver.interpolate_fresh(4442)[6]
            begin InterpProver.interpolate_log(4443)[7]
              input1: ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
              input2: (not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
              begin InterpProver.interpolate_check(4444)[8]
                begin InterpProver.interpolate_simplify(4445)[9]
                  begin InterpProver.interpolate_quick(4492)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(4501)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(4502)[12]
                        begin CsisatInterface.interpolate_csisat_log(4503)[13]
                          input1: 0 = v_sep_dotprod_1033_sep_12_sep_3
                          input2: ((1 + v_sep_dotprod_1033_sep_12_sep_3) <= 0 & (1 + v_sep_dotprod_1033_sep_12_sep_3) <= v_sep_dotprod_1033_sep_12_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(4504)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(4504)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_12_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(4503)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_12_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_12_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(4502)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(4501)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(4492)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(4445)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(4444)[8] (0.001000 sec.)
              output: (0 <= <dotprod_1033@12:3>)
            end InterpProver.interpolate_log(4443)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(4442)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(4441)[5] (0.001000 sec.)
        output:
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
          (0 <= <dotprod_1033@12:3>)
      end ApronInterface.convex_hull_interpolate(4440)[4] (0.002000 sec.)
      begin HcSolver.check_validity(4661)[4]
        input:
          P[<fail_1435@23:0>](<fail_1435@23:0>:bool)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
          ((0 > <k_make_array_u_1178@20:0>) && <fail_1435@23:0>) |- P[<fail_1435@23:0>](
          <fail_1435@23:0>:bool)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(4661)[4] (0.001999 sec.)
      solution:
        P[<fail_1435@23:0>](<fail_1435@23:0>:bool) = false
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        (0 <= <<dotprod_1033@12:1>@15:0>)
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        (0 <= <dotprod_1033@12:3>)
    end GenHcSolver.solve(1349)[3] (0.025996 sec.)
    begin GenHcSolver.solve(4933)[3]
      Horn clauses:
        P[<fail_1435@23:0>](<fail_1435@23:0>:bool)|- bot
        
        P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
        ((0 > <k_make_array_u_1178@20:0>) && <fail_1435@23:0>) |- P[<fail_1435@23:0>](
        <fail_1435@23:0>:bool)
        
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
        |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        P[<fail_1435@23:0>](<fail_1435@23:0>:bool) = false
      upper bounds:
        P[<fail_1435@23:0>](var12:bool) = true
      begin GenHcSolver.classify_pids(5865)[4]
        output:
          [<fail_1435@23:0>]
      end GenHcSolver.classify_pids(5865)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(5868)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(5871)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5871)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(5876)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(5876)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(5879)[5]
          begin InterpProver.interpolate_fresh(5880)[6]
            begin InterpProver.interpolate_log(5881)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(5882)[8]
                begin InterpProver.interpolate_simplify(5883)[9]
                  begin InterpProver.interpolate_quick(5898)[10]
                    
                  end InterpProver.interpolate_quick(5898)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(5902)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(5902)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(5883)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(5882)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(5881)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(5880)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(5879)[5] (0.000000 sec.)
        output:
          P[<fail_1435@23:0>](<fail_1435@23:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(5868)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
        (0 > <k_make_array_u_1178@20:0>) |- bot
        
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
        |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
      upper bounds:
        P[<<dotprod_1033@12:1>@15:0>](var13:int,var14:int) = (0 <= var14)
      begin GenHcSolver.classify_pids(6973)[4]
        output:
          [<<dotprod_1033@12:1>@15:0>]
      end GenHcSolver.classify_pids(6973)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
      nub:(not (0 <= <<dotprod_1033@12:1>@15:0>))
      begin ApronInterface.convex_hull_interpolate(6976)[4]
        lb:((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
        nub:(not (0 <= <<dotprod_1033@12:1>@15:0>))
        begin ExtFormula.Formula.case_analysis_boolean(6988)[5]
          ts: ((<<dotprod_1033@12:1>@15:0> = 0) && (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(6988)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(6997)[5]
          ts: (0 > <<dotprod_1033@12:1>@15:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(6997)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@12:1>@15:0> = 0) && ((-1 + <dotprod_1033@12:0>) >= 0))
        nub':((-1 + (-1 * <<dotprod_1033@12:1>@15:0>)) >= 0)
        begin InterpProver.interpolate(7001)[5]
          begin InterpProver.interpolate_fresh(7002)[6]
            begin InterpProver.interpolate_log(7003)[7]
              input1: ((<<dotprod_1033@12:1>@15:0> = 0) && ((-1 + <dotprod_1033@12:0>) >= 0))
              input2: ((-1 + (-1 * <<dotprod_1033@12:1>@15:0>)) >= 0)
              begin InterpProver.interpolate_check(7004)[8]
                begin InterpProver.interpolate_simplify(7005)[9]
                  begin InterpProver.interpolate_quick(7042)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(7051)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(7052)[12]
                        begin CsisatInterface.interpolate_csisat_log(7053)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 & 1 <= v_sep_dotprod_1033_sep_12_sep_0)
                          input2: (1 + v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(7054)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(7054)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(7053)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(7052)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(7051)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(7042)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(7005)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(7004)[8] (0.001000 sec.)
              output: (0 <= <<dotprod_1033@12:1>@15:0>)
            end InterpProver.interpolate_log(7003)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(7002)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(7001)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
          (0 <= <<dotprod_1033@12:1>@15:0>)
      end ApronInterface.convex_hull_interpolate(6976)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
        ((<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>) && (0 > <<dotprod_1033@12:1>@15:0>)) |- bot
        
         ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                  <dotprod_1033@12:4>:int)
      lower bounds:
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      upper bounds:
        P[<dotprod_1033@12:4>](var15:int,var16:int,var17:int) = ((var16 >= var15) || (0 <= var16))
      begin GenHcSolver.classify_pids(8075)[4]
        output:
          [<dotprod_1033@12:4>]
      end GenHcSolver.classify_pids(8075)[4] (0.000000 sec.)
      lb:((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
      nub:(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
      begin ApronInterface.convex_hull_interpolate(8078)[4]
        lb:((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
        nub:(not ((<dotprod_1033@12:3> >= <dotprod_1033@12:0>) || (0 <= <dotprod_1033@12:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(8090)[5]
          ts: ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(8090)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(8110)[5]
          ts: ((<dotprod_1033@12:3> < <dotprod_1033@12:0>) && (0 > <dotprod_1033@12:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(8110)[5] (0.000000 sec.)
        lb':((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:3> = 0))
        nub':(((-1 + (-1 * <dotprod_1033@12:3>)) >= 0) &&
              (((-1 + (-1 * <dotprod_1033@12:3>)) + <dotprod_1033@12:0>) >= 0))
        begin InterpProver.interpolate(8116)[5]
          begin InterpProver.interpolate_fresh(8117)[6]
            begin InterpProver.interpolate_log(8118)[7]
              input1: ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:3> = 0))
              input2: (((-1 + (-1 * <dotprod_1033@12:3>)) >= 0) &&
                       (((-1 + (-1 * <dotprod_1033@12:3>)) + <dotprod_1033@12:0>) >= 0))
              begin InterpProver.interpolate_check(8119)[8]
                begin InterpProver.interpolate_simplify(8120)[9]
                  begin InterpProver.interpolate_quick(8184)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(8193)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(8194)[12]
                        begin CsisatInterface.interpolate_csisat_log(8195)[13]
                          input1: 0 = v_sep_dotprod_1033_sep_12_sep_3
                          input2: ((1 + v_sep_dotprod_1033_sep_12_sep_3) <= 0 & (1 + v_sep_dotprod_1033_sep_12_sep_3) <= v_sep_dotprod_1033_sep_12_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(8196)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(8196)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_12_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(8195)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_12_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_12_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(8194)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(8193)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(8184)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(8120)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(8119)[8] (0.001000 sec.)
              output: (0 <= <dotprod_1033@12:3>)
            end InterpProver.interpolate_log(8118)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(8117)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(8116)[5] (0.001000 sec.)
        output:
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
          (0 <= <dotprod_1033@12:3>)
      end ApronInterface.convex_hull_interpolate(8078)[4] (0.002000 sec.)
      begin HcSolver.check_validity(8357)[4]
        input:
          P[<fail_1435@23:0>](<fail_1435@23:0>:bool)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
          ((0 > <k_make_array_u_1178@20:0>) && <fail_1435@23:0>) |- P[<fail_1435@23:0>](
          <fail_1435@23:0>:bool)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8357)[4] (0.001999 sec.)
      solution:
        P[<fail_1435@23:0>](<fail_1435@23:0>:bool) = false
        P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int) =
        (0 <= <<dotprod_1033@12:1>@15:0>)
        P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,<dotprod_1033@12:4>:int) =
        (0 <= <dotprod_1033@12:3>)
    end GenHcSolver.solve(4933)[3] (0.025996 sec.)
    begin YhornInterface.solve(8629)[3]
      begin HcSolver.solve_ub(8630)[4]
        encoded:
          P[<fail_1435@23:0>](<fail_1435@23:0>:int)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
          ((0 > <k_make_array_u_1178@20:0>) && (<fail_1435@23:0> = 1)) |- P[<fail_1435@23:0>](
          <fail_1435@23:0>:int)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        input to Yhorn:
          P[<fail_1435@23:0>](<fail_1435@23:0>:int)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
          ((0 > <k_make_array_u_1178@20:0>) && (<fail_1435@23:0> = 1)) |- P[<fail_1435@23:0>](
          <fail_1435@23:0>:int)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = <dotprod_1033@12:3>) && (<dotprod_1033@12:4> = 0))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1435_sep_23_sep_0($8)) -> 1=0.
(($8-1=0) & (-$9>0)) & (v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($10,$9)) -> v_sep_fail_1435_sep_23_sep_0($8).
($11-$12<0) & (v_sep_dotprod_1033_sep_12_sep_4($12,$11,$13)) -> v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($12,$11).
($13=0) & ($13-$14=0) -> v_sep_dotprod_1033_sep_12_sep_4($12,$14,$13).


v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1435_sep_23_sep_0: X
....
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1435_sep_23_sep_0: X
...
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1435_sep_23_sep_0: X
....
v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0: X
v_sep_dotprod_1033_sep_12_sep_4: X
v_sep_fail_1435_sep_23_sep_0: X
....(0=0) & (v_sep_fail_1435_sep_23_sep_0($8)) -> 1=0.
(($8-1=0) & (-$9>0)) & (v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($10,$9)) -> v_sep_fail_1435_sep_23_sep_0($8).
($11-$12<0) & (v_sep_dotprod_1033_sep_12_sep_4($12,$11,$13)) -> v_sep_dotprod_1033_sep_12_sep_1_sep_15_sep_0($12,$11).
($13=0) & ($13-$14=0) -> v_sep_dotprod_1033_sep_12_sep_4($12,$14,$13).

        solution:
          P[<<dotprod_1033@12:1>@15:0>]($18:int,$20:int) = (0 <= $20)
          P[<dotprod_1033@12:4>]($23:int,$25:int,$27:int) = (0 <= $25)
          P[<fail_1435@23:0>]($15:bool) = false
        
      end HcSolver.solve_ub(8630)[4] (0.009999 sec.)
      begin HcSolver.check_validity(8740)[4]
        input:
          P[<fail_1435@23:0>](<fail_1435@23:0>:bool)|- bot
          
          P[<<dotprod_1033@12:1>@15:0>](<k_make_array_u_1178@20:1>:int,<k_make_array_u_1178@20:0>:int),
          ((0 > <k_make_array_u_1178@20:0>) && <fail_1435@23:0>) |- P[<fail_1435@23:0>](
          <fail_1435@23:0>:bool)
          
          P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int,<dotprod_1033@12:4>:int),
          (<<dotprod_1033@12:1>@15:0> < <dotprod_1033@12:0>)
          |- P[<<dotprod_1033@12:1>@15:0>](<dotprod_1033@12:0>:int,<<dotprod_1033@12:1>@15:0>:int)
          
           ((<dotprod_1033@12:4> = 0) && (<dotprod_1033@12:4> = <dotprod_1033@12:3>))
          |- P[<dotprod_1033@12:4>](<dotprod_1033@12:0>:int,<dotprod_1033@12:3>:int,
                                    <dotprod_1033@12:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(8740)[4] (0.001999 sec.)
      solution:
        P[<<dotprod_1033@12:1>@15:0>]($18:int,$20:int) = (0 <= $20)
        P[<dotprod_1033@12:4>]($23:int,$25:int,$27:int) = (0 <= $25)
        P[<fail_1435@23:0>]($15:bool) = false
    end YhornInterface.solve(8629)[3] (0.011998 sec.)
    
  end RefTypeInfer.infer_etrs(182)[2] (0.095985 sec.)
  refinement types:
    main_1428: X
    f_1432: v1:int -> X
    f_1433: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:int -> (v3:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:{v2:int | (0 <= v2)} -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:{v11:int | (0 <= v10)} -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1178: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1435: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1434: var37:int -> var36:int -> var35:unit -> X
    f_dotprod_1429: var52:int ->
                    var51:int ->
                    var50:int ->
                    (var49:int -> X) ->
                    (var47:int -> (var46:int -> X) -> X) -> (var43:int -> (var42:int -> X) -> X) -> var39:int -> X
    f_dotprod_1430: var68:int ->
                    var67:int ->
                    var66:int ->
                    var65:int ->
                    (var64:int -> X) ->
                    (var62:int -> (var61:int -> X) -> X) -> (var58:int -> (var57:int -> X) -> X) -> var54:int -> X
    f_main_1431: var74:int -> var73:int -> (var72:unit -> X) -> var70:int -> X
    k_make_array_u_1189: var80:int -> var79:int -> (var78:int -> X) -> var76:unit -> X
  abstraction types:
    main_1428: X
    f_1432: v1:int -> X
    f_1433: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:int -> (v3:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int[v2 -> (0 <= v2)] -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int[v11 -> (
                                                                    0 <= v10)] -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1178: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1435: v1:bool -> (v2:unit -> X) -> X
    f_1434: var37:int -> var36:int -> var35:unit -> X
    f_dotprod_1429: var52:int ->
                    var51:int ->
                    var50:int ->
                    (var49:int -> X) ->
                    (var47:int -> (var46:int -> X) -> X) -> (var43:int -> (var42:int -> X) -> X) -> var39:int -> X
    f_dotprod_1430: var68:int ->
                    var67:int ->
                    var66:int ->
                    var65:int ->
                    (var64:int -> X) ->
                    (var62:int -> (var61:int -> X) -> X) -> (var58:int -> (var57:int -> X) -> X) -> var54:int -> X
    f_main_1431: var74:int -> var73:int -> (var72:unit -> X) -> var70:int -> X
    k_make_array_u_1189: var80:int -> var79:int -> (var78:int -> X) -> var76:unit -> X
  
end AbsTypeInfer.refine(181)[1] (0.105983 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 1

Program with abstraction types (CEGAR-cycle 1)::
Main: main_1428
  main_1428 -> (rand_int f_1432)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      i_1037 >= n_1034) -> (k_dotprod_1240 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036))
  f_1432 x_1386 -> (rand_int (f_1433 x_1386))
  f_1433 x_1386 x_1399 -> (main_1039 x_1386 x_1399 (f_1434 x_1386 x_1399))
  f_1434 x_1386 x_1399 x_1383 -> end
  f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 ->
      (v2_1036 i_1037 (f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036))
  f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (sum_1038 + (x_1266 * x_1267)) k_dotprod_1240)
  f_main_1431 n_1041 z_1040 k_main_1315 x_1350 -> (k_main_1315 ())
  fail_1435 b k -> {fail} => (k ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when b_1190 ->
      (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when (not b_1190) ->
      (fail_1435 true (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172))
  k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 -> (k_make_array_1172 0)
  main_1039 z_1040 n_1041 k_main_1315 when (z_1040 = 0) ->
      (dotprod_1033 n_1041 (make_array_1030 n_1041) (make_array_1030 n_1041) z_1040 z_1040
        (f_main_1431 n_1041 z_1040 k_main_1315))
  main_1039 z_1040 n_1041 k_main_1315 when (not (z_1040 = 0)) -> (k_main_1315 ())
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (0 <= i_1032) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (not (0 <= i_1032)) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 false)
Types:
  main_1428 : X
  dotprod_1033 : (int ->
                  (x_3:int[x_3 >= 0] -> (int -> X) -> X) ->
                  (int -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1435 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Error trace::
  main_1428 ... --> 
  f_1432 ... --> 
  f_1433 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1178 [2/2] ... --> 
  fail_1435 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 1; 0

(1-3) Checking counter-example ... DONE!

(1-4) Discovering predicates ... 
begin AbsTypeInfer.refine(9406)[1]
  program:
    main_1428  | true = ((Random.int 0) f_1432)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 | (
    i_1037 >= n_1034) = (k_dotprod_1240 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1429 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1240
                                                       v1_1035
                                                       v2_1036))
    f_1432 x_1386 | true = ((Random.int 0) (f_1433 x_1386))
    f_1433 x_1386 x_1399 | true = (main_1039 x_1386
                                             x_1399
                                             (f_1434 x_1386
                                                     x_1399))
    f_1434 x_1386 x_1399 x_1383 | true = end
    f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 | true = (
    v2_1036 i_1037
            (f_dotprod_1430 i_1037
                            n_1034
                            sum_1038
                            x_1266
                            k_dotprod_1240
                            v1_1035
                            v2_1036))
    f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 (sum_1038 + (x_1266 * x_1267))
                 k_dotprod_1240)
    f_main_1431 n_1041 z_1040 k_main_1315 x_1350 | true = (k_main_1315 ())
    fail_1435 b k | true = (fail ())
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 | b_1190 = (
    k_make_array_u_1189 i_1032
                        n_1031
                        k_make_array_1172
                        ())
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 | (not b_1190) = (
    fail_1435 true
              (k_make_array_u_1189 i_1032
                                   n_1031
                                   k_make_array_1172))
    k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 | true = (
    k_make_array_1172 0)
    main_1039 z_1040 n_1041 k_main_1315 | (z_1040 = 0) = (dotprod_1033
                                                            n_1041
                                                            (make_array_1030 n_1041)
                                                            (make_array_1030 n_1041)
                                                            z_1040
                                                            z_1040
                                                            (f_main_1431 n_1041
                                                                    z_1040
                                                                    k_main_1315))
    main_1039 z_1040 n_1041 k_main_1315 | (not (z_1040 = 0)) = (k_main_1315 ())
    make_array_1030 n_1031 i_1032 k_make_array_1172 | (0 <= i_1032) = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1172
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1172 | (not (0 <= i_1032)) = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1172
                        false)
    main_1428:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1432:int -> X
    f_1433:int -> int -> X
    f_1434:int -> int -> unit -> X
    f_dotprod_1429:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1430:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1431:int -> int -> (unit -> X) -> int -> X
    fail_1435:bool -> (unit -> X) -> X
    k_make_array_u_1178:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1189:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1432,f_1433,f_1434,f_dotprod_1429,f_dotprod_1430,f_main_1431,k_make_array_u_1178,k_make_array_u_1189,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:1:0
  error traces:
    [true.nop(<f_1432@29:0> = var81)
     [true.nop((<f_1433@32:0> = <f_1432@29:0>) && (<f_1433@32:1> = var82))
      [true.((<main_1039@34:0> = <f_1433@32:0>) && (<main_1039@34:1> = <f_1433@32:1>))
       [(<main_1039@34:0> = 0).
        ((<dotprod_1033@37:0> = <main_1039@34:1>) &&
         ((<dotprod_1033@37:3> = <main_1039@34:0>) && (<dotprod_1033@37:4> = <main_1039@34:0>)))
        [(not (<dotprod_1033@37:3> >= <dotprod_1033@37:0>)).(<<dotprod_1033@37:1>@40:0> = <dotprod_1033@37:3>)
         [true.((<make_array_1030@42:0> = <main_1039@34:1>) && (<make_array_1030@42:1> = <<dotprod_1033@37:1>@40:0>))
          [(0 <= <make_array_1030@42:1>).
           ((<k_make_array_u_1178@45:0> = <make_array_1030@42:1>) &&
            ((<k_make_array_u_1178@45:1> = <make_array_1030@42:0>) &&
             (<k_make_array_u_1178@45:3> = (<make_array_1030@42:1> < <make_array_1030@42:0>))))
           [(not <k_make_array_u_1178@45:3>).(<fail_1435@48:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(9407)[2]
    horn clauses:
      P[<fail_1435@48:0>](<fail_1435@48:0>:bool)|- bot
      
      P[<k_make_array_u_1178@45:3>](<k_make_array_u_1178@45:0>:int,<k_make_array_u_1178@45:1>:int,false:bool),
      <fail_1435@48:0> |- P[<fail_1435@48:0>](<fail_1435@48:0>:bool)
      
      P[<make_array_1030@42:1>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
      ((0 <= <k_make_array_u_1178@45:0>) &&
       (<k_make_array_u_1178@45:3> = (<k_make_array_u_1178@45:0> < <k_make_array_u_1178@45:1>)))
      |- P[<k_make_array_u_1178@45:3>](<k_make_array_u_1178@45:0>:int,
                                       <k_make_array_u_1178@45:1>:int,
                                       <k_make_array_u_1178@45:3>:bool)
      
      P[<main_1039@34:1>](0:int,<make_array_1030@42:0>:int),
      P[<<dotprod_1033@37:1>@40:0>](<make_array_1030@42:0>:int,<make_array_1030@42:1>:int)|- P[<make_array_1030@42:1>](
      <make_array_1030@42:0>:int,<make_array_1030@42:1>:int)
      
      P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
      (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
      |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
      
      P[<main_1039@34:1>](<dotprod_1033@37:4>:int,<dotprod_1033@37:0>:int),
      ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                <dotprod_1033@37:4>:int)
      
      P[<f_1433@32:1>](<main_1039@34:0>:int,<main_1039@34:1>:int)|- P[<main_1039@34:1>](
      <main_1039@34:0>:int,<main_1039@34:1>:int)
      
      P[<f_1432@29:0>](<f_1433@32:0>:int)|- P[<f_1433@32:1>](<f_1433@32:0>:int,
                                                             <f_1433@32:1>:int)
      
      |- P[<f_1432@29:0>](<f_1432@29:0>:int)
    call trees:
      <main_1428@26>
        <f_1432@29>
          <f_1433@32>
            <main_1039@34>
              <dotprod_1033@37>
              </<dotprod_1033@37:1>@40>
              <make_array_1030@42>
                <k_make_array_u_1178@45>
                  <fail_1435@48>
    inlined horn clauses:
      P[<fail_1435@48:0>](<fail_1435@48:0>:bool)|- bot
      
      P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
      ((0 <= <k_make_array_u_1178@45:0>) &&
       ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && <fail_1435@48:0>))
      |- P[<fail_1435@48:0>](<fail_1435@48:0>:bool)
      
      P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
      (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
      |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
      
       ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                <dotprod_1033@37:4>:int)
    begin ParamSubstInfer.infer(10631)[3]
      
    end ParamSubstInfer.infer(10631)[3] (0.059991 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(10633)[3]
      
    end RefTypeInfer.elim_coeffs(10633)[3] (0.001000 sec.)
    begin GenHcSolver.solve(10859)[3]
      Horn clauses:
        P[<fail_1435@48:0>](<fail_1435@48:0>:bool)|- bot
        
        P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
        ((0 <= <k_make_array_u_1178@45:0>) &&
         ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && <fail_1435@48:0>))
        |- P[<fail_1435@48:0>](<fail_1435@48:0>:bool)
        
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
        (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
        |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
        
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        P[<fail_1435@48:0>](<fail_1435@48:0>:bool) = false
      upper bounds:
        P[<fail_1435@48:0>](var84:bool) = true
      begin GenHcSolver.classify_pids(11866)[4]
        output:
          [<fail_1435@48:0>]
      end GenHcSolver.classify_pids(11866)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(11869)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(11870)[5]
          begin InterpProver.interpolate_fresh(11871)[6]
            begin InterpProver.interpolate_log(11872)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(11873)[8]
                begin InterpProver.interpolate_simplify(11874)[9]
                  begin InterpProver.interpolate_quick(11887)[10]
                    
                  end InterpProver.interpolate_quick(11887)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(11891)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(11891)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(11874)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(11873)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(11872)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(11871)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(11870)[5] (0.000000 sec.)
        output:
          P[<fail_1435@48:0>](<fail_1435@48:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(11869)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
        ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && (0 <= <k_make_array_u_1178@45:0>)) |- bot
        
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
        (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
        |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
        
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
      upper bounds:
        P[<<dotprod_1033@37:1>@40:0>](var85:int,var86:int) = ((var86 < var85) || (0 > var86))
      begin GenHcSolver.classify_pids(13299)[4]
        output:
          [<<dotprod_1033@37:1>@40:0>]
      end GenHcSolver.classify_pids(13299)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
      nub:(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
      begin ApronInterface.convex_hull_interpolate(13302)[4]
        lb:((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        nub:(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
        lb':((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        nub':(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
        begin InterpProver.interpolate(13303)[5]
          begin InterpProver.interpolate_fresh(13304)[6]
            begin InterpProver.interpolate_log(13305)[7]
              input1: ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
              input2: (not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
              begin InterpProver.interpolate_check(13306)[8]
                begin InterpProver.interpolate_simplify(13307)[9]
                  begin InterpProver.interpolate_quick(13362)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(13371)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(13372)[12]
                        begin CsisatInterface.interpolate_csisat_log(13373)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0 & (1 + v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= v_sep_dotprod_1033_sep_37_sep_0)
                          input2: (0 <= v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0 & v_sep_dotprod_1033_sep_37_sep_0 <= v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(13374)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(13374)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(13373)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(13372)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(13371)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(13362)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(13307)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(13306)[8] (0.001000 sec.)
              output: ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
            end InterpProver.interpolate_log(13305)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(13304)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(13303)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
          ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
      end ApronInterface.convex_hull_interpolate(13302)[4] (0.001000 sec.)
      Horn clauses:
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      upper bounds:
        P[<dotprod_1033@37:4>](var87:int,var88:int,var89:int) = true
      begin GenHcSolver.classify_pids(13958)[4]
        output:
          [<dotprod_1033@37:4>]
      end GenHcSolver.classify_pids(13958)[4] (0.000000 sec.)
      lb:((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(13961)[4]
        lb:((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        nub:false
        lb':((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        nub':false
        begin InterpProver.interpolate(13962)[5]
          begin InterpProver.interpolate_fresh(13963)[6]
            begin InterpProver.interpolate_log(13964)[7]
              input1: ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
              input2: false
              begin InterpProver.interpolate_check(13965)[8]
                begin InterpProver.interpolate_simplify(13966)[9]
                  begin InterpProver.interpolate_quick(13993)[10]
                    
                  end InterpProver.interpolate_quick(13993)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(13966)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(13965)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(13964)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(13963)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(13962)[5] (0.000000 sec.)
        output:
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) = true
      end ApronInterface.convex_hull_interpolate(13961)[4] (0.000000 sec.)
      begin HcSolver.check_validity(14091)[4]
        input:
          P[<fail_1435@48:0>](<fail_1435@48:0>:bool)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
          ((0 <= <k_make_array_u_1178@45:0>) &&
           ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && <fail_1435@48:0>))
          |- P[<fail_1435@48:0>](<fail_1435@48:0>:bool)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(14091)[4] (0.001000 sec.)
      solution:
        P[<fail_1435@48:0>](<fail_1435@48:0>:bool) = false
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) = true
    end GenHcSolver.solve(10859)[3] (0.011998 sec.)
    begin GenHcSolver.solve(14326)[3]
      Horn clauses:
        P[<fail_1435@48:0>](<fail_1435@48:0>:bool)|- bot
        
        P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
        ((0 <= <k_make_array_u_1178@45:0>) &&
         ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && <fail_1435@48:0>))
        |- P[<fail_1435@48:0>](<fail_1435@48:0>:bool)
        
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
        (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
        |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
        
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        P[<fail_1435@48:0>](<fail_1435@48:0>:bool) = false
      upper bounds:
        P[<fail_1435@48:0>](var91:bool) = true
      begin GenHcSolver.classify_pids(15333)[4]
        output:
          [<fail_1435@48:0>]
      end GenHcSolver.classify_pids(15333)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(15336)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(15339)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(15339)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(15344)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(15344)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(15347)[5]
          begin InterpProver.interpolate_fresh(15348)[6]
            begin InterpProver.interpolate_log(15349)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(15350)[8]
                begin InterpProver.interpolate_simplify(15351)[9]
                  begin InterpProver.interpolate_quick(15366)[10]
                    
                  end InterpProver.interpolate_quick(15366)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(15370)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(15370)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(15351)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(15350)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(15349)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(15348)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(15347)[5] (0.001000 sec.)
        output:
          P[<fail_1435@48:0>](<fail_1435@48:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(15336)[4] (0.001000 sec.)
      Horn clauses:
        P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
        ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && (0 <= <k_make_array_u_1178@45:0>)) |- bot
        
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
        (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
        |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
        
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
      upper bounds:
        P[<<dotprod_1033@37:1>@40:0>](var92:int,var93:int) = ((var93 < var92) || (0 > var93))
      begin GenHcSolver.classify_pids(16785)[4]
        output:
          [<<dotprod_1033@37:1>@40:0>]
      end GenHcSolver.classify_pids(16785)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
      nub:(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
      begin ApronInterface.convex_hull_interpolate(16788)[4]
        lb:((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
        nub:(not ((<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>) || (0 > <<dotprod_1033@37:1>@40:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(16800)[5]
          ts: ((<<dotprod_1033@37:1>@40:0> = 0) && (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(16800)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(16820)[5]
          ts: ((<<dotprod_1033@37:1>@40:0> >= <dotprod_1033@37:0>) && (0 <= <<dotprod_1033@37:1>@40:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(16820)[5] (0.001000 sec.)
        lb':((<<dotprod_1033@37:1>@40:0> = 0) && ((-1 + <dotprod_1033@37:0>) >= 0))
        nub':(((<<dotprod_1033@37:1>@40:0> + (-1 * <dotprod_1033@37:0>)) >= 0) && (<<dotprod_1033@37:1>@40:0> >= 0))
        begin InterpProver.interpolate(16826)[5]
          begin InterpProver.interpolate_fresh(16827)[6]
            begin InterpProver.interpolate_log(16828)[7]
              input1: ((<<dotprod_1033@37:1>@40:0> = 0) && ((-1 + <dotprod_1033@37:0>) >= 0))
              input2: (((<<dotprod_1033@37:1>@40:0> + (-1 * <dotprod_1033@37:0>)) >= 0) &&
                       (<<dotprod_1033@37:1>@40:0> >= 0))
              begin InterpProver.interpolate_check(16829)[8]
                begin InterpProver.interpolate_simplify(16830)[9]
                  begin InterpProver.interpolate_quick(16887)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(16896)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(16897)[12]
                        begin CsisatInterface.interpolate_csisat_log(16898)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0 & 1 <= v_sep_dotprod_1033_sep_37_sep_0)
                          input2: (0 <= v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0 & v_sep_dotprod_1033_sep_37_sep_0 <= v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(16899)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(16899)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(16898)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1033_sep_37_sep_0 + 2*v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(16897)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(16896)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(16887)[10] (0.002000 sec.)
                  
                end InterpProver.interpolate_simplify(16830)[9] (0.002000 sec.)
                
              end InterpProver.interpolate_check(16829)[8] (0.002000 sec.)
              output: ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
            end InterpProver.interpolate_log(16828)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(16827)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(16826)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
          ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
      end ApronInterface.convex_hull_interpolate(16788)[4] (0.003000 sec.)
      Horn clauses:
         ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                  <dotprod_1033@37:4>:int)
      lower bounds:
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) =
        ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      upper bounds:
        P[<dotprod_1033@37:4>](var94:int,var95:int,var96:int) = true
      begin GenHcSolver.classify_pids(17483)[4]
        output:
          [<dotprod_1033@37:4>]
      end GenHcSolver.classify_pids(17483)[4] (0.000000 sec.)
      lb:((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(17486)[4]
        lb:((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(17498)[5]
          ts: ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(17498)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(17506)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(17506)[5] (0.000000 sec.)
        lb':((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:3> = 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(17509)[5]
          begin InterpProver.interpolate_fresh(17510)[6]
            begin InterpProver.interpolate_log(17511)[7]
              input1: ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:3> = 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(17512)[8]
                begin InterpProver.interpolate_simplify(17513)[9]
                  begin InterpProver.interpolate_quick(17541)[10]
                    
                  end InterpProver.interpolate_quick(17541)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(17513)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(17512)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(17511)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(17510)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(17509)[5] (0.001000 sec.)
        output:
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) = true
      end ApronInterface.convex_hull_interpolate(17486)[4] (0.001000 sec.)
      begin HcSolver.check_validity(17641)[4]
        input:
          P[<fail_1435@48:0>](<fail_1435@48:0>:bool)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
          ((0 <= <k_make_array_u_1178@45:0>) &&
           ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && <fail_1435@48:0>))
          |- P[<fail_1435@48:0>](<fail_1435@48:0>:bool)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(17641)[4] (0.002000 sec.)
      solution:
        P[<fail_1435@48:0>](<fail_1435@48:0>:bool) = false
        P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int) =
        ((1 + <<dotprod_1033@37:1>@40:0>) <= <dotprod_1033@37:0>)
        P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,<dotprod_1033@37:4>:int) = true
    end GenHcSolver.solve(14326)[3] (0.023997 sec.)
    begin YhornInterface.solve(17876)[3]
      begin HcSolver.solve_ub(17877)[4]
        encoded:
          P[<fail_1435@48:0>](<fail_1435@48:0>:int)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
          ((0 <= <k_make_array_u_1178@45:0>) &&
           ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && (<fail_1435@48:0> = 1)))
          |- P[<fail_1435@48:0>](<fail_1435@48:0>:int)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        input to Yhorn:
          P[<fail_1435@48:0>](<fail_1435@48:0>:int)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
          ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) &&
           ((0 <= <k_make_array_u_1178@45:0>) && (<fail_1435@48:0> = 1))) |- P[<fail_1435@48:0>](
          <fail_1435@48:0>:int)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = <dotprod_1033@37:3>) && (<dotprod_1033@37:4> = 0))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1435_sep_48_sep_0($71)) -> 1=0.
(($71-1=0) & (-$72<=0) & ($72-$73>=0)) & (v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($73,$72)) -> v_sep_fail_1435_sep_48_sep_0($71).
($74-$75<0) & (v_sep_dotprod_1033_sep_37_sep_4($75,$74,$76)) -> v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($75,$74).
($76=0) & ($76-$77=0) -> v_sep_dotprod_1033_sep_37_sep_4($75,$77,$76).


v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1435_sep_48_sep_0: X
....
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1435_sep_48_sep_0: X
...
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1435_sep_48_sep_0: X
....
v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0: X
v_sep_dotprod_1033_sep_37_sep_4: X
v_sep_fail_1435_sep_48_sep_0: X
....(0=0) & (v_sep_fail_1435_sep_48_sep_0($71)) -> 1=0.
(($71-1=0) & (-$72<=0) & ($72-$73>=0)) & (v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($73,$72)) -> v_sep_fail_1435_sep_48_sep_0($71).
($74-$75<0) & (v_sep_dotprod_1033_sep_37_sep_4($75,$74,$76)) -> v_sep_dotprod_1033_sep_37_sep_1_sep_40_sep_0($75,$74).
($76=0) & ($76-$77=0) -> v_sep_dotprod_1033_sep_37_sep_4($75,$77,$76).

        solution:
          P[<<dotprod_1033@37:1>@40:0>]($81:int,$83:int) = ((1 + $83) <= $81)
          P[<dotprod_1033@37:4>]($86:int,$88:int,$90:int) = true
          P[<fail_1435@48:0>]($78:bool) = false
        
      end HcSolver.solve_ub(17877)[4] (0.011998 sec.)
      begin HcSolver.check_validity(18035)[4]
        input:
          P[<fail_1435@48:0>](<fail_1435@48:0>:bool)|- bot
          
          P[<<dotprod_1033@37:1>@40:0>](<k_make_array_u_1178@45:1>:int,<k_make_array_u_1178@45:0>:int),
          ((0 <= <k_make_array_u_1178@45:0>) &&
           ((<k_make_array_u_1178@45:0> >= <k_make_array_u_1178@45:1>) && <fail_1435@48:0>))
          |- P[<fail_1435@48:0>](<fail_1435@48:0>:bool)
          
          P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int,<dotprod_1033@37:4>:int),
          (<<dotprod_1033@37:1>@40:0> < <dotprod_1033@37:0>)
          |- P[<<dotprod_1033@37:1>@40:0>](<dotprod_1033@37:0>:int,<<dotprod_1033@37:1>@40:0>:int)
          
           ((<dotprod_1033@37:4> = 0) && (<dotprod_1033@37:4> = <dotprod_1033@37:3>))
          |- P[<dotprod_1033@37:4>](<dotprod_1033@37:0>:int,<dotprod_1033@37:3>:int,
                                    <dotprod_1033@37:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(18035)[4] (0.001000 sec.)
      solution:
        P[<<dotprod_1033@37:1>@40:0>]($81:int,$83:int) = ((1 + $83) <= $81)
        P[<dotprod_1033@37:4>]($86:int,$88:int,$90:int) = true
        P[<fail_1435@48:0>]($78:bool) = false
    end YhornInterface.solve(17876)[3] (0.012998 sec.)
    
  end RefTypeInfer.infer_etrs(9407)[2] (0.116983 sec.)
  refinement types:
    main_1428: X
    f_1432: v1:int -> X
    f_1433: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:int -> (v3:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:{v2:int | ((1 + v2) <= v1)} -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1178: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1435: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1434: var116:int -> var115:int -> var114:unit -> X
    f_dotprod_1429: var131:int ->
                    var130:int ->
                    var129:int ->
                    (var128:int -> X) ->
                    (var126:int -> (var125:int -> X) -> X) -> (var122:int -> (var121:int -> X) -> X) -> var118:int -> X
    f_dotprod_1430: var147:int ->
                    var146:int ->
                    var145:int ->
                    var144:int ->
                    (var143:int -> X) ->
                    (var141:int -> (var140:int -> X) -> X) -> (var137:int -> (var136:int -> X) -> X) -> var133:int -> X
    f_main_1431: var153:int -> var152:int -> (var151:unit -> X) -> var149:int -> X
    k_make_array_u_1189: var159:int -> var158:int -> (var157:int -> X) -> var155:unit -> X
  abstraction types:
    main_1428: X
    f_1432: v1:int -> X
    f_1433: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:int -> (v3:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int[v2 -> ((1 + v2) <= v1)] -> (v3:int -> X) -> X) ->
                  (v6:int -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1178: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1435: v1:bool -> (v2:unit -> X) -> X
    f_1434: var116:int -> var115:int -> var114:unit -> X
    f_dotprod_1429: var131:int ->
                    var130:int ->
                    var129:int ->
                    (var128:int -> X) ->
                    (var126:int -> (var125:int -> X) -> X) -> (var122:int -> (var121:int -> X) -> X) -> var118:int -> X
    f_dotprod_1430: var147:int ->
                    var146:int ->
                    var145:int ->
                    var144:int ->
                    (var143:int -> X) ->
                    (var141:int -> (var140:int -> X) -> X) -> (var137:int -> (var136:int -> X) -> X) -> var133:int -> X
    f_main_1431: var153:int -> var152:int -> (var151:unit -> X) -> var149:int -> X
    k_make_array_u_1189: var159:int -> var158:int -> (var157:int -> X) -> var155:unit -> X
  
end AbsTypeInfer.refine(9406)[1] (0.118982 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 1

Program with abstraction types (CEGAR-cycle 2)::
Main: main_1428
  main_1428 -> (rand_int f_1432)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      i_1037 >= n_1034) -> (k_dotprod_1240 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036))
  f_1432 x_1386 -> (rand_int (f_1433 x_1386))
  f_1433 x_1386 x_1399 -> (main_1039 x_1386 x_1399 (f_1434 x_1386 x_1399))
  f_1434 x_1386 x_1399 x_1383 -> end
  f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 ->
      (v2_1036 i_1037 (f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036))
  f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (sum_1038 + (x_1266 * x_1267)) k_dotprod_1240)
  f_main_1431 n_1041 z_1040 k_main_1315 x_1350 -> (k_main_1315 ())
  fail_1435 b k -> {fail} => (k ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when b_1190 ->
      (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when (not b_1190) ->
      (fail_1435 true (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172))
  k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 -> (k_make_array_1172 0)
  main_1039 z_1040 n_1041 k_main_1315 when (z_1040 = 0) ->
      (dotprod_1033 n_1041 (make_array_1030 n_1041) (make_array_1030 n_1041) z_1040 z_1040
        (f_main_1431 n_1041 z_1040 k_main_1315))
  main_1039 z_1040 n_1041 k_main_1315 when (not (z_1040 = 0)) -> (k_main_1315 ())
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (0 <= i_1032) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (not (0 <= i_1032)) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 false)
Types:
  main_1428 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (int -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1435 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_1428 ... --> 
  f_1432 ... --> 
  f_1433 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1178 [1/2] ... --> 
  k_make_array_u_1189 ... --> 
  f_dotprod_1429 ... --> 
  make_array_1030 [2/2] ... --> 
  k_make_array_u_1178 [2/2] ... --> 
  fail_1435 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 1; 0

(2-3) Checking counter-example ... DONE!

(2-4) Discovering predicates ... 
begin AbsTypeInfer.refine(18916)[1]
  program:
    main_1428  | true = ((Random.int 0) f_1432)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 | (
    i_1037 >= n_1034) = (k_dotprod_1240 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1429 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1240
                                                       v1_1035
                                                       v2_1036))
    f_1432 x_1386 | true = ((Random.int 0) (f_1433 x_1386))
    f_1433 x_1386 x_1399 | true = (main_1039 x_1386
                                             x_1399
                                             (f_1434 x_1386
                                                     x_1399))
    f_1434 x_1386 x_1399 x_1383 | true = end
    f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 | true = (
    v2_1036 i_1037
            (f_dotprod_1430 i_1037
                            n_1034
                            sum_1038
                            x_1266
                            k_dotprod_1240
                            v1_1035
                            v2_1036))
    f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 (sum_1038 + (x_1266 * x_1267))
                 k_dotprod_1240)
    f_main_1431 n_1041 z_1040 k_main_1315 x_1350 | true = (k_main_1315 ())
    fail_1435 b k | true = (fail ())
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 | b_1190 = (
    k_make_array_u_1189 i_1032
                        n_1031
                        k_make_array_1172
                        ())
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 | (not b_1190) = (
    fail_1435 true
              (k_make_array_u_1189 i_1032
                                   n_1031
                                   k_make_array_1172))
    k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 | true = (
    k_make_array_1172 0)
    main_1039 z_1040 n_1041 k_main_1315 | (z_1040 = 0) = (dotprod_1033
                                                            n_1041
                                                            (make_array_1030 n_1041)
                                                            (make_array_1030 n_1041)
                                                            z_1040
                                                            z_1040
                                                            (f_main_1431 n_1041
                                                                    z_1040
                                                                    k_main_1315))
    main_1039 z_1040 n_1041 k_main_1315 | (not (z_1040 = 0)) = (k_main_1315 ())
    make_array_1030 n_1031 i_1032 k_make_array_1172 | (0 <= i_1032) = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1172
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1172 | (not (0 <= i_1032)) = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1172
                        false)
    main_1428:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1432:int -> X
    f_1433:int -> int -> X
    f_1434:int -> int -> unit -> X
    f_dotprod_1429:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1430:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1431:int -> int -> (unit -> X) -> int -> X
    fail_1435:bool -> (unit -> X) -> X
    k_make_array_u_1178:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1189:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1432,f_1433,f_1434,f_dotprod_1429,f_dotprod_1430,f_main_1431,k_make_array_u_1178,k_make_array_u_1189,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:0:0:0:1:1:0
  error traces:
    [true.nop(<f_1432@54:0> = var160)
     [true.nop((<f_1433@57:0> = <f_1432@54:0>) && (<f_1433@57:1> = var161))
      [true.((<main_1039@59:0> = <f_1433@57:0>) && (<main_1039@59:1> = <f_1433@57:1>))
       [(<main_1039@59:0> = 0).
        ((<dotprod_1033@62:0> = <main_1039@59:1>) &&
         ((<dotprod_1033@62:3> = <main_1039@59:0>) && (<dotprod_1033@62:4> = <main_1039@59:0>)))
        [(not (<dotprod_1033@62:3> >= <dotprod_1033@62:0>)).(<<dotprod_1033@62:1>@65:0> = <dotprod_1033@62:3>)
         [true.((<make_array_1030@67:0> = <main_1039@59:1>) && (<make_array_1030@67:1> = <<dotprod_1033@62:1>@65:0>))
          [(0 <= <make_array_1030@67:1>).
           ((<k_make_array_u_1178@70:0> = <make_array_1030@67:1>) &&
            ((<k_make_array_u_1178@70:1> = <make_array_1030@67:0>) &&
             (<k_make_array_u_1178@70:3> = (<make_array_1030@67:1> < <make_array_1030@67:0>))))
           [<k_make_array_u_1178@70:3>.
            ((<k_make_array_u_1189@73:0> = <k_make_array_u_1178@70:0>) &&
             ((<k_make_array_u_1189@73:1> = <k_make_array_u_1178@70:1>) && (<k_make_array_u_1189@73:3> = ())))
            [true.(<<k_make_array_u_1189@73:2>@75:0> = 0)
             [true.(<<k_make_array_u_1178@70:2>@77:0> = <<k_make_array_u_1189@73:2>@75:0>)
              [true.(<<make_array_1030@67:2>@79:0> = <<k_make_array_u_1178@70:2>@77:0>)
               [true.(<<<dotprod_1033@62:1>@65:1>@81:0> = <<make_array_1030@67:2>@79:0>)
                [true.
                 ((<f_dotprod_1429@83:0> = <dotprod_1033@62:3>) &&
                  ((<f_dotprod_1429@83:1> = <dotprod_1033@62:0>) &&
                   ((<f_dotprod_1429@83:2> = <dotprod_1033@62:4>) &&
                    (<f_dotprod_1429@83:6> = <<<dotprod_1033@62:1>@65:1>@81:0>))))
                 [true.(<<f_dotprod_1429@83:5>@85:0> = <f_dotprod_1429@83:0>)
                  [true.(<<dotprod_1033@62:2>@87:0> = <<f_dotprod_1429@83:5>@85:0>)
                   [true.
                    ((<make_array_1030@89:0> = <main_1039@59:1>) &&
                     (<make_array_1030@89:1> = <<dotprod_1033@62:2>@87:0>))
                    [(not (0 <= <make_array_1030@89:1>)).
                     ((<k_make_array_u_1178@92:0> = <make_array_1030@89:1>) &&
                      ((<k_make_array_u_1178@92:1> = <make_array_1030@89:0>) && (<k_make_array_u_1178@92:3> = false)))
                     [(not <k_make_array_u_1178@92:3>).(<fail_1435@95:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(18917)[2]
    horn clauses:
      P[<fail_1435@95:0>](<fail_1435@95:0>:bool)|- bot
      
      P[<k_make_array_u_1178@92:3>](<k_make_array_u_1178@92:0>:int,<k_make_array_u_1178@92:1>:int,false:bool),
      <fail_1435@95:0> |- P[<fail_1435@95:0>](<fail_1435@95:0>:bool)
      
      P[<make_array_1030@89:1>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
      ((0 > <k_make_array_u_1178@92:0>) && (not <k_make_array_u_1178@92:3>))
      |- P[<k_make_array_u_1178@92:3>](<k_make_array_u_1178@92:0>:int,
                                       <k_make_array_u_1178@92:1>:int,
                                       <k_make_array_u_1178@92:3>:bool)
      
      P[<main_1039@59:1>](0:int,<make_array_1030@89:0>:int),
      P[<<dotprod_1033@62:2>@87:0>](<make_array_1030@89:0>:int,<make_array_1030@89:1>:int)|- P[<make_array_1030@89:1>](
      <make_array_1030@89:0>:int,<make_array_1030@89:1>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<f_dotprod_1429@83:2>:int),
      P[<<f_dotprod_1429@83:5>@85:0>](<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:0>:int,<f_dotprod_1429@83:2>:int,<<dotprod_1033@62:2>@87:0>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
      
      P[<f_dotprod_1429@83:6>](<f_dotprod_1429@83:0>:int,<f_dotprod_1429@83:1>:int,<f_dotprod_1429@83:2>:int,<f_dotprod_1429@83:6>:int),
      (<<f_dotprod_1429@83:5>@85:0> = <f_dotprod_1429@83:0>)
      |- P[<<f_dotprod_1429@83:5>@85:0>](<f_dotprod_1429@83:0>:int,<f_dotprod_1429@83:1>:int,
                                         <f_dotprod_1429@83:2>:int,<<f_dotprod_1429@83:5>@85:0>:int)
      
      P[<dotprod_1033@62:4>](<f_dotprod_1429@83:1>:int,<f_dotprod_1429@83:0>:int,<f_dotprod_1429@83:2>:int),
      P[<<<dotprod_1033@62:1>@65:1>@81:0>](<f_dotprod_1429@83:1>:int,<f_dotprod_1429@83:0>:int,<f_dotprod_1429@83:6>:int),
      (<f_dotprod_1429@83:0> < <f_dotprod_1429@83:1>)
      |- P[<f_dotprod_1429@83:6>](<f_dotprod_1429@83:0>:int,<f_dotprod_1429@83:1>:int,
                                  <f_dotprod_1429@83:2>:int,<f_dotprod_1429@83:6>:int)
      
      P[<main_1039@59:1>](0:int,<dotprod_1033@62:0>:int),
      P[<<make_array_1030@67:2>@79:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int)|- P[<<<dotprod_1033@62:1>@65:1>@81:0>](
      <dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int)
      
      P[<make_array_1030@67:1>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int),
      P[<<k_make_array_u_1178@70:2>@77:0>](<make_array_1030@67:1>:int,<make_array_1030@67:0>:int,<<make_array_1030@67:2>@79:0>:int),
      (0 <= <make_array_1030@67:1>)
      |- P[<<make_array_1030@67:2>@79:0>](<make_array_1030@67:0>:int,
                                          <make_array_1030@67:1>:int,
                                          <<make_array_1030@67:2>@79:0>:int)
      
      P[<k_make_array_u_1178@70:3>](<k_make_array_u_1178@70:0>:int,<k_make_array_u_1178@70:1>:int,true:bool),
      P[<<k_make_array_u_1189@73:2>@75:0>](<k_make_array_u_1178@70:0>:int,<k_make_array_u_1178@70:1>:int,<<k_make_array_u_1178@70:2>@77:0>:int)|- P[<<k_make_array_u_1178@70:2>@77:0>](
      <k_make_array_u_1178@70:0>:int,<k_make_array_u_1178@70:1>:int,<<k_make_array_u_1178@70:2>@77:0>:int)
      
      P[<k_make_array_u_1189@73:3>](<k_make_array_u_1189@73:0>:int,<k_make_array_u_1189@73:1>:int,<k_make_array_u_1189@73:3>:unit),
      (<<k_make_array_u_1189@73:2>@75:0> = 0)
      |- P[<<k_make_array_u_1189@73:2>@75:0>](<k_make_array_u_1189@73:0>:int,
                                              <k_make_array_u_1189@73:1>:int,
                                              <<k_make_array_u_1189@73:2>@75:0>:int)
      
      P[<k_make_array_u_1178@70:3>](<k_make_array_u_1189@73:0>:int,<k_make_array_u_1189@73:1>:int,true:bool)|- P[<k_make_array_u_1189@73:3>](
      <k_make_array_u_1189@73:0>:int,<k_make_array_u_1189@73:1>:int,<k_make_array_u_1189@73:3>:unit)
      
      P[<make_array_1030@67:1>](<k_make_array_u_1178@70:1>:int,<k_make_array_u_1178@70:0>:int),
      ((0 <= <k_make_array_u_1178@70:0>) &&
       (<k_make_array_u_1178@70:3> = (<k_make_array_u_1178@70:0> < <k_make_array_u_1178@70:1>)))
      |- P[<k_make_array_u_1178@70:3>](<k_make_array_u_1178@70:0>:int,
                                       <k_make_array_u_1178@70:1>:int,
                                       <k_make_array_u_1178@70:3>:bool)
      
      P[<main_1039@59:1>](0:int,<make_array_1030@67:0>:int),
      P[<<dotprod_1033@62:1>@65:0>](<make_array_1030@67:0>:int,<make_array_1030@67:1>:int)|- P[<make_array_1030@67:1>](
      <make_array_1030@67:0>:int,<make_array_1030@67:1>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
      
      P[<main_1039@59:1>](<dotprod_1033@62:4>:int,<dotprod_1033@62:0>:int),
      ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                <dotprod_1033@62:4>:int)
      
      P[<f_1433@57:1>](<main_1039@59:0>:int,<main_1039@59:1>:int)|- P[<main_1039@59:1>](
      <main_1039@59:0>:int,<main_1039@59:1>:int)
      
      P[<f_1432@54:0>](<f_1433@57:0>:int)|- P[<f_1433@57:1>](<f_1433@57:0>:int,
                                                             <f_1433@57:1>:int)
      
      |- P[<f_1432@54:0>](<f_1432@54:0>:int)
    call trees:
      <main_1428@51>
        <f_1432@54>
          <f_1433@57>
            <main_1039@59>
              <dotprod_1033@62>
              </<dotprod_1033@62:1>@65>
              <make_array_1030@67>
                <k_make_array_u_1178@70>
                  <k_make_array_u_1189@73>
                  </<k_make_array_u_1189@73:2>@75>
                </<k_make_array_u_1178@70:2>@77>
              </<make_array_1030@67:2>@79>
              <<<dotprod_1033@62:1>@65:1>@81>
                <f_dotprod_1429@83>
                </<f_dotprod_1429@83:5>@85>
              </<dotprod_1033@62:2>@87>
              <make_array_1030@89>
                <k_make_array_u_1178@92>
                  <fail_1435@95>
    inlined horn clauses:
      P[<fail_1435@95:0>](<fail_1435@95:0>:bool)|- bot
      
      P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
      ((0 > <k_make_array_u_1178@92:0>) && <fail_1435@95:0>) |- P[<fail_1435@95:0>](
      <fail_1435@95:0>:bool)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
      P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
      (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
      
      P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
      ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
       ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                              <<dotprod_1033@62:1>@65:0>:int,
                                              <<<dotprod_1033@62:1>@65:1>@81:0>:int)
      
      P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
      (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
      |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
      
       ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                <dotprod_1033@62:4>:int)
    begin ParamSubstInfer.infer(21525)[3]
      
    end ParamSubstInfer.infer(21525)[3] (0.117982 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(21527)[3]
      
    end RefTypeInfer.elim_coeffs(21527)[3] (0.002000 sec.)
    begin GenHcSolver.solve(21826)[3]
      Horn clauses:
        P[<fail_1435@95:0>](<fail_1435@95:0>:bool)|- bot
        
        P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
        ((0 > <k_make_array_u_1178@92:0>) && <fail_1435@95:0>) |- P[<fail_1435@95:0>](
        <fail_1435@95:0>:bool)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
        (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        P[<fail_1435@95:0>](<fail_1435@95:0>:bool) = false
      upper bounds:
        P[<fail_1435@95:0>](var164:bool) = true
      begin GenHcSolver.classify_pids(23722)[4]
        output:
          [<fail_1435@95:0>]
      end GenHcSolver.classify_pids(23722)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(23725)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(23726)[5]
          begin InterpProver.interpolate_fresh(23727)[6]
            begin InterpProver.interpolate_log(23728)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(23729)[8]
                begin InterpProver.interpolate_simplify(23730)[9]
                  begin InterpProver.interpolate_quick(23743)[10]
                    
                  end InterpProver.interpolate_quick(23743)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(23747)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(23747)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(23730)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(23729)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(23728)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(23727)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(23726)[5] (0.000000 sec.)
        output:
          P[<fail_1435@95:0>](<fail_1435@95:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(23725)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
        (0 > <k_make_array_u_1178@92:0>) |- bot
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
        (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
      upper bounds:
        P[<<dotprod_1033@62:2>@87:0>](var165:int,var166:int) = (0 <= var166)
      begin GenHcSolver.classify_pids(25922)[4]
        output:
          [<<dotprod_1033@62:2>@87:0>]
      end GenHcSolver.classify_pids(25922)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
      nub:(not (0 <= <<dotprod_1033@62:2>@87:0>))
      begin ApronInterface.convex_hull_interpolate(25925)[4]
        lb:((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        nub:(not (0 <= <<dotprod_1033@62:2>@87:0>))
        lb':((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        nub':(not (0 <= <<dotprod_1033@62:2>@87:0>))
        begin InterpProver.interpolate(25926)[5]
          begin InterpProver.interpolate_fresh(25927)[6]
            begin InterpProver.interpolate_log(25928)[7]
              input1: ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
              input2: (not (0 <= <<dotprod_1033@62:2>@87:0>))
              begin InterpProver.interpolate_check(25929)[8]
                begin InterpProver.interpolate_simplify(25930)[9]
                  begin InterpProver.interpolate_quick(25963)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(25972)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(25973)[12]
                        begin CsisatInterface.interpolate_csisat_log(25974)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 & (1 + v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0) <= v_sep_dotprod_1033_sep_62_sep_0)
                          input2: (1 + v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(25975)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(25975)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(25974)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(25973)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(25972)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(25963)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(25930)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(25929)[8] (0.001000 sec.)
              output: (0 <= <<dotprod_1033@62:2>@87:0>)
            end InterpProver.interpolate_log(25928)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(25927)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(25926)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
          (0 <= <<dotprod_1033@62:2>@87:0>)
      end ApronInterface.convex_hull_interpolate(25925)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      upper bounds:
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](var167:int,var168:int,var169:int) = true
      begin GenHcSolver.classify_pids(27754)[4]
        output:
          [<<<dotprod_1033@62:1>@65:1>@81:0>]
      end GenHcSolver.classify_pids(27754)[4] (0.000000 sec.)
      lb:((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
          ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(27757)[4]
        lb:((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
            ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        nub:false
        lb':((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
             ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        nub':false
        begin InterpProver.interpolate(27758)[5]
          begin InterpProver.interpolate_fresh(27759)[6]
            begin InterpProver.interpolate_log(27760)[7]
              input1: ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
                       ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
              input2: false
              begin InterpProver.interpolate_check(27761)[8]
                begin InterpProver.interpolate_simplify(27762)[9]
                  begin InterpProver.interpolate_quick(27817)[10]
                    
                  end InterpProver.interpolate_quick(27817)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(27762)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(27761)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(27760)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(27759)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(27758)[5] (0.000999 sec.)
        output:
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(27757)[4] (0.000999 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
      upper bounds:
        P[<<dotprod_1033@62:1>@65:0>](var170:int,var171:int) = true
      begin GenHcSolver.classify_pids(29045)[4]
        output:
          [<<dotprod_1033@62:1>@65:0>]
      end GenHcSolver.classify_pids(29045)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(29048)[4]
        lb:((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        nub:false
        lb':((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        nub':false
        begin InterpProver.interpolate(29049)[5]
          begin InterpProver.interpolate_fresh(29050)[6]
            begin InterpProver.interpolate_log(29051)[7]
              input1: ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
              input2: false
              begin InterpProver.interpolate_check(29052)[8]
                begin InterpProver.interpolate_simplify(29053)[9]
                  begin InterpProver.interpolate_quick(29092)[10]
                    
                  end InterpProver.interpolate_quick(29092)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(29053)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(29052)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(29051)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(29050)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(29049)[5] (0.000000 sec.)
        output:
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) = true
      end ApronInterface.convex_hull_interpolate(29048)[4] (0.000000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      upper bounds:
        P[<dotprod_1033@62:4>](var172:int,var173:int,var174:int) = ((var173 >= var172) || (0 <= var173))
      begin GenHcSolver.classify_pids(30101)[4]
        output:
          [<dotprod_1033@62:4>]
      end GenHcSolver.classify_pids(30101)[4] (0.000000 sec.)
      lb:((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      nub:(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
      begin ApronInterface.convex_hull_interpolate(30104)[4]
        lb:((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        nub:(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
        lb':((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        nub':(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
        begin InterpProver.interpolate(30105)[5]
          begin InterpProver.interpolate_fresh(30106)[6]
            begin InterpProver.interpolate_log(30107)[7]
              input1: ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
              input2: (not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
              begin InterpProver.interpolate_check(30108)[8]
                begin InterpProver.interpolate_simplify(30109)[9]
                  begin InterpProver.interpolate_quick(30156)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(30165)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(30166)[12]
                        begin CsisatInterface.interpolate_csisat_log(30167)[13]
                          input1: 0 = v_sep_dotprod_1033_sep_62_sep_3
                          input2: ((1 + v_sep_dotprod_1033_sep_62_sep_3) <= 0 & (1 + v_sep_dotprod_1033_sep_62_sep_3) <= v_sep_dotprod_1033_sep_62_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(30168)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(30168)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_62_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(30167)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_62_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_62_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(30166)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(30165)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(30156)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(30109)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(30108)[8] (0.002000 sec.)
              output: (0 <= <dotprod_1033@62:3>)
            end InterpProver.interpolate_log(30107)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(30106)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(30105)[5] (0.002000 sec.)
        output:
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
          (0 <= <dotprod_1033@62:3>)
      end ApronInterface.convex_hull_interpolate(30104)[4] (0.002000 sec.)
      begin HcSolver.check_validity(30325)[4]
        input:
          P[<fail_1435@95:0>](<fail_1435@95:0>:bool)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
          ((0 > <k_make_array_u_1178@92:0>) && <fail_1435@95:0>) |- P[<fail_1435@95:0>](
          <fail_1435@95:0>:bool)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(30325)[4] (0.004000 sec.)
      solution:
        P[<fail_1435@95:0>](<fail_1435@95:0>:bool) = false
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        (0 <= <<dotprod_1033@62:2>@87:0>)
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        true
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) = true
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        (0 <= <dotprod_1033@62:3>)
    end GenHcSolver.solve(21826)[3] (0.052992 sec.)
    begin GenHcSolver.solve(30841)[3]
      Horn clauses:
        P[<fail_1435@95:0>](<fail_1435@95:0>:bool)|- bot
        
        P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
        ((0 > <k_make_array_u_1178@92:0>) && <fail_1435@95:0>) |- P[<fail_1435@95:0>](
        <fail_1435@95:0>:bool)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
        (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        P[<fail_1435@95:0>](<fail_1435@95:0>:bool) = false
      upper bounds:
        P[<fail_1435@95:0>](var176:bool) = true
      begin GenHcSolver.classify_pids(32737)[4]
        output:
          [<fail_1435@95:0>]
      end GenHcSolver.classify_pids(32737)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(32740)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(32743)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(32743)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(32748)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(32748)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(32751)[5]
          begin InterpProver.interpolate_fresh(32752)[6]
            begin InterpProver.interpolate_log(32753)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(32754)[8]
                begin InterpProver.interpolate_simplify(32755)[9]
                  begin InterpProver.interpolate_quick(32770)[10]
                    
                  end InterpProver.interpolate_quick(32770)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(32774)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(32774)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(32755)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(32754)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(32753)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(32752)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(32751)[5] (0.001000 sec.)
        output:
          P[<fail_1435@95:0>](<fail_1435@95:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(32740)[4] (0.001000 sec.)
      Horn clauses:
        P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
        (0 > <k_make_array_u_1178@92:0>) |- bot
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
        (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
      upper bounds:
        P[<<dotprod_1033@62:2>@87:0>](var177:int,var178:int) = (0 <= var178)
      begin GenHcSolver.classify_pids(34956)[4]
        output:
          [<<dotprod_1033@62:2>@87:0>]
      end GenHcSolver.classify_pids(34956)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
      nub:(not (0 <= <<dotprod_1033@62:2>@87:0>))
      begin ApronInterface.convex_hull_interpolate(34959)[4]
        lb:((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
        nub:(not (0 <= <<dotprod_1033@62:2>@87:0>))
        begin ExtFormula.Formula.case_analysis_boolean(34971)[5]
          ts: ((<<dotprod_1033@62:2>@87:0> = 0) && (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(34971)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(34980)[5]
          ts: (0 > <<dotprod_1033@62:2>@87:0>)
          
        end ExtFormula.Formula.case_analysis_boolean(34980)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@62:2>@87:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0))
        nub':((-1 + (-1 * <<dotprod_1033@62:2>@87:0>)) >= 0)
        begin InterpProver.interpolate(34984)[5]
          begin InterpProver.interpolate_fresh(34985)[6]
            begin InterpProver.interpolate_log(34986)[7]
              input1: ((<<dotprod_1033@62:2>@87:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0))
              input2: ((-1 + (-1 * <<dotprod_1033@62:2>@87:0>)) >= 0)
              begin InterpProver.interpolate_check(34987)[8]
                begin InterpProver.interpolate_simplify(34988)[9]
                  begin InterpProver.interpolate_quick(35025)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(35034)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(35035)[12]
                        begin CsisatInterface.interpolate_csisat_log(35036)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 & 1 <= v_sep_dotprod_1033_sep_62_sep_0)
                          input2: (1 + v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0) <= 0
                          begin CsisatInterface.interpolate_csisat_raw(35037)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(35037)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(35036)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(35035)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(35034)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(35025)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(34988)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(34987)[8] (0.001000 sec.)
              output: (0 <= <<dotprod_1033@62:2>@87:0>)
            end InterpProver.interpolate_log(34986)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(34985)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(34984)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
          (0 <= <<dotprod_1033@62:2>@87:0>)
      end ApronInterface.convex_hull_interpolate(34959)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                <<dotprod_1033@62:1>@65:0>:int,
                                                <<<dotprod_1033@62:1>@65:1>@81:0>:int)
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
         ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      upper bounds:
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](var179:int,var180:int,var181:int) = true
      begin GenHcSolver.classify_pids(36823)[4]
        output:
          [<<<dotprod_1033@62:1>@65:1>@81:0>]
      end GenHcSolver.classify_pids(36823)[4] (0.000000 sec.)
      lb:((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
          ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(36826)[4]
        lb:((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
            ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(36846)[5]
          ts: ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
               ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(36846)[5] (0.001000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(36855)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(36855)[5] (0.000000 sec.)
        lb':((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
             ((<<dotprod_1033@62:1>@65:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(36858)[5]
          begin InterpProver.interpolate_fresh(36859)[6]
            begin InterpProver.interpolate_log(36860)[7]
              input1: ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
                       ((<<dotprod_1033@62:1>@65:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(36861)[8]
                begin InterpProver.interpolate_simplify(36862)[9]
                  begin InterpProver.interpolate_quick(36920)[10]
                    
                  end InterpProver.interpolate_quick(36920)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(36862)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(36861)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(36860)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(36859)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(36858)[5] (0.001000 sec.)
        output:
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(36826)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
        (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
        |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) =
        ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
      upper bounds:
        P[<<dotprod_1033@62:1>@65:0>](var182:int,var183:int) = true
      begin GenHcSolver.classify_pids(38150)[4]
        output:
          [<<dotprod_1033@62:1>@65:0>]
      end GenHcSolver.classify_pids(38150)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(38153)[4]
        lb:((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(38165)[5]
          ts: ((<<dotprod_1033@62:1>@65:0> = 0) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(38165)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(38173)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(38173)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@62:1>@65:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(38176)[5]
          begin InterpProver.interpolate_fresh(38177)[6]
            begin InterpProver.interpolate_log(38178)[7]
              input1: ((<<dotprod_1033@62:1>@65:0> = 0) && ((-1 + <dotprod_1033@62:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(38179)[8]
                begin InterpProver.interpolate_simplify(38180)[9]
                  begin InterpProver.interpolate_quick(38220)[10]
                    
                  end InterpProver.interpolate_quick(38220)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(38180)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(38179)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(38178)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(38177)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(38176)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) = true
      end ApronInterface.convex_hull_interpolate(38153)[4] (0.002000 sec.)
      Horn clauses:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
        ((<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>) && (0 > <<dotprod_1033@62:2>@87:0>)) |- bot
        
         ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                  <dotprod_1033@62:4>:int)
      lower bounds:
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      upper bounds:
        P[<dotprod_1033@62:4>](var184:int,var185:int,var186:int) = ((var185 >= var184) || (0 <= var185))
      begin GenHcSolver.classify_pids(39231)[4]
        output:
          [<dotprod_1033@62:4>]
      end GenHcSolver.classify_pids(39231)[4] (0.000000 sec.)
      lb:((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
      nub:(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
      begin ApronInterface.convex_hull_interpolate(39234)[4]
        lb:((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
        nub:(not ((<dotprod_1033@62:3> >= <dotprod_1033@62:0>) || (0 <= <dotprod_1033@62:3>)))
        begin ExtFormula.Formula.case_analysis_boolean(39246)[5]
          ts: ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(39246)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(39266)[5]
          ts: ((<dotprod_1033@62:3> < <dotprod_1033@62:0>) && (0 > <dotprod_1033@62:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(39266)[5] (0.001000 sec.)
        lb':((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:3> = 0))
        nub':(((-1 + (-1 * <dotprod_1033@62:3>)) >= 0) &&
              (((-1 + (-1 * <dotprod_1033@62:3>)) + <dotprod_1033@62:0>) >= 0))
        begin InterpProver.interpolate(39272)[5]
          begin InterpProver.interpolate_fresh(39273)[6]
            begin InterpProver.interpolate_log(39274)[7]
              input1: ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:3> = 0))
              input2: (((-1 + (-1 * <dotprod_1033@62:3>)) >= 0) &&
                       (((-1 + (-1 * <dotprod_1033@62:3>)) + <dotprod_1033@62:0>) >= 0))
              begin InterpProver.interpolate_check(39275)[8]
                begin InterpProver.interpolate_simplify(39276)[9]
                  begin InterpProver.interpolate_quick(39340)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(39349)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(39350)[12]
                        begin CsisatInterface.interpolate_csisat_log(39351)[13]
                          input1: 0 = v_sep_dotprod_1033_sep_62_sep_3
                          input2: ((1 + v_sep_dotprod_1033_sep_62_sep_3) <= 0 & (1 + v_sep_dotprod_1033_sep_62_sep_3) <= v_sep_dotprod_1033_sep_62_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(39352)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(39352)[14] (0.000000 sec.)
                          output: -2*v_sep_dotprod_1033_sep_62_sep_3 <= 0
                          
                        end CsisatInterface.interpolate_csisat_log(39351)[13] (0.000000 sec.)
                        after simplification: -2*v_sep_dotprod_1033_sep_62_sep_3 <= 0
                        after dnf conversion: ((-2*v_sep_dotprod_1033_sep_62_sep_3 <= 0))
                        
                      end CsisatInterface.interpolate_csisat_post_process(39350)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(39349)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(39340)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(39276)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(39275)[8] (0.000000 sec.)
              output: (0 <= <dotprod_1033@62:3>)
            end InterpProver.interpolate_log(39274)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(39273)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(39272)[5] (0.000000 sec.)
        output:
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
          (0 <= <dotprod_1033@62:3>)
      end ApronInterface.convex_hull_interpolate(39234)[4] (0.001000 sec.)
      begin HcSolver.check_validity(39513)[4]
        input:
          P[<fail_1435@95:0>](<fail_1435@95:0>:bool)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
          ((0 > <k_make_array_u_1178@92:0>) && <fail_1435@95:0>) |- P[<fail_1435@95:0>](
          <fail_1435@95:0>:bool)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(39513)[4] (0.002999 sec.)
      solution:
        P[<fail_1435@95:0>](<fail_1435@95:0>:bool) = false
        P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int) =
        (0 <= <<dotprod_1033@62:2>@87:0>)
        P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<<<dotprod_1033@62:1>@65:1>@81:0>:int) =
        true
        P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int) = true
        P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,<dotprod_1033@62:4>:int) =
        (0 <= <dotprod_1033@62:3>)
    end GenHcSolver.solve(30841)[3] (0.062990 sec.)
    begin YhornInterface.solve(40029)[3]
      begin HcSolver.solve_ub(40030)[4]
        encoded:
          P[<fail_1435@95:0>](<fail_1435@95:0>:int)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
          ((0 > <k_make_array_u_1178@92:0>) && (<fail_1435@95:0> = 1)) |- P[<fail_1435@95:0>](
          <fail_1435@95:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        input to Yhorn:
          P[<fail_1435@95:0>](<fail_1435@95:0>:int)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
          ((0 > <k_make_array_u_1178@92:0>) && (<fail_1435@95:0> = 1)) |- P[<fail_1435@95:0>](
          <fail_1435@95:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<<dotprod_1033@62:1>@65:1>@81:0> = 0)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = <dotprod_1033@62:3>) && (<dotprod_1033@62:4> = 0))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1435_sep_95_sep_0($142)) -> 1=0.
(($142-1=0) & (-$143>0)) & (v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($144,$143)) -> v_sep_fail_1435_sep_95_sep_0($142).
($145-$146<0) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$145,$147)) & (v_sep_dotprod_1033_sep_62_sep_4($146,$145,$148)) -> v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($146,$145).
(($149=0) & (-$150<=0) & (-$146+$150<0)) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$150,$149).
(-$146+$150<0) & (v_sep_dotprod_1033_sep_62_sep_4($146,$150,$151)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150).
($151=0) & ($151-$152=0) -> v_sep_dotprod_1033_sep_62_sep_4($146,$152,$151).


v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1435_sep_95_sep_0: X
.......
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1435_sep_95_sep_0: X
...
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1435_sep_95_sep_0: X
.....
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1435_sep_95_sep_0: X
......
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0: X
v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0: X
v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0: X
v_sep_dotprod_1033_sep_62_sep_4: X
v_sep_fail_1435_sep_95_sep_0: X
.......(0=0) & (v_sep_fail_1435_sep_95_sep_0($142)) -> 1=0.
(($142-1=0) & (-$143>0)) & (v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($144,$143)) -> v_sep_fail_1435_sep_95_sep_0($142).
($145-$146<0) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$145,$147)) & (v_sep_dotprod_1033_sep_62_sep_4($146,$145,$148)) -> v_sep_dotprod_1033_sep_62_sep_2_sep_87_sep_0($146,$145).
(($149=0) & (-$150<=0) & (-$146+$150<0)) & (v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_1_sep_81_sep_0($146,$150,$149).
(-$146+$150<0) & (v_sep_dotprod_1033_sep_62_sep_4($146,$150,$151)) -> v_sep_dotprod_1033_sep_62_sep_1_sep_65_sep_0($146,$150).
($151=0) & ($151-$152=0) -> v_sep_dotprod_1033_sep_62_sep_4($146,$152,$151).

        solution:
          P[<<dotprod_1033@62:1>@65:0>]($175:int,$177:int) = true
          P[<<<dotprod_1033@62:1>@65:1>@81:0>]($161:int,$163:int,$165:int) = (0 <= $163)
          P[<<dotprod_1033@62:2>@87:0>]($156:int,$158:int) = (0 <= $158)
          P[<dotprod_1033@62:4>]($168:int,$170:int,$172:int) = true
          P[<fail_1435@95:0>]($153:bool) = false
        
      end HcSolver.solve_ub(40030)[4] (0.017997 sec.)
      begin HcSolver.check_validity(40241)[4]
        input:
          P[<fail_1435@95:0>](<fail_1435@95:0>:bool)|- bot
          
          P[<<dotprod_1033@62:2>@87:0>](<k_make_array_u_1178@92:1>:int,<k_make_array_u_1178@92:0>:int),
          ((0 > <k_make_array_u_1178@92:0>) && <fail_1435@95:0>) |- P[<fail_1435@95:0>](
          <fail_1435@95:0>:bool)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,<f_dotprod_1429@83:2>:int),
          P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int,var162:int),
          (<<dotprod_1033@62:2>@87:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:2>@87:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:2>@87:0>:int)
          
          P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int),
          ((<<<dotprod_1033@62:1>@65:1>@81:0> = 0) &&
           ((0 <= <<dotprod_1033@62:1>@65:0>) && (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)))
          |- P[<<<dotprod_1033@62:1>@65:1>@81:0>](<dotprod_1033@62:0>:int,
                                                  <<dotprod_1033@62:1>@65:0>:int,
                                                  <<<dotprod_1033@62:1>@65:1>@81:0>:int)
          
          P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int,<dotprod_1033@62:4>:int),
          (<<dotprod_1033@62:1>@65:0> < <dotprod_1033@62:0>)
          |- P[<<dotprod_1033@62:1>@65:0>](<dotprod_1033@62:0>:int,<<dotprod_1033@62:1>@65:0>:int)
          
           ((<dotprod_1033@62:4> = 0) && (<dotprod_1033@62:4> = <dotprod_1033@62:3>))
          |- P[<dotprod_1033@62:4>](<dotprod_1033@62:0>:int,<dotprod_1033@62:3>:int,
                                    <dotprod_1033@62:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(40241)[4] (0.007999 sec.)
      solution:
        P[<<dotprod_1033@62:1>@65:0>]($175:int,$177:int) = true
        P[<<<dotprod_1033@62:1>@65:1>@81:0>]($161:int,$163:int,$165:int) = (0 <= $163)
        P[<<dotprod_1033@62:2>@87:0>]($156:int,$158:int) = (0 <= $158)
        P[<dotprod_1033@62:4>]($168:int,$170:int,$172:int) = true
        P[<fail_1435@95:0>]($153:bool) = false
    end YhornInterface.solve(40029)[3] (0.026996 sec.)
    
  end RefTypeInfer.infer_etrs(18917)[2] (0.278958 sec.)
  refinement types:
    main_1428: X
    f_1432: v1:int -> X
    f_1433: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:int -> (v3:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:{v6:int | (0 <= v6)} -> (v7:int -> X) -> X) ->
                  v10:int -> v11:{v11:int | (0 <= v10)} -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1178: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1189: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1429: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1178: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1435: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1434: var210:int -> var209:int -> var208:unit -> X
    f_dotprod_1430: var226:int ->
                    var225:int ->
                    var224:int ->
                    var223:int ->
                    (var222:int -> X) ->
                    (var220:int -> (var219:int -> X) -> X) -> (var216:int -> (var215:int -> X) -> X) -> var212:int -> X
    f_main_1431: var232:int -> var231:int -> (var230:unit -> X) -> var228:int -> X
  abstraction types:
    main_1428: X
    f_1432: v1:int -> X
    f_1433: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:int -> (v3:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:int[v6 -> (0 <= v6)] -> (v7:int -> X) -> X) ->
                  v10:int -> v11:int[v11 -> (0 <= v10)] -> (v12:int -> X) -> X
    make_array_1030: var233:int -> var234:int -> (var235:int -> X) -> X
    k_make_array_u_1178: var238:int -> var239:int -> (var240:int -> X) -> var242:bool -> X
    k_make_array_u_1189: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1429: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fail_1435: v1:bool -> (v2:unit -> X) -> X
    f_1434: var210:int -> var209:int -> var208:unit -> X
    f_dotprod_1430: var226:int ->
                    var225:int ->
                    var224:int ->
                    var223:int ->
                    (var222:int -> X) ->
                    (var220:int -> (var219:int -> X) -> X) -> (var216:int -> (var215:int -> X) -> X) -> var212:int -> X
    f_main_1431: var232:int -> var231:int -> (var230:unit -> X) -> var228:int -> X
  
end AbsTypeInfer.refine(18916)[1] (0.284956 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 3)::
Main: main_1428
  main_1428 -> (rand_int f_1432)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      i_1037 >= n_1034) -> (k_dotprod_1240 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036))
  f_1432 x_1386 -> (rand_int (f_1433 x_1386))
  f_1433 x_1386 x_1399 -> (main_1039 x_1386 x_1399 (f_1434 x_1386 x_1399))
  f_1434 x_1386 x_1399 x_1383 -> end
  f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 ->
      (v2_1036 i_1037 (f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036))
  f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (sum_1038 + (x_1266 * x_1267)) k_dotprod_1240)
  f_main_1431 n_1041 z_1040 k_main_1315 x_1350 -> (k_main_1315 ())
  fail_1435 b k -> {fail} => (k ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when b_1190 ->
      (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when (not b_1190) ->
      (fail_1435 true (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172))
  k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 -> (k_make_array_1172 0)
  main_1039 z_1040 n_1041 k_main_1315 when (z_1040 = 0) ->
      (dotprod_1033 n_1041 (make_array_1030 n_1041) (make_array_1030 n_1041) z_1040 z_1040
        (f_main_1431 n_1041 z_1040 k_main_1315))
  main_1039 z_1040 n_1041 k_main_1315 when (not (z_1040 = 0)) -> (k_main_1315 ())
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (0 <= i_1032) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (not (0 <= i_1032)) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 false)
Types:
  main_1428 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (x_9:int[x_9 >= 0] -> (int -> X) -> X) -> x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1435 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_1428 ... --> 
  f_1432 ... --> 
  f_1433 ... --> 
  main_1039 [1/2] ... --> 
  dotprod_1033 [2/2] ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1178 [1/2] ... --> 
  k_make_array_u_1189 ... --> 
  f_dotprod_1429 ... --> 
  make_array_1030 [1/2] ... --> 
  k_make_array_u_1178 [2/2] ... --> 
  fail_1435 ... --> fail -->
  ERROR!

Spurious counter-example::
  0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counter-example ... DONE!

(3-4) Discovering predicates ... 
begin AbsTypeInfer.refine(41492)[1]
  program:
    main_1428  | true = ((Random.int 0) f_1432)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 | (
    i_1037 >= n_1034) = (k_dotprod_1240 sum_1038)
    dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 | (
    not (i_1037 >= n_1034)) = (v1_1035 i_1037
                                       (f_dotprod_1429 i_1037
                                                       n_1034
                                                       sum_1038
                                                       k_dotprod_1240
                                                       v1_1035
                                                       v2_1036))
    f_1432 x_1386 | true = ((Random.int 0) (f_1433 x_1386))
    f_1433 x_1386 x_1399 | true = (main_1039 x_1386
                                             x_1399
                                             (f_1434 x_1386
                                                     x_1399))
    f_1434 x_1386 x_1399 x_1383 | true = end
    f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 | true = (
    v2_1036 i_1037
            (f_dotprod_1430 i_1037
                            n_1034
                            sum_1038
                            x_1266
                            k_dotprod_1240
                            v1_1035
                            v2_1036))
    f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 | true = (
    dotprod_1033 n_1034
                 v1_1035
                 v2_1036
                 (i_1037 + 1)
                 (sum_1038 + (x_1266 * x_1267))
                 k_dotprod_1240)
    f_main_1431 n_1041 z_1040 k_main_1315 x_1350 | true = (k_main_1315 ())
    fail_1435 b k | true = (fail ())
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 | b_1190 = (
    k_make_array_u_1189 i_1032
                        n_1031
                        k_make_array_1172
                        ())
    k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 | (not b_1190) = (
    fail_1435 true
              (k_make_array_u_1189 i_1032
                                   n_1031
                                   k_make_array_1172))
    k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 | true = (
    k_make_array_1172 0)
    main_1039 z_1040 n_1041 k_main_1315 | (z_1040 = 0) = (dotprod_1033
                                                            n_1041
                                                            (make_array_1030 n_1041)
                                                            (make_array_1030 n_1041)
                                                            z_1040
                                                            z_1040
                                                            (f_main_1431 n_1041
                                                                    z_1040
                                                                    k_main_1315))
    main_1039 z_1040 n_1041 k_main_1315 | (not (z_1040 = 0)) = (k_main_1315 ())
    make_array_1030 n_1031 i_1032 k_make_array_1172 | (0 <= i_1032) = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1172
                        (i_1032 < n_1031))
    make_array_1030 n_1031 i_1032 k_make_array_1172 | (not (0 <= i_1032)) = (
    k_make_array_u_1178 i_1032
                        n_1031
                        k_make_array_1172
                        false)
    main_1428:X
    dotprod_1033:int -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> int -> (int -> X) -> X
    f_1432:int -> X
    f_1433:int -> int -> X
    f_1434:int -> int -> unit -> X
    f_dotprod_1429:int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_dotprod_1430:int ->
                   int -> int -> int -> (int -> X) -> (int -> (int -> X) -> X) -> (int -> (int -> X) -> X) -> int -> X
    f_main_1431:int -> int -> (unit -> X) -> int -> X
    fail_1435:bool -> (unit -> X) -> X
    k_make_array_u_1178:int -> int -> (int -> X) -> bool -> X
    k_make_array_u_1189:int -> int -> (int -> X) -> unit -> X
    main_1039:int -> int -> (unit -> X) -> X
    make_array_1030:int -> int -> (int -> X) -> X
  inlined functions: f_1432,f_1433,f_1434,f_dotprod_1429,f_dotprod_1430,f_main_1431,k_make_array_u_1178,k_make_array_u_1189,main_1039,make_array_1030
  counterexample: 0:0:0:0:1:0:0:0:0:0:1:0
  error traces:
    [true.nop(<f_1432@101:0> = var244)
     [true.nop((<f_1433@104:0> = <f_1432@101:0>) && (<f_1433@104:1> = var245))
      [true.((<main_1039@106:0> = <f_1433@104:0>) && (<main_1039@106:1> = <f_1433@104:1>))
       [(<main_1039@106:0> = 0).
        ((<dotprod_1033@109:0> = <main_1039@106:1>) &&
         ((<dotprod_1033@109:3> = <main_1039@106:0>) && (<dotprod_1033@109:4> = <main_1039@106:0>)))
        [(not (<dotprod_1033@109:3> >= <dotprod_1033@109:0>)).(<<dotprod_1033@109:1>@112:0> = <dotprod_1033@109:3>)
         [true.
          ((<make_array_1030@114:0> = <main_1039@106:1>) && (<make_array_1030@114:1> = <<dotprod_1033@109:1>@112:0>))
          [(0 <= <make_array_1030@114:1>).
           ((<k_make_array_u_1178@117:0> = <make_array_1030@114:1>) &&
            ((<k_make_array_u_1178@117:1> = <make_array_1030@114:0>) &&
             (<k_make_array_u_1178@117:3> = (<make_array_1030@114:1> < <make_array_1030@114:0>))))
           [<k_make_array_u_1178@117:3>.
            ((<k_make_array_u_1189@120:0> = <k_make_array_u_1178@117:0>) &&
             ((<k_make_array_u_1189@120:1> = <k_make_array_u_1178@117:1>) && (<k_make_array_u_1189@120:3> = ())))
            [true.(<<k_make_array_u_1189@120:2>@122:0> = 0)
             [true.(<<k_make_array_u_1178@117:2>@124:0> = <<k_make_array_u_1189@120:2>@122:0>)
              [true.(<<make_array_1030@114:2>@126:0> = <<k_make_array_u_1178@117:2>@124:0>)
               [true.(<<<dotprod_1033@109:1>@112:1>@128:0> = <<make_array_1030@114:2>@126:0>)
                [true.
                 ((<f_dotprod_1429@130:0> = <dotprod_1033@109:3>) &&
                  ((<f_dotprod_1429@130:1> = <dotprod_1033@109:0>) &&
                   ((<f_dotprod_1429@130:2> = <dotprod_1033@109:4>) &&
                    (<f_dotprod_1429@130:6> = <<<dotprod_1033@109:1>@112:1>@128:0>))))
                 [true.(<<f_dotprod_1429@130:5>@132:0> = <f_dotprod_1429@130:0>)
                  [true.(<<dotprod_1033@109:2>@134:0> = <<f_dotprod_1429@130:5>@132:0>)
                   [true.
                    ((<make_array_1030@136:0> = <main_1039@106:1>) &&
                     (<make_array_1030@136:1> = <<dotprod_1033@109:2>@134:0>))
                    [(0 <= <make_array_1030@136:1>).
                     ((<k_make_array_u_1178@139:0> = <make_array_1030@136:1>) &&
                      ((<k_make_array_u_1178@139:1> = <make_array_1030@136:0>) &&
                       (<k_make_array_u_1178@139:3> = (<make_array_1030@136:1> < <make_array_1030@136:0>))))
                     [(not <k_make_array_u_1178@139:3>).(<fail_1435@142:0> = true)[true.error
  begin RefTypeInfer.infer_etrs(41493)[2]
    horn clauses:
      P[<fail_1435@142:0>](<fail_1435@142:0>:bool)|- bot
      
      P[<k_make_array_u_1178@139:3>](<k_make_array_u_1178@139:0>:int,<k_make_array_u_1178@139:1>:int,false:bool),
      <fail_1435@142:0> |- P[<fail_1435@142:0>](<fail_1435@142:0>:bool)
      
      P[<make_array_1030@136:1>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
      ((0 <= <k_make_array_u_1178@139:0>) &&
       (<k_make_array_u_1178@139:3> = (<k_make_array_u_1178@139:0> < <k_make_array_u_1178@139:1>)))
      |- P[<k_make_array_u_1178@139:3>](<k_make_array_u_1178@139:0>:int,
                                        <k_make_array_u_1178@139:1>:int,
                                        <k_make_array_u_1178@139:3>:bool)
      
      P[<main_1039@106:1>](0:int,<make_array_1030@136:0>:int),
      P[<<dotprod_1033@109:2>@134:0>](<make_array_1030@136:0>:int,<make_array_1030@136:1>:int)|- P[<make_array_1030@136:1>](
      <make_array_1030@136:0>:int,<make_array_1030@136:1>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<f_dotprod_1429@130:2>:int),
      P[<<f_dotprod_1429@130:5>@132:0>](<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:0>:int,<f_dotprod_1429@130:2>:int,<<dotprod_1033@109:2>@134:0>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
      
      P[<f_dotprod_1429@130:6>](<f_dotprod_1429@130:0>:int,<f_dotprod_1429@130:1>:int,<f_dotprod_1429@130:2>:int,<f_dotprod_1429@130:6>:int),
      (<<f_dotprod_1429@130:5>@132:0> = <f_dotprod_1429@130:0>)
      |- P[<<f_dotprod_1429@130:5>@132:0>](<f_dotprod_1429@130:0>:int,
                                           <f_dotprod_1429@130:1>:int,
                                           <f_dotprod_1429@130:2>:int,
                                           <<f_dotprod_1429@130:5>@132:0>:int)
      
      P[<dotprod_1033@109:4>](<f_dotprod_1429@130:1>:int,<f_dotprod_1429@130:0>:int,<f_dotprod_1429@130:2>:int),
      P[<<<dotprod_1033@109:1>@112:1>@128:0>](<f_dotprod_1429@130:1>:int,<f_dotprod_1429@130:0>:int,<f_dotprod_1429@130:6>:int),
      (<f_dotprod_1429@130:0> < <f_dotprod_1429@130:1>)
      |- P[<f_dotprod_1429@130:6>](<f_dotprod_1429@130:0>:int,<f_dotprod_1429@130:1>:int,
                                   <f_dotprod_1429@130:2>:int,<f_dotprod_1429@130:6>:int)
      
      P[<main_1039@106:1>](0:int,<dotprod_1033@109:0>:int),
      P[<<make_array_1030@114:2>@126:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int)|- P[<<<dotprod_1033@109:1>@112:1>@128:0>](
      <dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int)
      
      P[<make_array_1030@114:1>](<make_array_1030@114:0>:int,<make_array_1030@114:1>:int),
      P[<<k_make_array_u_1178@117:2>@124:0>](<make_array_1030@114:1>:int,<make_array_1030@114:0>:int,<<make_array_1030@114:2>@126:0>:int),
      (0 <= <make_array_1030@114:1>)
      |- P[<<make_array_1030@114:2>@126:0>](<make_array_1030@114:0>:int,
                                            <make_array_1030@114:1>:int,
                                            <<make_array_1030@114:2>@126:0>:int)
      
      P[<k_make_array_u_1178@117:3>](<k_make_array_u_1178@117:0>:int,<k_make_array_u_1178@117:1>:int,true:bool),
      P[<<k_make_array_u_1189@120:2>@122:0>](<k_make_array_u_1178@117:0>:int,<k_make_array_u_1178@117:1>:int,<<k_make_array_u_1178@117:2>@124:0>:int)|- P[<<k_make_array_u_1178@117:2>@124:0>](
      <k_make_array_u_1178@117:0>:int,<k_make_array_u_1178@117:1>:int,
      <<k_make_array_u_1178@117:2>@124:0>:int)
      
      P[<k_make_array_u_1189@120:3>](<k_make_array_u_1189@120:0>:int,<k_make_array_u_1189@120:1>:int,<k_make_array_u_1189@120:3>:unit),
      (<<k_make_array_u_1189@120:2>@122:0> = 0)
      |- P[<<k_make_array_u_1189@120:2>@122:0>](<k_make_array_u_1189@120:0>:int,
                                                <k_make_array_u_1189@120:1>:int,
                                                <<k_make_array_u_1189@120:2>@122:0>:int)
      
      P[<k_make_array_u_1178@117:3>](<k_make_array_u_1189@120:0>:int,<k_make_array_u_1189@120:1>:int,true:bool)|- P[<k_make_array_u_1189@120:3>](
      <k_make_array_u_1189@120:0>:int,<k_make_array_u_1189@120:1>:int,
      <k_make_array_u_1189@120:3>:unit)
      
      P[<make_array_1030@114:1>](<k_make_array_u_1178@117:1>:int,<k_make_array_u_1178@117:0>:int),
      ((0 <= <k_make_array_u_1178@117:0>) &&
       (<k_make_array_u_1178@117:3> = (<k_make_array_u_1178@117:0> < <k_make_array_u_1178@117:1>)))
      |- P[<k_make_array_u_1178@117:3>](<k_make_array_u_1178@117:0>:int,
                                        <k_make_array_u_1178@117:1>:int,
                                        <k_make_array_u_1178@117:3>:bool)
      
      P[<main_1039@106:1>](0:int,<make_array_1030@114:0>:int),
      P[<<dotprod_1033@109:1>@112:0>](<make_array_1030@114:0>:int,<make_array_1030@114:1>:int)|- P[<make_array_1030@114:1>](
      <make_array_1030@114:0>:int,<make_array_1030@114:1>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
      
      P[<main_1039@106:1>](<dotprod_1033@109:4>:int,<dotprod_1033@109:0>:int),
      ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                 <dotprod_1033@109:4>:int)
      
      P[<f_1433@104:1>](<main_1039@106:0>:int,<main_1039@106:1>:int)|- P[<main_1039@106:1>](
      <main_1039@106:0>:int,<main_1039@106:1>:int)
      
      P[<f_1432@101:0>](<f_1433@104:0>:int)|- P[<f_1433@104:1>](<f_1433@104:0>:int,
                                                                <f_1433@104:1>:int)
      
      |- P[<f_1432@101:0>](<f_1432@101:0>:int)
    call trees:
      <main_1428@98>
        <f_1432@101>
          <f_1433@104>
            <main_1039@106>
              <dotprod_1033@109>
              </<dotprod_1033@109:1>@112>
              <make_array_1030@114>
                <k_make_array_u_1178@117>
                  <k_make_array_u_1189@120>
                  </<k_make_array_u_1189@120:2>@122>
                </<k_make_array_u_1178@117:2>@124>
              </<make_array_1030@114:2>@126>
              <<<dotprod_1033@109:1>@112:1>@128>
                <f_dotprod_1429@130>
                </<f_dotprod_1429@130:5>@132>
              </<dotprod_1033@109:2>@134>
              <make_array_1030@136>
                <k_make_array_u_1178@139>
                  <fail_1435@142>
    inlined horn clauses:
      P[<fail_1435@142:0>](<fail_1435@142:0>:bool)|- bot
      
      P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
      ((0 <= <k_make_array_u_1178@139:0>) &&
       ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && <fail_1435@142:0>))
      |- P[<fail_1435@142:0>](<fail_1435@142:0>:bool)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
      P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
      (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
      
      P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
      ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
       ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                 <<dotprod_1033@109:1>@112:0>:int,
                                                 <<<dotprod_1033@109:1>@112:1>@128:0>:int)
      
      P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
      (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
      |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
      
       ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                 <dotprod_1033@109:4>:int)
    begin ParamSubstInfer.infer(44319)[3]
      
    end ParamSubstInfer.infer(44319)[3] (0.132980 sec.)
    inferred extra parameters:
      
    begin RefTypeInfer.elim_coeffs(44321)[3]
      
    end RefTypeInfer.elim_coeffs(44321)[3] (0.003999 sec.)
    begin GenHcSolver.solve(44687)[3]
      Horn clauses:
        P[<fail_1435@142:0>](<fail_1435@142:0>:bool)|- bot
        
        P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
        ((0 <= <k_make_array_u_1178@139:0>) &&
         ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && <fail_1435@142:0>))
        |- P[<fail_1435@142:0>](<fail_1435@142:0>:bool)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
        (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
        
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        P[<fail_1435@142:0>](<fail_1435@142:0>:bool) = false
      upper bounds:
        P[<fail_1435@142:0>](var248:bool) = true
      begin GenHcSolver.classify_pids(46658)[4]
        output:
          [<fail_1435@142:0>]
      end GenHcSolver.classify_pids(46658)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(46661)[4]
        lb:false
        nub:false
        lb':false
        nub':false
        begin InterpProver.interpolate(46662)[5]
          begin InterpProver.interpolate_fresh(46663)[6]
            begin InterpProver.interpolate_log(46664)[7]
              input1: false
              input2: false
              begin InterpProver.interpolate_check(46665)[8]
                begin InterpProver.interpolate_simplify(46666)[9]
                  begin InterpProver.interpolate_quick(46679)[10]
                    
                  end InterpProver.interpolate_quick(46679)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(46683)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(46683)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(46666)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(46665)[8] (0.000000 sec.)
              output: false
            end InterpProver.interpolate_log(46664)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(46663)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(46662)[5] (0.000000 sec.)
        output:
          P[<fail_1435@142:0>](<fail_1435@142:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(46661)[4] (0.000000 sec.)
      Horn clauses:
        P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
        ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && (0 <= <k_make_array_u_1178@139:0>)) |- bot
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
        (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
        
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
      upper bounds:
        P[<<dotprod_1033@109:2>@134:0>](var249:int,var250:int) = ((var250 < var249) || (0 > var250))
      begin GenHcSolver.classify_pids(49202)[4]
        output:
          [<<dotprod_1033@109:2>@134:0>]
      end GenHcSolver.classify_pids(49202)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
      nub:(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
      begin ApronInterface.convex_hull_interpolate(49205)[4]
        lb:((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        nub:(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
        lb':((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        nub':(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
        begin InterpProver.interpolate(49206)[5]
          begin InterpProver.interpolate_fresh(49207)[6]
            begin InterpProver.interpolate_log(49208)[7]
              input1: ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
              input2: (not
                         ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
              begin InterpProver.interpolate_check(49209)[8]
                begin InterpProver.interpolate_simplify(49210)[9]
                  begin InterpProver.interpolate_quick(49265)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(49274)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(49275)[12]
                        begin CsisatInterface.interpolate_csisat_log(49276)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0 & (1 + v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= v_sep_dotprod_1033_sep_109_sep_0)
                          input2: (0 <= v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0 & v_sep_dotprod_1033_sep_109_sep_0 <= v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(49277)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(49277)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(49276)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(49275)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(49274)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(49265)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(49210)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(49209)[8] (0.002000 sec.)
              output: ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
            end InterpProver.interpolate_log(49208)[7] (0.002000 sec.)
            
          end InterpProver.interpolate_fresh(49207)[6] (0.002000 sec.)
          
        end InterpProver.interpolate(49206)[5] (0.002000 sec.)
        output:
          P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
          ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
      end ApronInterface.convex_hull_interpolate(49205)[4] (0.002000 sec.)
      Horn clauses:
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      upper bounds:
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](var251:int,var252:int,var253:int) = true
      begin GenHcSolver.classify_pids(50804)[4]
        output:
          [<<<dotprod_1033@109:1>@112:1>@128:0>]
      end GenHcSolver.classify_pids(50804)[4] (0.000000 sec.)
      lb:((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
          ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(50807)[4]
        lb:((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
            ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        nub:false
        lb':((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
             ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        nub':false
        begin InterpProver.interpolate(50808)[5]
          begin InterpProver.interpolate_fresh(50809)[6]
            begin InterpProver.interpolate_log(50810)[7]
              input1: ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
                       ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
              input2: false
              begin InterpProver.interpolate_check(50811)[8]
                begin InterpProver.interpolate_simplify(50812)[9]
                  begin InterpProver.interpolate_quick(50867)[10]
                    
                  end InterpProver.interpolate_quick(50867)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(50812)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(50811)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(50810)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(50809)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(50808)[5] (0.000999 sec.)
        output:
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(50807)[4] (0.000999 sec.)
      Horn clauses:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
      upper bounds:
        P[<<dotprod_1033@109:1>@112:0>](var254:int,var255:int) = true
      begin GenHcSolver.classify_pids(51767)[4]
        output:
          [<<dotprod_1033@109:1>@112:0>]
      end GenHcSolver.classify_pids(51767)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(51770)[4]
        lb:((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        nub:false
        lb':((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        nub':false
        begin InterpProver.interpolate(51771)[5]
          begin InterpProver.interpolate_fresh(51772)[6]
            begin InterpProver.interpolate_log(51773)[7]
              input1: ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
              input2: false
              begin InterpProver.interpolate_check(51774)[8]
                begin InterpProver.interpolate_simplify(51775)[9]
                  begin InterpProver.interpolate_quick(51814)[10]
                    
                  end InterpProver.interpolate_quick(51814)[10] (0.000999 sec.)
                  
                end InterpProver.interpolate_simplify(51775)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(51774)[8] (0.000999 sec.)
              output: true
            end InterpProver.interpolate_log(51773)[7] (0.000999 sec.)
            
          end InterpProver.interpolate_fresh(51772)[6] (0.000999 sec.)
          
        end InterpProver.interpolate(51771)[5] (0.000999 sec.)
        output:
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) = true
      end ApronInterface.convex_hull_interpolate(51770)[4] (0.000999 sec.)
      Horn clauses:
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      upper bounds:
        P[<dotprod_1033@109:4>](var256:int,var257:int,var258:int) = true
      begin GenHcSolver.classify_pids(52321)[4]
        output:
          [<dotprod_1033@109:4>]
      end GenHcSolver.classify_pids(52321)[4] (0.000000 sec.)
      lb:((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(52324)[4]
        lb:((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        nub:false
        lb':((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        nub':false
        begin InterpProver.interpolate(52325)[5]
          begin InterpProver.interpolate_fresh(52326)[6]
            begin InterpProver.interpolate_log(52327)[7]
              input1: ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
              input2: false
              begin InterpProver.interpolate_check(52328)[8]
                begin InterpProver.interpolate_simplify(52329)[9]
                  begin InterpProver.interpolate_quick(52356)[10]
                    
                  end InterpProver.interpolate_quick(52356)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(52329)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(52328)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(52327)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(52326)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(52325)[5] (0.000000 sec.)
        output:
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) = true
      end ApronInterface.convex_hull_interpolate(52324)[4] (0.000000 sec.)
      begin HcSolver.check_validity(52454)[4]
        input:
          P[<fail_1435@142:0>](<fail_1435@142:0>:bool)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
          ((0 <= <k_make_array_u_1178@139:0>) &&
           ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && <fail_1435@142:0>))
          |- P[<fail_1435@142:0>](<fail_1435@142:0>:bool)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(52454)[4] (0.001000 sec.)
      solution:
        P[<fail_1435@142:0>](<fail_1435@142:0>:bool) = false
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        true
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) = true
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) = true
    end GenHcSolver.solve(44687)[3] (0.046993 sec.)
    begin GenHcSolver.solve(52888)[3]
      Horn clauses:
        P[<fail_1435@142:0>](<fail_1435@142:0>:bool)|- bot
        
        P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
        ((0 <= <k_make_array_u_1178@139:0>) &&
         ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && <fail_1435@142:0>))
        |- P[<fail_1435@142:0>](<fail_1435@142:0>:bool)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
        (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
        
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        P[<fail_1435@142:0>](<fail_1435@142:0>:bool) = false
      upper bounds:
        P[<fail_1435@142:0>](var260:bool) = true
      begin GenHcSolver.classify_pids(54859)[4]
        output:
          [<fail_1435@142:0>]
      end GenHcSolver.classify_pids(54859)[4] (0.000000 sec.)
      lb:false
      nub:false
      begin ApronInterface.convex_hull_interpolate(54862)[4]
        lb:false
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(54865)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(54865)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(54870)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(54870)[5] (0.000000 sec.)
        lb':(-1 >= 0)
        nub':(-1 >= 0)
        begin InterpProver.interpolate(54873)[5]
          begin InterpProver.interpolate_fresh(54874)[6]
            begin InterpProver.interpolate_log(54875)[7]
              input1: (-1 >= 0)
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(54876)[8]
                begin InterpProver.interpolate_simplify(54877)[9]
                  begin InterpProver.interpolate_quick(54892)[10]
                    
                  end InterpProver.interpolate_quick(54892)[10] (0.000000 sec.)
                  begin minimizing # of disjunctions(54896)[10]
                    input: false
                    output: false
                  end minimizing # of disjunctions(54896)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(54877)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(54876)[8] (0.001000 sec.)
              output: false
            end InterpProver.interpolate_log(54875)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(54874)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(54873)[5] (0.001000 sec.)
        output:
          P[<fail_1435@142:0>](<fail_1435@142:0>:bool) = false
      end ApronInterface.convex_hull_interpolate(54862)[4] (0.001000 sec.)
      Horn clauses:
        P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
        ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && (0 <= <k_make_array_u_1178@139:0>)) |- bot
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
        (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int)
        
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
      upper bounds:
        P[<<dotprod_1033@109:2>@134:0>](var261:int,var262:int) = ((var262 < var261) || (0 > var262))
      begin GenHcSolver.classify_pids(57422)[4]
        output:
          [<<dotprod_1033@109:2>@134:0>]
      end GenHcSolver.classify_pids(57422)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
      nub:(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
      begin ApronInterface.convex_hull_interpolate(57425)[4]
        lb:((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
        nub:(not ((<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>) || (0 > <<dotprod_1033@109:2>@134:0>)))
        begin ExtFormula.Formula.case_analysis_boolean(57437)[5]
          ts: ((<<dotprod_1033@109:2>@134:0> = 0) && (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(57437)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(57457)[5]
          ts: ((<<dotprod_1033@109:2>@134:0> >= <dotprod_1033@109:0>) && (0 <= <<dotprod_1033@109:2>@134:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(57457)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@109:2>@134:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0))
        nub':(((<<dotprod_1033@109:2>@134:0> + (-1 * <dotprod_1033@109:0>)) >= 0) &&
              (<<dotprod_1033@109:2>@134:0> >= 0))
        begin InterpProver.interpolate(57463)[5]
          begin InterpProver.interpolate_fresh(57464)[6]
            begin InterpProver.interpolate_log(57465)[7]
              input1: ((<<dotprod_1033@109:2>@134:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0))
              input2: (((<<dotprod_1033@109:2>@134:0> + (-1 * <dotprod_1033@109:0>)) >= 0) &&
                       (<<dotprod_1033@109:2>@134:0> >= 0))
              begin InterpProver.interpolate_check(57466)[8]
                begin InterpProver.interpolate_simplify(57467)[9]
                  begin InterpProver.interpolate_quick(57524)[10]
                    begin CsisatInterface.interpolate_csisat_wrap(57533)[11]
                      begin CsisatInterface.interpolate_csisat_post_process(57534)[12]
                        begin CsisatInterface.interpolate_csisat_log(57535)[13]
                          input1: (0 = v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0 & 1 <= v_sep_dotprod_1033_sep_109_sep_0)
                          input2: (0 <= v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0 & v_sep_dotprod_1033_sep_109_sep_0 <= v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0)
                          begin CsisatInterface.interpolate_csisat_raw(57536)[14]
                            
                          end CsisatInterface.interpolate_csisat_raw(57536)[14] (0.000000 sec.)
                          output: (-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2
                          
                        end CsisatInterface.interpolate_csisat_log(57535)[13] (0.000000 sec.)
                        after simplification: (-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2
                        after dnf conversion: (((-2*v_sep_dotprod_1033_sep_109_sep_0 + 2*v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0) <= -2))
                        
                      end CsisatInterface.interpolate_csisat_post_process(57534)[12] (0.000000 sec.)
                      
                    end CsisatInterface.interpolate_csisat_wrap(57533)[11] (0.000000 sec.)
                    
                  end InterpProver.interpolate_quick(57524)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(57467)[9] (0.000999 sec.)
                
              end InterpProver.interpolate_check(57466)[8] (0.001999 sec.)
              output: ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
            end InterpProver.interpolate_log(57465)[7] (0.001999 sec.)
            
          end InterpProver.interpolate_fresh(57464)[6] (0.001999 sec.)
          
        end InterpProver.interpolate(57463)[5] (0.001999 sec.)
        output:
          P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
          ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
      end ApronInterface.convex_hull_interpolate(57425)[4] (0.001999 sec.)
      Horn clauses:
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                   <<dotprod_1033@109:1>@112:0>:int,
                                                   <<<dotprod_1033@109:1>@112:1>@128:0>:int)
        
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
         ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      upper bounds:
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](var263:int,var264:int,var265:int) = true
      begin GenHcSolver.classify_pids(59063)[4]
        output:
          [<<<dotprod_1033@109:1>@112:1>@128:0>]
      end GenHcSolver.classify_pids(59063)[4] (0.000000 sec.)
      lb:((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
          ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
      nub:false
      begin ApronInterface.convex_hull_interpolate(59066)[4]
        lb:((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
            ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(59086)[5]
          ts: ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
               ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          
        end ExtFormula.Formula.case_analysis_boolean(59086)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(59095)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(59095)[5] (0.000000 sec.)
        lb':((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
             ((<<dotprod_1033@109:1>@112:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0)))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(59098)[5]
          begin InterpProver.interpolate_fresh(59099)[6]
            begin InterpProver.interpolate_log(59100)[7]
              input1: ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
                       ((<<dotprod_1033@109:1>@112:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0)))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(59101)[8]
                begin InterpProver.interpolate_simplify(59102)[9]
                  begin InterpProver.interpolate_quick(59160)[10]
                    
                  end InterpProver.interpolate_quick(59160)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(59102)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(59101)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(59100)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(59099)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(59098)[5] (0.001000 sec.)
        output:
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
          true
      end ApronInterface.convex_hull_interpolate(59066)[4] (0.001000 sec.)
      Horn clauses:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
        (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
        |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int)
        
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) =
        ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
      upper bounds:
        P[<<dotprod_1033@109:1>@112:0>](var266:int,var267:int) = true
      begin GenHcSolver.classify_pids(60062)[4]
        output:
          [<<dotprod_1033@109:1>@112:0>]
      end GenHcSolver.classify_pids(60062)[4] (0.000000 sec.)
      lb:((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(60065)[4]
        lb:((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(60077)[5]
          ts: ((<<dotprod_1033@109:1>@112:0> = 0) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>))
          
        end ExtFormula.Formula.case_analysis_boolean(60077)[5] (0.000999 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(60085)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(60085)[5] (0.000000 sec.)
        lb':((<<dotprod_1033@109:1>@112:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(60088)[5]
          begin InterpProver.interpolate_fresh(60089)[6]
            begin InterpProver.interpolate_log(60090)[7]
              input1: ((<<dotprod_1033@109:1>@112:0> = 0) && ((-1 + <dotprod_1033@109:0>) >= 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(60091)[8]
                begin InterpProver.interpolate_simplify(60092)[9]
                  begin InterpProver.interpolate_quick(60132)[10]
                    
                  end InterpProver.interpolate_quick(60132)[10] (0.001000 sec.)
                  
                end InterpProver.interpolate_simplify(60092)[9] (0.001000 sec.)
                
              end InterpProver.interpolate_check(60091)[8] (0.001000 sec.)
              output: true
            end InterpProver.interpolate_log(60090)[7] (0.001000 sec.)
            
          end InterpProver.interpolate_fresh(60089)[6] (0.001000 sec.)
          
        end InterpProver.interpolate(60088)[5] (0.001000 sec.)
        output:
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) = true
      end ApronInterface.convex_hull_interpolate(60065)[4] (0.001999 sec.)
      Horn clauses:
         ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                   <dotprod_1033@109:4>:int)
      lower bounds:
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) =
        ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      upper bounds:
        P[<dotprod_1033@109:4>](var268:int,var269:int,var270:int) = true
      begin GenHcSolver.classify_pids(60641)[4]
        output:
          [<dotprod_1033@109:4>]
      end GenHcSolver.classify_pids(60641)[4] (0.000000 sec.)
      lb:((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
      nub:false
      begin ApronInterface.convex_hull_interpolate(60644)[4]
        lb:((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
        nub:false
        begin ExtFormula.Formula.case_analysis_boolean(60656)[5]
          ts: ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          
        end ExtFormula.Formula.case_analysis_boolean(60656)[5] (0.000000 sec.)
        begin ExtFormula.Formula.case_analysis_boolean(60664)[5]
          ts: false
          
        end ExtFormula.Formula.case_analysis_boolean(60664)[5] (0.000000 sec.)
        lb':((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:3> = 0))
        nub':(-1 >= 0)
        begin InterpProver.interpolate(60667)[5]
          begin InterpProver.interpolate_fresh(60668)[6]
            begin InterpProver.interpolate_log(60669)[7]
              input1: ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:3> = 0))
              input2: (-1 >= 0)
              begin InterpProver.interpolate_check(60670)[8]
                begin InterpProver.interpolate_simplify(60671)[9]
                  begin InterpProver.interpolate_quick(60699)[10]
                    
                  end InterpProver.interpolate_quick(60699)[10] (0.000000 sec.)
                  
                end InterpProver.interpolate_simplify(60671)[9] (0.000000 sec.)
                
              end InterpProver.interpolate_check(60670)[8] (0.000000 sec.)
              output: true
            end InterpProver.interpolate_log(60669)[7] (0.000000 sec.)
            
          end InterpProver.interpolate_fresh(60668)[6] (0.000000 sec.)
          
        end InterpProver.interpolate(60667)[5] (0.000000 sec.)
        output:
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) = true
      end ApronInterface.convex_hull_interpolate(60644)[4] (0.000000 sec.)
      begin HcSolver.check_validity(60799)[4]
        input:
          P[<fail_1435@142:0>](<fail_1435@142:0>:bool)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
          ((0 <= <k_make_array_u_1178@139:0>) &&
           ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && <fail_1435@142:0>))
          |- P[<fail_1435@142:0>](<fail_1435@142:0>:bool)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(60799)[4] (0.002000 sec.)
      solution:
        P[<fail_1435@142:0>](<fail_1435@142:0>:bool) = false
        P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int) =
        ((1 + <<dotprod_1033@109:2>@134:0>) <= <dotprod_1033@109:0>)
        P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<<<dotprod_1033@109:1>@112:1>@128:0>:int) =
        true
        P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int) = true
        P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,<dotprod_1033@109:4>:int) = true
    end GenHcSolver.solve(52888)[3] (0.051992 sec.)
    begin YhornInterface.solve(61233)[3]
      begin HcSolver.solve_ub(61234)[4]
        encoded:
          P[<fail_1435@142:0>](<fail_1435@142:0>:int)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
          ((0 <= <k_make_array_u_1178@139:0>) &&
           ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && (<fail_1435@142:0> = 1)))
          |- P[<fail_1435@142:0>](<fail_1435@142:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        input to Yhorn:
          P[<fail_1435@142:0>](<fail_1435@142:0>:int)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
          ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) &&
           ((0 <= <k_make_array_u_1178@139:0>) && (<fail_1435@142:0> = 1)))
          |- P[<fail_1435@142:0>](<fail_1435@142:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<<dotprod_1033@109:1>@112:1>@128:0> = 0)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = <dotprod_1033@109:3>) && (<dotprod_1033@109:4> = 0))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)Yhorn (Wed Sep 25 10:52:05 JST 2013)


(0=0) & (v_sep_fail_1435_sep_142_sep_0($251)) -> 1=0.
(($251-1=0) & (-$252<=0) & ($252-$253>=0)) & (v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($253,$252)) -> v_sep_fail_1435_sep_142_sep_0($251).
($254-$255<0) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$254,$256)) & (v_sep_dotprod_1033_sep_109_sep_4($255,$254,$257)) -> v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($255,$254).
(($258=0) & (-$259<=0) & (-$255+$259<0)) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$259,$258).
(-$255+$259<0) & (v_sep_dotprod_1033_sep_109_sep_4($255,$259,$260)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259).
($260=0) & ($260-$261=0) -> v_sep_dotprod_1033_sep_109_sep_4($255,$261,$260).


v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1435_sep_142_sep_0: X
.......
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1435_sep_142_sep_0: X
...
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1435_sep_142_sep_0: X
.....
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1435_sep_142_sep_0: X
......
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0: X
v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0: X
v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0: X
v_sep_dotprod_1033_sep_109_sep_4: X
v_sep_fail_1435_sep_142_sep_0: X
.......(0=0) & (v_sep_fail_1435_sep_142_sep_0($251)) -> 1=0.
(($251-1=0) & (-$252<=0) & ($252-$253>=0)) & (v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($253,$252)) -> v_sep_fail_1435_sep_142_sep_0($251).
($254-$255<0) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$254,$256)) & (v_sep_dotprod_1033_sep_109_sep_4($255,$254,$257)) -> v_sep_dotprod_1033_sep_109_sep_2_sep_134_sep_0($255,$254).
(($258=0) & (-$259<=0) & (-$255+$259<0)) & (v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_1_sep_128_sep_0($255,$259,$258).
(-$255+$259<0) & (v_sep_dotprod_1033_sep_109_sep_4($255,$259,$260)) -> v_sep_dotprod_1033_sep_109_sep_1_sep_112_sep_0($255,$259).
($260=0) & ($260-$261=0) -> v_sep_dotprod_1033_sep_109_sep_4($255,$261,$260).

        solution:
          P[<<dotprod_1033@109:1>@112:0>]($284:int,$286:int) = true
          P[<<<dotprod_1033@109:1>@112:1>@128:0>]($270:int,$272:int,$274:int) = true
          P[<<dotprod_1033@109:2>@134:0>]($265:int,$267:int) = ((1 + $267) <= $265)
          P[<dotprod_1033@109:4>]($277:int,$279:int,$281:int) = true
          P[<fail_1435@142:0>]($262:bool) = false
        
      end HcSolver.solve_ub(61234)[4] (0.018997 sec.)
      begin HcSolver.check_validity(61493)[4]
        input:
          P[<fail_1435@142:0>](<fail_1435@142:0>:bool)|- bot
          
          P[<<dotprod_1033@109:2>@134:0>](<k_make_array_u_1178@139:1>:int,<k_make_array_u_1178@139:0>:int),
          ((0 <= <k_make_array_u_1178@139:0>) &&
           ((<k_make_array_u_1178@139:0> >= <k_make_array_u_1178@139:1>) && <fail_1435@142:0>))
          |- P[<fail_1435@142:0>](<fail_1435@142:0>:bool)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,<f_dotprod_1429@130:2>:int),
          P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:2>@134:0>:int,var246:int),
          (<<dotprod_1033@109:2>@134:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:2>@134:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:2>@134:0>:int)
          
          P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int),
          ((<<<dotprod_1033@109:1>@112:1>@128:0> = 0) &&
           ((0 <= <<dotprod_1033@109:1>@112:0>) && (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)))
          |- P[<<<dotprod_1033@109:1>@112:1>@128:0>](<dotprod_1033@109:0>:int,
                                                     <<dotprod_1033@109:1>@112:0>:int,
                                                     <<<dotprod_1033@109:1>@112:1>@128:0>:int)
          
          P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<<dotprod_1033@109:1>@112:0>:int,<dotprod_1033@109:4>:int),
          (<<dotprod_1033@109:1>@112:0> < <dotprod_1033@109:0>)
          |- P[<<dotprod_1033@109:1>@112:0>](<dotprod_1033@109:0>:int,
                                             <<dotprod_1033@109:1>@112:0>:int)
          
           ((<dotprod_1033@109:4> = 0) && (<dotprod_1033@109:4> = <dotprod_1033@109:3>))
          |- P[<dotprod_1033@109:4>](<dotprod_1033@109:0>:int,<dotprod_1033@109:3>:int,
                                     <dotprod_1033@109:4>:int)
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        checking substituted Horn clause:
           false |- bot
        
      end HcSolver.check_validity(61493)[4] (0.010998 sec.)
      solution:
        P[<<dotprod_1033@109:1>@112:0>]($284:int,$286:int) = true
        P[<<<dotprod_1033@109:1>@112:1>@128:0>]($270:int,$272:int,$274:int) = true
        P[<<dotprod_1033@109:2>@134:0>]($265:int,$267:int) = ((1 + $267) <= $265)
        P[<dotprod_1033@109:4>]($277:int,$279:int,$281:int) = true
        P[<fail_1435@142:0>]($262:bool) = false
    end YhornInterface.solve(61233)[3] (0.029995 sec.)
    
  end RefTypeInfer.infer_etrs(41493)[2] (0.284957 sec.)
  refinement types:
    main_1428: X
    f_1432: v1:int -> X
    f_1433: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:int -> (v3:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:{v6:int | ((1 + v6) <= v1)} -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1178: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    k_make_array_u_1189: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1429: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    make_array_1030: v1:int -> v2:int -> (v3:int -> X) -> X
    k_make_array_u_1178: v1:int -> v2:int -> (v3:int -> X) -> v5:bool -> X
    fail_1435: v1:{v1:bool | false} -> (v2:unit -> X) -> X
    f_1434: var294:int -> var293:int -> var292:unit -> X
    f_dotprod_1430: var310:int ->
                    var309:int ->
                    var308:int ->
                    var307:int ->
                    (var306:int -> X) ->
                    (var304:int -> (var303:int -> X) -> X) -> (var300:int -> (var299:int -> X) -> X) -> var296:int -> X
    f_main_1431: var316:int -> var315:int -> (var314:unit -> X) -> var312:int -> X
  abstraction types:
    main_1428: X
    f_1432: v1:int -> X
    f_1433: v1:int -> v2:int -> X
    main_1039: v1:int -> v2:int -> (v3:unit -> X) -> X
    dotprod_1033: v1:int ->
                  (v2:int -> (v3:int -> X) -> X) ->
                  (v6:int[v6 -> ((1 + v6) <= v1)] -> (v7:int -> X) -> X) -> v10:int -> v11:int -> (v12:int -> X) -> X
    make_array_1030: var317:int -> var318:int -> (var319:int -> X) -> X
    k_make_array_u_1178: var322:int -> var323:int -> (var324:int -> X) -> var326:bool -> X
    k_make_array_u_1189: v1:int -> v2:int -> (v3:int -> X) -> v5:unit -> X
    f_dotprod_1429: v1:int ->
                    v2:int ->
                    v3:int ->
                    (v4:int -> X) -> (v6:int -> (v7:int -> X) -> X) -> (v10:int -> (v11:int -> X) -> X) -> v14:int -> X
    fail_1435: v1:bool -> (v2:unit -> X) -> X
    f_1434: var294:int -> var293:int -> var292:unit -> X
    f_dotprod_1430: var310:int ->
                    var309:int ->
                    var308:int ->
                    var307:int ->
                    (var306:int -> X) ->
                    (var304:int -> (var303:int -> X) -> X) -> (var300:int -> (var299:int -> X) -> X) -> var296:int -> X
    f_main_1431: var316:int -> var315:int -> (var314:unit -> X) -> var312:int -> X
  
end AbsTypeInfer.refine(41492)[1] (0.291956 sec.)
DONE!

Prefix of spurious counter-example::
0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 4)::
Main: main_1428
  main_1428 -> (rand_int f_1432)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      i_1037 >= n_1034) -> (k_dotprod_1240 sum_1038)
  dotprod_1033 n_1034 v1_1035 v2_1036 i_1037 sum_1038 k_dotprod_1240 when (
      not (i_1037 >= n_1034)) ->
      (v1_1035 i_1037 (f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036))
  f_1432 x_1386 -> (rand_int (f_1433 x_1386))
  f_1433 x_1386 x_1399 -> (main_1039 x_1386 x_1399 (f_1434 x_1386 x_1399))
  f_1434 x_1386 x_1399 x_1383 -> end
  f_dotprod_1429 i_1037 n_1034 sum_1038 k_dotprod_1240 v1_1035 v2_1036 x_1266 ->
      (v2_1036 i_1037 (f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036))
  f_dotprod_1430 i_1037 n_1034 sum_1038 x_1266 k_dotprod_1240 v1_1035 v2_1036 x_1267 ->
      (dotprod_1033 n_1034 v1_1035 v2_1036 (i_1037 + 1) (sum_1038 + (x_1266 * x_1267)) k_dotprod_1240)
  f_main_1431 n_1041 z_1040 k_main_1315 x_1350 -> (k_main_1315 ())
  fail_1435 b k -> {fail} => (k ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when b_1190 ->
      (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 ())
  k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 b_1190 when (not b_1190) ->
      (fail_1435 true (k_make_array_u_1189 i_1032 n_1031 k_make_array_1172))
  k_make_array_u_1189 i_1032 n_1031 k_make_array_1172 x_1175 -> (k_make_array_1172 0)
  main_1039 z_1040 n_1041 k_main_1315 when (z_1040 = 0) ->
      (dotprod_1033 n_1041 (make_array_1030 n_1041) (make_array_1030 n_1041) z_1040 z_1040
        (f_main_1431 n_1041 z_1040 k_main_1315))
  main_1039 z_1040 n_1041 k_main_1315 when (not (z_1040 = 0)) -> (k_main_1315 ())
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (0 <= i_1032) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 (i_1032 < n_1031))
  make_array_1030 n_1031 i_1032 k_make_array_1172 when (not (0 <= i_1032)) ->
      (k_make_array_u_1178 i_1032 n_1031 k_make_array_1172 false)
Types:
  main_1428 : X
  dotprod_1033 : (x_1:int ->
                  (x_3:int[x_1 >= x_3 + 1; x_3 >= 0] -> (int -> X) -> X) ->
                  (x_9:int[x_1 >= x_9 + 1; x_9 >= 0] -> (int -> X) -> X) ->
                  x_14:int -> int[x_14 >= 0] -> (int -> X) -> X)
  fail_1435 : (x_1:bool[x_1] -> (unit -> X) -> X)
  
(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Refinement Types:
  dotprod: (x_1:int ->
                (({x_9:int | x_9 >= 0 && x_1 >= x_9 + 1} -> int) ->
                     (({x_7:int | x_7 >= 0 && x_1 >= x_7 + 1} -> int) -> (x_4:int -> ({x_5:int | x_4 >= 0} -> int)))))

cycles: 4
total: 1.324 sec
  abst: 0.038 sec
  mc: 0.053 sec
  refine: 0.901 sec
    exparam: 0.335 sec
