
include Makefile.config

# OCaml tools
OCAMLC    = @OCAMLC@
OCAMLOPT  = @OCAMLOPT@
OCAMLDEP  = @OCAMLDEP@ -slash
OCAMLDOC  = @OCAMLDOC@
OCAMLLEX  = @OCAMLLEX@
OCAMLYACC = @OCAMLYACC@ -v
OCAMLFIND = @OCAMLFIND@

# Libraries
OCAMLGRAPH = @OCAMLGRAPH@
Z3ML = @Z3ML@
LIB = unix graph z3 nums atp_batch

INCLUDES = -I $(OCAMLGRAPH) -I $(Z3ML) -I $(ATP)
BFLAGS = $(INCLUDES) -g -w -8 -annot
OFLAGS = $(INCLUDES) -w -8 -annot

# main target
#############

NAME = yhorn
all: byte opt

# bytecode and native-code compilation
######################################

MOD  = version flags listEx id error util mapEx puf mTypes \
       expr formula nf types parser lexer z3interface atpInterface horn \
       interpolation
MLI  = $(wildcard $(patsubst %, %.mli, $(MOD)))
ML   = $(wildcard $(patsubst %, %.ml, $(MOD)))
SRC  = $(MLI) $(ML) $(filter %.ml %.mli,$(GENERATED))
CMO  = $(ML:.ml=.cmo)
CMX  = $(ML:.ml=.cmx)
CMA  = $(NAME).cma
CMXA = $(NAME).cmxa
LIBCMA := $(patsubst %, %.cma, $(LIB))
LIBCMXA := $(patsubst %, %.cmxa, $(LIB))

GENERATED = META version.ml parser.ml parser.mli lexer.ml

$(CMX): OFLAGS += -for-pack Yhorn

byte: $(CMA)
opt: $(CMXA)

$(NAME).cma: $(NAME).cmo
	$(OCAMLC) $(INCLUDES) -a -g -o $@ $^

$(NAME).cmxa: $(NAME).cmx
	$(OCAMLOPT) $(INCLUDES) -a -o $@ $^

$(NAME).cmo: $(CMO)
	$(OCAMLC) $(INCLUDES) -pack -g -o $@ $^

$(NAME).cmx: $(CMX)
	$(OCAMLOPT) $(INCLUDES) -pack -o $@ $^

$(NAME).byte: $(CMO) interactive.cmo
	$(OCAMLC) $(INCLUDES) -g -o $@ $(LIBCMA) $^

$(NAME).opt: $(CMX) interactive.cmx
	$(OCAMLOPT) $(INCLUDES) -unsafe -inline 100 -o $@ $(LIBCMXA) $^

VERSION = 0.3

version.ml: Makefile
	rm -f $@
	echo "let version = \""$(VERSION)"\"" > $@
	echo "let date = \""`date`"\"" >> $@

META: META.in Makefile
	sed -e s/VERSION/$(VERSION)/ -e s/CMA/$(CMA)/ -e s/CMXA/$(CMXA)/ \
		$@.in > $@

# documentation
###############

DOCDIR   = doc

NODOC	 = parser lexer version
NODOC	:= $(wildcard $(patsubst %, %.mli, $(NODOC)) $(patsubst %, %.ml, $(NODOC)))
DOC_SRC  = $(filter-out $(NODOC), $(SRC))

.PHONY: doc dot ps depgraph

$(DOCDIR)/index.html doc:
	mkdir -p $(DOCDIR)
	rm -f $(DOCDIR)/*.html
	$(OCAMLDOC) $(INCLUDES) -d $(DOCDIR) -html $(DOC_SRC)

$(DOCDIR)/$(NAME).dot:
	mkdir -p $(DOCDIR)
	rm -f $(DOCDIR)/$(NAME).dot
	$(OCAMLDOC) $(INCLUDES) -o $@ -dot $(DOC_SRC)
dot: $(DOCDIR)/$(NAME).dot

$(DOCDIR)/$(NAME).ps: $(DOCDIR)/$(NAME).dot
	dot -Tps $< > $@
ps: $(DOCDIR)/$(NAME).ps

depgraph: $(DOCDIR)/$(NAME).ps
	gv $(DOCDIR)/$(NAME).ps

# generic rules
###############

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

# Makefile is rebuilt whenever Makefile.in or configure.in is modified
######################################################################

Makefile: Makefile.in config.status
	if test -e $@; then chmod a+w $@; fi
	./config.status
	chmod a-w $@

config.status: configure
	./config.status --recheck

configure: configure.in
	autoconf

# install
#########

install: all
	$(OCAMLFIND) remove $(NAME)
	$(OCAMLFIND) install $(NAME) META $(NAME).a $(NAME).cmi $(NAME).cma $(NAME).cmxa

# clean
#######

clean:
	rm -f *~
	rm -f *.cm[iox] *.annot *.o
	rm -f $(GENERATED)
	rm -f $(NAME).*a $(NAME).cm* $(NAME).o $(NAME).byte $(NAME).opt

dist-clean distclean: clean
	rm -f Makefile config.cache config.log config.status *.byte *.opt

git-clean gitclean:
	rm .gitignore
	git clean -df
	git checkout .gitignore

# depend
########

.PHONY: depend
.depend depend: $(GENERATED)
	rm -f .depend
	$(OCAMLDEP) $(INCLUDES) $(SRC) interactive.ml > .depend

-include .depend
